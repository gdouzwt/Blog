<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>记录</title>
    <description></description>
    <link>https://zwt.io/</link>
    <atom:link href="https://zwt.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 15 Feb 2020 23:00:54 +0000</pubDate>
    <lastBuildDate>Sat, 15 Feb 2020 23:00:54 +0000</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>816 基准测试回顾</title>
        <description>&lt;p&gt;The following are the details of the interface &lt;code&gt;ScheduledExecutorService&lt;/code&gt;:
All Superinterfaces:
 &lt;code&gt;Executor&lt;/code&gt;, &lt;code&gt;ExecutorService&lt;/code&gt;
All Known Implementing Classes:
 &lt;code&gt;ScheduledThreadPoolExecutor&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;An &lt;code&gt;ExecutorService&lt;/code&gt; that can schedule commands to run after a given delay, or to execute periodically.
The schedule     methods create tasks with various delays and return a task object that can     be used to cancel or check execution. The &lt;code&gt;scheduleAtFixedRate&lt;/code&gt; and  &lt;code&gt;scheduleWithFixedDelay&lt;/code&gt; methods create and execute tasks that run periodically until cancelled.&lt;/p&gt;

&lt;p&gt;Commands submitted using the &lt;code&gt;Executor.execute(java.lang.Runnable)&lt;/code&gt; and &lt;code&gt;ExecutorService.submit&lt;/code&gt; methods are scheduled with a requested delay of zero. Zero and negative delays (but not periods) are also allowed in schedule methods, and are treated as     requests for immediate execution.&lt;/p&gt;

&lt;p&gt;All schedule methods accept relative delays and periods as arguments, not absolute times or dates. It is a simple matter to transform an absolute time represented as a Date to the required form. For example, to schedule at a certain future date, you can use: &lt;code&gt;schedule(task, date.getTime() - System.currentTimeMillis(), TimeUnit.MILLISECONDS)&lt;/code&gt;. Beware however that expiration of a relative delay need not coincide with the current Date at which the task is enabled due to network time synchronization protocols, clock drift, or other factors. The Executors class provides convenient factory methods for the &lt;code&gt;ScheduledExecutorService&lt;/code&gt; implementations provided in this package.&lt;/p&gt;

&lt;p&gt;Following is a usage example that sets up a &lt;code&gt;ScheduledExecutorService&lt;/code&gt; to beep every ten seconds for an hour:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import java.util.concurrent.*;
import static java.util.concurrent.TimeUnit.SECONDS;

public class BeeperControl {
    private final ScheduledExecutorService scheduler =
            Executors.newScheduledThreadPool(1);

    public void beepForAnHour() {
        final ScheduledFuture&amp;lt;?&amp;gt; beeperHandle =
                scheduler.scheduleAtFixedRate(() -&amp;gt;
                        System.out.println(&quot;beep&quot;), 0, 3, SECONDS);
    }

    public static void main(String[] args) {
        new BeeperControl().beepForAnHour();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;which-of-the-following-statements-are-correct&quot;&gt;Which of the following statements are correct?&lt;/h5&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;A List stores elements in a Sorted Order.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;List just keeps elements in the order in which they are added. For sorting, you’ll need some other interface such as a SortedSet.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;A Set keeps the elements sorted and a List keeps the elements in the order they were added.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;A Set keeps unique objects without any order or sorting.&lt;/p&gt;

      &lt;p&gt;A List keeps the elements in the order they were added. A List may have non-unique elements.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;A SortedSet keeps the elements in the order they were added.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;A SortedSet keeps unique elements in their natural order.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;An OrderedSet keeps the elements sorted.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;There is no interface like OrderedSet&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;An OrderedList keeps the elements ordered.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;There is no such interface. The List interface itself is meant for keeping the elements in the order they were added.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;A NavigableSet keeps the elements sorted.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;A NavigableSet is a Sorted extended with navigation methods reporting closest matches for given search targets. Methods lower, floor, ceiling, and higher return elements respectively less than, or equal, greater than or equal, and greater than a given element, returning null if there is no such element.&lt;/p&gt;

      &lt;p&gt;Since NavigableSet is a SortedSet, it keeps the elements sorted.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;how-many-methods-have-to-be-provided-by-a-class-that-is-not-abstract-and-that-implements-serializable-interface&quot;&gt;How many methods have to be provided by a class that is not abstract and that implements Serializable interface?&lt;/h5&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;0&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Serializable interface does not declare any methods. That is why is also called as a “marker” interface.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;1&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;2&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;3&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Simple rule to determine sorting order: spaces &amp;lt; numbers &amp;lt; uppercase &amp;lt; lowercase&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;given-that-a-code-fragment-has-just-created-a-jdbc-connection-and-has-executed-an-update-statement-which-of-the-following-statements-is-correct&quot;&gt;Given that a code fragment has just created a JDBC Connection and has executed an update statement, which of the following statements is correct?&lt;/h5&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Changes to the database are pending a commit call on the connection.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Changes to the database will be rolled back if another update is executed without committing the previous update.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Changes to the database will be committed right after the update statement has completed execution.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;A Connection is always in auto-commit mode when it is created. As per the problem statement, an update was fired without explicitly disabling the auto-commit mode, the changes will be committed right after the update statement has finished execution.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Changes to the database will be committed when another query (update or select) is fired using the connection.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When a connection is created, it is in auto-commit mode. i.e. auto-commit is enabled. This means that each individual SQL statement is treated as a transaction and is automatically committed right after it is completed. (A statement is completed when all of its result sets and update counts have been retrieved. In almost all cases, however, a statement is completed, and therefore committed, right after it is executed.)&lt;/p&gt;

&lt;p&gt;The way to allow two or more statements to be grouped into a transaction is to disable the auto-commit mode. Since it is enabled by default, you have to explicitly disable it after creating a connection by calling &lt;code&gt;con.setAutoCommit(false);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;JDBC 默认开启了自动提交。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;which-statements-concerning-the-relation-between-a-non-static-inner-class-and-its-outer-class-instances-are-true&quot;&gt;Which statements concerning the relation between a non-static inner class and its outer class instances are true?&lt;/h5&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Member variables of the outer instance are always accessible to inner instances, regardless of their accessibility modifiers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Member variables of the outer instance can always be referred to using only the variable name within the inner instance.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;This is possible only if that variable is not shadowed by another variable in inner class.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;More than one inner instance can be associated with the same outer instance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;An inner class can extend its outer classes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;A final outer class cannot have any inner classes.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;There is no such rule.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 15 Feb 2020 22:10:00 +0000</pubDate>
        <link>https://zwt.io/2020/02/15/foundation-test-review/</link>
        <guid isPermaLink="true">https://zwt.io/2020/02/15/foundation-test-review/</guid>
        
        <category>Java 11</category>
        
        <category>OCP 11</category>
        
        
      </item>
    
      <item>
        <title>Exercises for Inner class</title>
        <description>&lt;h3 id=&quot;questions-and-exercises&quot;&gt;QUESTIONS AND EXERCISES&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What is an inner class? Differentiate between member, local, and anonymous inner classes.&lt;/p&gt;

    &lt;p&gt;An inner class declares inside a top-level class without a static modifier. Inner classes that declared at member level are called member inner classes, local to the method, or instance initialization block are local inner class. And local inner classes that have no name are anonymous inner classes.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;An inner class is a class declared inside the  body of another class. A member inner class is declared inside a class. It can be declared as public, private, protected, or package-level. A local inner class is declared inside a block. Its scope is limited to the block in which it is declared. An anonymous inner class is the same as  local inner class, but has no name. It is declared and an object of the class is created at the same time.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the fully qualified name of the inner class B, which is declared as follows?&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// A.java
package io.zwt.innerclasses.exercises;
   
public class A {
	public class B {
	}
}
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;That will be :  &lt;code&gt;io.zwt.innerclasses.exercises.A.B&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Consider the following declaration for top-level class named Cup and a member inner class named Handle:&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// Cup.java
package io.zwt.innerclasses.exercises;
   
public class Cup {
	public class Handle {
		public Handle() {
			System.out.println(&quot;Created a handle for the cup&quot;);
		}
	}
   	
	public Cup() {
		System.out.println(&quot;Created a cup&quot;);
	}
}
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;Compile the in the main() method for the following CupTest class that will create an instance of the Cup.Handle inner class:&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// CupTest.java
package io.zwt.innerclasses.exercises;
public class CupTest {
    public static void main(String[] args) {
        // Create a Cup
        Cup c = new Cup();
           
        // Create a Handle
        // Cup.Handle h = / * You code goes here */;
        Cup.Handle h = c.new Handle();
    }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What will be the output when the following Outer class is run?&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// Outer.java
package io.zwt.innerclasses.exercises;
   
public class Outer {
    private final int value = 19680112;
       
    public class Inner {
        private final int value = 19690919;
        public void print() {
            System.out.println(&quot;Inner: value = &quot; + value);
            System.out.println(&quot;Inner: this.value = &quot; + this.value);
            System.out.println(&quot;Inner: Inner.this.value = &quot; + 
                              Inner.this.value);
            System.out.println(&quot;Inner: Outer.this.value = &quot; + 
                              Outer.this.vlaue);
        }
    }
       
    public void print() {
        System.out.println(&quot;Outer: value = &quot; + value);
        System.out.println(&quot;Outer: this.value = &quot; + this.value);
        System.out.println(&quot;Outer: Outer.this.value = &quot; + 
                          Outer.this.value);
    }
       
    public static void main(String[] args) {
        Outer out = new Outer();
        Inner in = out.new Inner();
        out.print();
        in.print();
    }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The following declaration of an AnonymousTest class does not compile. Describe the reasons and steps you might take to fix the error.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// AnonymousTest
package io.zwt.innerclasses.exercises;
   
public class AnonymousTest {
    public static void main(String[] args) {
        int x = 100;
           
        Object obj = new Object() {
            {
                System.out.println(&quot;Inside.x = &quot; + x);
            }
        };
        x = 300;
        System.out.println(&quot;Outside.x = &quot; + x);
    }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Consider the following declaration for a top-level class A and a member inner class B:&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package io.zwt.innerclasses.exercises;
   
public class A {
    public class B {
        public B() {
            System.out.println(&quot;B is created.&quot;);
        }
    }
    public A() {
        System.out.println(&quot;A is created.&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;Consider the following incomplete declaration of class C, which inherits from the inner class A.B:&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// C.java
package io.zwt.innerclasses.exercises;
   
public class C extends A.B {
    /* Define a constructor for class C here */
       
    public static void main(String[] args) {
        C c = /* Your code goes here */;
    }
}
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;Add an appropriate constructor for class C and complete the statement in the main() method. When class C is run, it should print the following to the standard output:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;A is created.
B is created.
C is created.
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Which of the following is true about an anonymous inner class?&lt;/p&gt;

    &lt;p&gt;a. It can inherit from one class and implement one interface.&lt;/p&gt;

    &lt;p&gt;b. It can inherit from one class and implement multiple interfaces.&lt;/p&gt;

    &lt;p&gt;c. It can inherit from one class or implement one interface.&lt;/p&gt;

    &lt;p&gt;d. It can implement multiple interfaces, but inherits from only one class.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How many class files will be generated when the following declaration of the Computer class is compiled? List the names of all generated class files.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// Computer.java
package io.zwt.innerclasses.exercises;
   
public class Computer {
    public class Mouse {
        public class Button {
        }
    }
       
    public static void main(String[] args) {
        Object obj = new Object() {
        };
           
        System.out.println(obj.hasCode());
    }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The following declaration of class H does not compile. Point out the problem and suggest a solution.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// H.java
package io.zwt.innerclasses.exercises;
   
public class H {
    private int x = 100;
       
    public static class J {
        private int y = x * 2;
    }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Consider the following declaration of a top-level class P and a nested static class Q:&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// P.java
package io.zwt.innerclasses.exercises;
    
public class P {
    public static class Q {
        System.out.println(&quot;Hello from Q.&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;Complete the main() method of the following PTest class that will create an object of the nested static class Q. When class PTest is run, it should print a message “Hello from Q.” to the standard output.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// PTest.java
package io.zwt.innerclasses.exercises;
    
public class PTest {
    public static void main(String[] args) {
        P.Q q = /* Your code goes here */ ;
    }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 15 Feb 2020 16:55:00 +0000</pubDate>
        <link>https://zwt.io/2020/02/15/inner-class-exercises/</link>
        <guid isPermaLink="true">https://zwt.io/2020/02/15/inner-class-exercises/</guid>
        
        <category>Java</category>
        
        
      </item>
    
      <item>
        <title>Travis CI上手</title>
        <description>&lt;h3 id=&quot;配置文件&quot;&gt;配置文件&lt;/h3&gt;

&lt;p&gt;我用于博客自动构建的&lt;code&gt;.travis.yml&lt;/code&gt;脚本：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;language: ruby
rvm:
  - 2.6.3
env:
  global:
  - NOKOGIRI_USE_SYSTEM_LIBRARIES=true
  - secure: D0RrVHHBEEJMyJK9OUUPM6Wms+D+zifJhHFl4BcmC0leSR0vANoQ6357Bl4miZL2flmnBU/1Z9WNzcDVM0JwQpF8ZVeEdMvgBY5+73Xjp8cIwYfWx8MAUB8J1Hug2aEiXw6KoSxjFOnUpSRnhCcWpviFNCZOa5XavMfe7+OHbNQT1U1xu+ZOmDG6Hrm3CMhfzu2cRPIfziAAgnWVfgtqA0STXnY9D0HvfsKPl6khy6VWkeF09Chqo/XVO/SV5LSgplkgXh1OzS6ITwT99UWDRqIeXYAvMJFyrHkzdxNgtAddYVxmx8WQqfqUFQ6A3HSnJy2Fq04H3gLszQxrVPzw8fNeOzBe7hIviaZdgRsglc26NO13EX//e4DA1ImiYKciFGvDNDBrqtv8u3XAG+8jVe/dLwKbBXnvi64udh2/H/lTBfWQ3eV08/R6m0m4aF8jbv0oBuXReyXuEy9D6xNm+yceekWzKAmTYPFb9W5XLveIgt8SIQO9P6tGuMWV6w7KRhgbpgI886ZeSVS3WcAGIr11SvSNa+x5WapOd/mizHrA8VvW4v8GjmYYwTOsmiLuYl2t1fWY76yYOOdSDLC9XhJN/mS3qxxX7WR4KCJgpstyzTVXj+uyuzi23sV1SdUvO35r3VkZk11ad9Qmp9WLXpdSQfMAKbu/lC7C9HfrGuM=
cache:
  bundler: true
  directories:
    - /home/travis/.rvm/
install:
- gem install bundler
- bundle install
script:
- bundle exec rake deploy
after_success:
- bash &amp;lt;(curl -s https://codecov.io/bash)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;发现启用了 cache 之后，快很多了。搞到动图凑内容：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/cache_1581461859_5053.gif&quot; alt=&quot;cache_1581461859_5053&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用来测试构建时长，哈哈哈哈！&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Feb 2020 06:49:00 +0000</pubDate>
        <link>https://zwt.io/2020/02/12/intro-to-travis/</link>
        <guid isPermaLink="true">https://zwt.io/2020/02/12/intro-to-travis/</guid>
        
        <category>持续集成</category>
        
        
      </item>
    
      <item>
        <title>AsciiDoc语法参考</title>
        <description>&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;段落&quot;&gt;&lt;em&gt;段落&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph lead&quot;&gt;
&lt;p&gt;段落不需要特别的格式，&lt;strong&gt;直接&lt;/strong&gt;写就是了。
然后呢&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;自然段&quot;&gt;&lt;em&gt;自然段&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;这是普通段落&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;开始至少空一格就成为自然段，同一个自然段里面的内容必须相邻，
即不能隔空行。&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;隔空行就是另一个自然段了。自然段文字是等宽字体，然后会保留空格和新行。
例如    保留了前边的空格，
然后这样，保留了换新行。&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;现在这里又是一个普通段落了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;然后呢&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;杂记&quot;&gt;杂记&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;使用 Travis CI 也挺好玩的，搭建起持续集成的工作流。在这里也添加个动图吧：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;一个普通图：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/city.jpg&quot; alt=&quot;City&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;一个专用动图：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/cache_1581461859_5053.gif&quot; alt=&quot;travis 真香！&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;bold &lt;strong&gt;constrained&lt;/strong&gt; &amp;amp; &lt;strong&gt;un&lt;/strong&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;italic &lt;em&gt;constrained&lt;/em&gt; &amp;amp; &lt;em&gt;un&lt;/em&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;bold italic &lt;strong&gt;&lt;em&gt;constrained&lt;/em&gt;&lt;/strong&gt; &amp;amp; &lt;strong&gt;&lt;em&gt;un&lt;/em&gt;&lt;/strong&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;monospace &lt;code&gt;constrained&lt;/code&gt; &amp;amp; &lt;code&gt;un&lt;/code&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;monospace bold &lt;code&gt;&lt;strong&gt;constrained&lt;/strong&gt;&lt;/code&gt; &amp;amp; &lt;code&gt;&lt;strong&gt;un&lt;/strong&gt;&lt;/code&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;monospace italic &lt;code&gt;&lt;em&gt;constrained&lt;/em&gt;&lt;/code&gt; &amp;amp; &lt;code&gt;&lt;em&gt;un&lt;/em&gt;&lt;/code&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;monospace bold italic &lt;code&gt;&lt;strong&gt;&lt;em&gt;constrained&lt;/em&gt;&lt;/strong&gt;&lt;/code&gt; &amp;amp; &lt;code&gt;&lt;strong&gt;&lt;em&gt;un&lt;/em&gt;&lt;/strong&gt;&lt;/code&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;C&amp;#43;&amp;#43;&lt;/code&gt; is valid syntax in the programming language by the same name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;WHERE id &amp;lt;= 20 AND value = &quot;{name}&quot;&lt;/code&gt; is a SQL WHERE clause.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Hello {
  public static void main(String[] args) {
    System.out.println(&quot;Hello&quot;);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Werewolves are allergic to &lt;mark&gt;cassia cinnamon&lt;/mark&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Did the werewolves read the &lt;span class=&quot;small&quot;&gt;small print&lt;/span&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Where did all the &lt;span class=&quot;underline&quot;&gt;cores&lt;/span&gt; run off to?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We need &lt;span class=&quot;line-through&quot;&gt;ten&lt;/span&gt; make that twenty VMs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;big&quot;&gt;O&lt;/span&gt;nce upon an infinite loop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;sup&gt;super&lt;/sup&gt;script phrase&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;sub&gt;sub&lt;/sub&gt;script phrase&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8220;double curved quotes&amp;#8221;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8216;single curved quotes&amp;#8217;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Olaf&amp;#8217;s desk was a mess.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All of the werewolves&amp;#8217; desks were a mess.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Olaf had been with the company since the &amp;#8217;60s.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rubies are red,&lt;br&gt;
Topazes are blue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ruby is red.&lt;br&gt;
Java is black.&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lists&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Edgar Allen Poe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sheri S. Tepper&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bill Bryson&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;max nesting&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;level 1&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;level 2&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;level 3&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;level 4&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;level 5&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;level 1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ordered, basic&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Step 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 3&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ordered, max nesting&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;level 1&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;level 2&lt;/p&gt;
&lt;div class=&quot;olist lowerroman&quot;&gt;
&lt;ol class=&quot;lowerroman&quot; type=&quot;i&quot;&gt;
&lt;li&gt;
&lt;p&gt;level 3&lt;/p&gt;
&lt;div class=&quot;olist upperalpha&quot;&gt;
&lt;ol class=&quot;upperalpha&quot; type=&quot;A&quot;&gt;
&lt;li&gt;
&lt;p&gt;level 4&lt;/p&gt;
&lt;div class=&quot;olist upperroman&quot;&gt;
&lt;ol class=&quot;upperroman&quot; type=&quot;I&quot;&gt;
&lt;li&gt;
&lt;p&gt;level 5&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;level 1&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Checklist&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist checklist&quot;&gt;
&lt;ul class=&quot;checklist&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-check-square-o&quot;&gt;&lt;/i&gt; checked&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-check-square-o&quot;&gt;&lt;/i&gt; also checked&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-square-o&quot;&gt;&lt;/i&gt; not checked&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;normal list item&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Description, single-line&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;first term&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;definition of first term&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;second term&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;definition of second term&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Description, multi-line&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;first term&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;definition of first term&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;second term&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;definition of second term&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Q &amp;amp; A&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;qlist qanda&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;What is Asciidoctor?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;An implementation of the AsciiDoc processor in Ruby.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;What is the answer to the Ultimate Question?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;42&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Complex content in outline lists&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Every list item has at least one paragraph of content,
which may be wrapped, even using a hanging indent.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additional paragraphs or blocks are adjoined by putting
a list continuation on a line adjacent to both blocks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;list continuation&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;a plus sign (&lt;code&gt;&amp;#43;&lt;/code&gt;) on a line by itself&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A literal paragraph does not require a list continuation.&lt;/p&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ gem install asciidoctor&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AsciiDoc lists may contain any complex content.&lt;/p&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Application&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Language&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;AsciiDoc&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Python&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Asciidoctor&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ruby&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;超链接&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://asciidoctor.org&quot; class=&quot;bare&quot;&gt;https://asciidoctor.org&lt;/a&gt; - automatic!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://asciidoctor.org&quot;&gt;Asciidoctor&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/asciidoctor&quot;&gt;Asciidoctor @ &lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://discuss.asciidoctor.org&quot; class=&quot;external&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Discuss Asciidoctor&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://discuss.asciidoctor.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Discuss Asciidoctor&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://example.org&quot; class=&quot;teal&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google, Yahoo, Bing&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See &lt;a href=&quot;#自然段&quot;&gt;&lt;em&gt;自然段&lt;/em&gt;&lt;/a&gt; to learn how to write paragraphs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Learn how to organize the document into &lt;a href=&quot;#section-titles&quot;&gt;sections&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;图片&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://asciidoctor.org/images/octocat.jpg&quot; alt=&quot;GitHub mascot&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;UI Macro&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Shortcut&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;kbd&gt;F11&lt;/kbd&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Toggle fullscreen&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;T&lt;/kbd&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Open a new tab&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;N&lt;/kbd&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;New incognito window&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;kbd&gt;\&lt;/kbd&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Used to escape characters&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;]&lt;/kbd&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Jump to keyword&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;+&lt;/kbd&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Increase zoom&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Content in a passthrough block is passed to the output unprocessed.
That means you can include raw HTML, like this embedded Gist:
&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mojavelinux/5333524.js&quot;&gt;
&lt;/script&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Four score and seven years ago our fathers brought forth
on this continent a new nation&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Abraham Lincoln&lt;br&gt;
&lt;cite&gt;Address delivered at the dedication of the Cemetery at Gettysburg&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
A person who never made a mistake never tried anything new.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Albert Einstein
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A person who never made a mistake never tried anything new.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you don&amp;#8217;t know where you are going, any road will get you there.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Charles Lutwidge Dodgson&lt;br&gt;
&lt;cite&gt;Mathematician and author, also known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Lewis_Carroll&quot;&gt;Lewis Carroll&lt;/a&gt;&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;AsciiDoc history&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;AsciiDoc was first released in Nov 2002 by Stuart Rackham.
It was designed from the start to be a shorthand syntax
for producing professional documents like DocBook and LaTeX.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Example 1. Sample document&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a sample AsciiDoc document:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;= Title of Document
Doc Writer
:toc:

This guide provides...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The document header is useful, but not required.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An admonition block may contain complex content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;A list&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;one&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;two&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;three&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another paragraph.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;line of code  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
line of code  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
line of code  &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
line of code  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A callout behind a line comment for C-style languages.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A callout behind a line comment for Ruby, Python, Perl, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A callout behind a line comment for Clojure.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A callout behind a line comment for XML or SGML languages like HTML.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;section&amp;gt;
  &amp;lt;title&amp;gt;Section Title&amp;lt;/title&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&amp;lt;/section&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The section title is required.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;插入视频&quot;&gt;插入视频&lt;/h4&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://player.vimeo.com/video/67480300&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Table Title&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Name of Column 1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Name of Column 2&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Name of Column 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cell in column 1, row 1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cell in column 2, row 1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cell in column 3, row 1&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cell in column 1, row 2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cell in column 2, row 2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cell in column 3, row 2&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Artist&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Track&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Genre&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Baauer&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Harlem Shake&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Hip Hop&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;The Lumineers&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ho Hey&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Folk Rock&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Artist&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Track&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Genre&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Baauer&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Harlem Shake&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Hip Hop&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width: 25%;&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;1&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;5&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;6&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-bottom&quot; rowspan=&quot;3&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;7&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;8&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;9&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;10&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To save the file, select &lt;span class=&quot;menuseq&quot;&gt;&lt;b class=&quot;menu&quot;&gt;File&lt;/b&gt;&amp;#160;&lt;i class=&quot;fa fa-angle-right caret&quot;&gt;&lt;/i&gt; &lt;b class=&quot;menuitem&quot;&gt;Save&lt;/b&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select &lt;span class=&quot;menuseq&quot;&gt;&lt;b class=&quot;menu&quot;&gt;View&lt;/b&gt;&amp;#160;&lt;i class=&quot;fa fa-angle-right caret&quot;&gt;&lt;/i&gt; &lt;b class=&quot;submenu&quot;&gt;Zoom&lt;/b&gt;&amp;#160;&lt;i class=&quot;fa fa-angle-right caret&quot;&gt;&lt;/i&gt; &lt;b class=&quot;menuitem&quot;&gt;Reset&lt;/b&gt;&lt;/span&gt; to reset the zoom level to the default setting.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Wed, 12 Feb 2020 05:26:00 +0000</pubDate>
        <link>https://zwt.io/2020/02/12/hello-asciidoctor/</link>
        <guid isPermaLink="true">https://zwt.io/2020/02/12/hello-asciidoctor/</guid>
        
        <category>Asciidoc</category>
        
        <category>Notes</category>
        
        
      </item>
    
      <item>
        <title>Java 内部类</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;在这一篇文章，你将会学习到：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;内部类是什么&lt;/li&gt;
    &lt;li&gt;如何声明内部类&lt;/li&gt;
    &lt;li&gt;如何声明成员、局部，以及匿名内部类&lt;/li&gt;
    &lt;li&gt;如何创建内部类的对象&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;什么是内部类&quot;&gt;什么是内部类？&lt;/h3&gt;

&lt;p&gt;我们知道类（class）是包（package）的成员（member）。即顶层类，直接放在包下面的类。例如以下这段代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// TopLevel.java
package io.zwt.innerclasses;

public class TopLevel {
    private int value = 101;
    
    public int getValue() {
        return value;
    }
    
    public void setValue(int value) {
        this.value = value;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的 &lt;code&gt;TopLevel&lt;/code&gt; 类是 &lt;code&gt;io.zwt.innerclasses&lt;/code&gt; 包的成员。 这个里有三个成员：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一个实例变量（instance variable）：&lt;code&gt;value&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;两个方法（method）：&lt;code&gt;getValue()&lt;/code&gt; and &lt;code&gt;setValue()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个类也可以声明在另一个类里面。这种类称为&lt;em&gt;内部类&lt;/em&gt;。如果定义在另一个类中的类显式或隐式被声明为static，则它被称为嵌套类，而不是内部类。包含内部类的类称为&lt;em&gt;外层类&lt;/em&gt;或&lt;em&gt;外部类&lt;/em&gt;。看一下下面的 &lt;code&gt;Outer&lt;/code&gt; 和 &lt;code&gt;Inner&lt;/code&gt; 类声明：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// Outer.java
pakcage io.zwt.innerclasses;

public class Outer {
	public class Inner {
		// 内部类的成员在这里
	}
	// 外部类的其它成员在这里
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An instance of an inner class can only exist within an instance of its enclosing class. That is, you must have an instance of the enclosing class before you can create an instance of an inner class. This is useful in enforcing the rule that one object cannot exist without the other.&lt;/p&gt;

&lt;p&gt;An inner class has full access to all the members, including private members, of its enclosing class.&lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;使用内部类的好处&quot;&gt;使用内部类的好处&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;They let you define classes near other classes that will use them. For example, a computer will use a processor, so it is better to define a &lt;code&gt;Processor&lt;/code&gt; class as an inner class of the &lt;code&gt;Computer&lt;/code&gt; class.&lt;/li&gt;
  &lt;li&gt;They provide an additional namespace to manage class structures. For example, before the introduction of inner classes, a class can only be a member of a package. With the introduction of inner classes, top-level classes, which can contain inner classes, provide an additional namespace.&lt;/li&gt;
  &lt;li&gt;Some design patterns are easier to implement using inner classes. For example, the adapter pattern, enumeration pattern, and state pattern can be easily implemented using inner classes.&lt;/li&gt;
  &lt;li&gt;Implementing a callback mechanism is elegant and convenient using inner classes. Lambda expressions in Java 8 offer a better and more concise way of implementing callbacks in Java.&lt;/li&gt;
  &lt;li&gt;It helps implement closures in Java.&lt;/li&gt;
  &lt;li&gt;You can have a flavor of multiple inheritance of classes using inner classes. An inner class can inherit another class. Thus, the inner class has access to its enclosing class members as well as members of its superclass. Note that accessing members of two or more classes is one of the aims of multiple inheritance, which can be achieved using inner classes. However, just having access to members of two classes is not multiple inheritance in a true sense.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;内部类的种类&quot;&gt;内部类的种类&lt;/h3&gt;

&lt;p&gt;You can define an inner class anywhere inside a class where you can write a Java statement. There are three types of inner classes. The type of an inner class depends on the location of its declaration and the way it is declared.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;成员内部类&lt;/li&gt;
  &lt;li&gt;局部内部类&lt;/li&gt;
  &lt;li&gt;匿名内部类&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;成员内部类&quot;&gt;成员内部类&lt;/h4&gt;

&lt;p&gt;A member inner class is declared inside a class the same way a member field or a member method for the class is declared. It can be declared as &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or package-level. The instance of a member inner class may exist only within the instance of its enclosing class.&lt;/p&gt;

&lt;h4 id=&quot;局部内部类&quot;&gt;局部内部类&lt;/h4&gt;

&lt;p&gt;A local inner class is declared inside a block. Its scope is limited to the block in which it is declared. Since it’s scope is always limited to its enclosing block, its declaration cannot use any access modifiers such as &lt;code&gt;public&lt;/code&gt;,   &lt;code&gt;private&lt;/code&gt;, or &lt;code&gt;protected&lt;/code&gt;. Typically, a local inner class is defined inside a method. However, it can also be defined in side static initializers, non-static initializers, and constructors. You would use a local inner class when you need to use the class only inside a block.&lt;/p&gt;

&lt;p&gt;​	To use a local inner class outside its enclosing block, the local inner class must do one or both of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Implement a public interface&lt;/li&gt;
  &lt;li&gt;Inherit from another public class and override some of its superclass methods&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;匿名内部类&quot;&gt;匿名内部类&lt;/h4&gt;

&lt;p&gt;An anonymous inner class is the same as a local inner class with one difference: it does not have a name. Since it does not have a name, it cannot have a constructor.&lt;/p&gt;

&lt;h3 id=&quot;静态成员类不是内部类&quot;&gt;静态成员类不是内部类&lt;/h3&gt;

&lt;p&gt;A member class defined within the body of another class may be declared &lt;code&gt;static&lt;/code&gt;. The following snippet of code declares a top-level class &lt;code&gt;A&lt;/code&gt; and a static member class &lt;code&gt;B&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package io.zwt.innnerclasses;
public class A {
	// A static member class
	public static class B {
		// The body of class B goes here
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;​	A static member class is not an inner class. It is considered a top-level class. It is also called a nested top-level class. Since it is a top-level class, you do not need an instance of its enclosing class to create its object. An instance of class A and an instance of class B can exist independently because both are top-level classes. A static member class can be declared &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, package-level, or &lt;code&gt;private&lt;/code&gt; to restrict its accessibility outside its enclosing class.&lt;/p&gt;

&lt;h3 id=&quot;创建内部类对象&quot;&gt;创建内部类对象&lt;/h3&gt;

&lt;p&gt;Creating objects of a local inner class, an anonymous class, and a static member class is straightforward. Objects of a local inner class are created using the new operator inside the block, which declares the class. An object of an anonymous class is created at the same time the class is declared. A static member class is another type of top-level class. You create objects of a static member class the same way you create objects of a top-level class.&lt;/p&gt;

&lt;p&gt;Note that to have an object of a member inner class, a local inner class, and an anonymous class, you must have an object of the enclosing class. In the previous examples of local inner classes and anonymous inner classes, you placed these classes inside instance methods. You had an instance of the enclosing class on which you called those instance methods. Therefore, instances of those local inner classes and anonymous inner classes had the instance of their enclosing classes on which those methods were called. For example, in Listing 2-5, first you created an instance of &lt;code&gt;TitleList&lt;/code&gt; class and you stored its reference in t1 as shown:&lt;/p&gt;

&lt;h3 id=&quot;访问外层类的成员&quot;&gt;访问外层类的成员&lt;/h3&gt;

&lt;h3 id=&quot;局部变量访问的限制&quot;&gt;局部变量访问的限制&lt;/h3&gt;

&lt;p&gt;A local inner class is declared inside a block—typically inside a method of a class. A local inner class can access the instance variables of its enclosing class as well as the local variables, which are in scope. The instance of an inner class exists within an instance of its enclosing class. Therefore, accessing the instance variables of the enclosing class inside a local inner class is not a problem because they exist throughout the lifecycle of the instance of the local inner class. However, the local variables in a method exist only during the execution of that method. All local variables become inaccessible when method execution is over. Java makes a copy of the local variables that are used inside a local inner class and stores that copy along with the inner class object. However, to guarantee that the values of the local variables can be reproduced when accessed inside the local inner class code after the method call is over, Java puts a restriction that the local variables must be effectively final. An effectively final variable is a variable whose value does not change after it is initialized. One way to have an effectively final variable is to declare the variable final. Another way is not to change its value after it is initialized. Therefore, a local variable or an argument to a method must be effectively final if it is used inside a local inner class. This restriction also applies to an anonymous inner class declared inside a method.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt; 在 Java 8 以前，如果一个局部变量是被局部内部类，或者匿名内部类访问的，它必须被声明为 &lt;code&gt;final&lt;/code&gt;。 Java 8 更改了这个规则：局部变量不需要被声明为 &lt;code&gt;final&lt;/code&gt;， 但它应该是 effectively final 的。 什么意思呢？就是说，在变量声明前面添加个 &lt;code&gt;final&lt;/code&gt; 修饰符，仍然能够通过编译，相当于 &lt;code&gt;final&lt;/code&gt;，就是所谓的 “effective final” ，就等效于 &lt;code&gt;final&lt;/code&gt; 嘛。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;内部类与继承&quot;&gt;内部类与继承&lt;/h3&gt;

&lt;p&gt;An inner class can inherit from another inner class, a top-level class, or its enclosing class. For example, in the following snippet of code, inner class C inherits from inner class B; inner class D inherits from its enclosing top-level class A, and inner class F inherits from inner class A.B:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class A {
    public class B {
    }
    public class C extends B {
    }
    public class D extends A {
    }
}

public class E extends A {
    public class F extends B {
        
    }
}

public class G extends A.B {
    // This code won't compile
    // 这段代码不能通过编译！
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;内部类中不能有静态成员除非是编译时常量&quot;&gt;内部类中不能有静态成员（除非是编译时常量）&lt;/h3&gt;

&lt;p&gt;Java 里面的 &lt;code&gt;static&lt;/code&gt; 关键字使得一个结构变成顶层结构。因此，你不能在一个内部类里边定义任何静态成员（字段、方法或者是初始化语句块）。以下代码不能通过编译，因为内部类 &lt;code&gt;B&lt;/code&gt; 声明了一个静态字段 &lt;code&gt;DAYS_IN_A_WEEK&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class A {
    public class B {
        // Cannot have the following declaration
        public static int DAYS_IN_A_WEEK = 7; // A compile-time error
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然而，内部类里面可以有性质为编译时常量的静态字段。什么意思？请看以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class A {
    public class B {
        // Can have a compile-time static constant field
        public final static int DAYS_IN_A_WEEK = 7; // OK
        // a compile-time constant, even though it is final
        // 上面一句不对，str 不能用 new String(&quot;Hello&quot;);
        // 差点被坑了🕳
        public final static String str = new String(&quot;Hello&quot;);
		// 可以用 public final static String str = &quot;Hello&quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;内部类和编译器的魔法&quot;&gt;内部类和编译器的魔法&lt;/h3&gt;

&lt;h3 id=&quot;闭包与回调&quot;&gt;闭包与回调&lt;/h3&gt;

&lt;p&gt;In functional programming, a higher order function is an anonymous function that can be treated as a data object. That is, it can be stored in a variable and passed around from one context to another.  It might be invoked in a context that did not necessarily define it. Note that a higher order function is an anonymous function, so the invoking context does not have to know its name. A closure is a higher order function packaged with its defining environment. A closure carries with it the variables in scope when it was defined, and it can access those variables even when it is invoked in a context other than the context in which it was defined.&lt;/p&gt;

&lt;h3 id=&quot;在静态上下文定义内部类&quot;&gt;在静态上下文定义内部类&lt;/h3&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
</description>
        <pubDate>Tue, 04 Feb 2020 22:34:00 +0000</pubDate>
        <link>https://zwt.io/2020/02/04/inner-class/</link>
        <guid isPermaLink="true">https://zwt.io/2020/02/04/inner-class/</guid>
        
        <category>Java</category>
        
        <category>语言特性</category>
        
        
      </item>
    
      <item>
        <title>深入生成器设计模式</title>
        <description>&lt;h3 id=&quot;gof-定义&quot;&gt;GoF 定义&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Separate the construction of a complex object from its representation so that the same construction processes can create different representations.&lt;/p&gt;

  &lt;p&gt;将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同表示。（中文版书里的翻译）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Builder 在《设计模式》的中文版里边翻译为“生成器”，那我就按这个译法吧。生成器模式属于创建型模式（Creational patterns），它关注如何创建对象。当需要构建的对象比较复杂，由多个部分组成，也就说它的构造方法会有很多参数，就可以考虑使用这种模式。生成器模式认为对象的构建机制应该独立于它的组成部分（也就是属性），对象的&lt;strong&gt;构建过程&lt;/strong&gt;不关注对象的&lt;strong&gt;组成部分&lt;/strong&gt;。所以同一个构建过程可以构建出不同表示（属性）的对象（通过&lt;strong&gt;改变构建步骤&lt;/strong&gt;）。&lt;!--more--&gt;在 GoF 书中的生成器模式 UML 类图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/builder-pattern.png&quot; alt=&quot;Builder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图中，Product 是所要创建的复杂对象，ConcreteBuilder 类表示具体的生成器，它实现了 Builder 接口，负责组装构成最终对象的各部分。ConcreteBuilder 定义了&lt;strong&gt;构建过程&lt;/strong&gt;和&lt;strong&gt;对象组装机制&lt;/strong&gt;，就是如何用各部分、按照怎样的步骤去构造一个 Product 对象。ConcreteBuilder 还定义了 getResult() 方法，用于返回构建好的 Product 对象。然后 Director 则是负责通过使用 Builder 接口去构建最终所需的 Product 对象，就是做指挥的。&lt;/p&gt;

&lt;p&gt;以上是对经典的 GoF 生成器模式的解读，下面结合具体的例子加深理解。&lt;/p&gt;

&lt;h3 id=&quot;具体简单例子&quot;&gt;具体简单例子&lt;/h3&gt;

&lt;p&gt;在这个例子里会有这些参与者：Builder, Car, MotorCycle, Product, 以及 Director。其中，Car, MotorCycle 是实现了 Builder 接口的具体类。Builder 用于构建 Product 对象的各部分，Product 则是要被创建的复杂对象（小车或摩托车）。因为 Car 和 MotorCycle 都实现了 Builder 接口，所以需要实现接口中的方法，即 &lt;code&gt;startUpOperations()&lt;/code&gt;, &lt;code&gt;buildBody()&lt;/code&gt;, &lt;code&gt;insertWheels()&lt;/code&gt;, &lt;code&gt;addHeadLights()&lt;/code&gt;, &lt;code&gt;endOperations()&lt;/code&gt;, 和 &lt;code&gt;getVehicle()&lt;/code&gt; 方法。前五个方法好理解，对应载具的构建过程，开始，构建车身，装轮子，装头灯，收尾。而 &lt;code&gt;getVehicle()&lt;/code&gt; 方法，就是返回已构建好的载具。 然后还有 Director，它调用同一个 &lt;code&gt;construct()&lt;/code&gt; 方法去构建不同类型的载具。这个具体例子的类图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/builder-pattern-vehicles.png&quot; alt=&quot;builder-pattern-vehicles&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;代码实现&quot;&gt;代码实现&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package jdp2e.builder.demo;

import java.util.LinkedList;

//The common interface
// 公共接口
interface Builder {
	void startUpOperations();

	void buildBody();

	void insertWheels();

	void addHeadlights();

	void endOperations();

	/* The following method is used to retrieve the object that is constructed. */
	Product getVehicle();
}

//Car class
class Car implements Builder {
	private String brandName;
	private Product product;

	public Car(String brand) {
		product = new Product();
		this.brandName = brand;
	}

	public void startUpOperations() {
		// Starting with brand name
		product.add(String.format(&quot;Car model is :%s&quot;, this.brandName));
	}

	public void buildBody() {
		product.add(&quot;This is a body of a Car&quot;);
	}

	public void insertWheels() {
		product.add(&quot;4 wheels are added&quot;);
	}

	public void addHeadlights() {
		product.add(&quot;2 Headlights are added&quot;);
	}

	public void endOperations() { // Nothing in this case
	}

	public Product getVehicle() {
		return product;
	}
}

//Motorcycle class
class MotorCycle implements Builder {
	private String brandName;
	private Product product;

	public MotorCycle(String brand) {
		product = new Product();
		this.brandName = brand;
	}

	public void startUpOperations() { // Nothing in this case
	}

	public void buildBody() {
		product.add(&quot;This is a body of a Motorcycle&quot;);
	}

	public void insertWheels() {
		product.add(&quot;2 wheels are added&quot;);
	}

	public void addHeadlights() {
		product.add(&quot;1 Headlights are added&quot;);
	}

	public void endOperations() {
		// Finishing up with brand name
		product.add(String.format(&quot;Motorcycle model is :%s&quot;, this.brandName));
	}

	public Product getVehicle() {
		return product;
	}
}

// Product class 
class Product {
	/*
	 * You can use any data structure that you prefer. I have used
	 * LinkedList&amp;lt;String&amp;gt; in this case.
	 */
	private LinkedList&amp;lt;String&amp;gt; parts;

	public Product() {
		parts = new LinkedList&amp;lt;String&amp;gt;();
	}

	public void add(String part) {
		// Adding parts
		parts.addLast(part);
	}

	public void showProduct() {
		System.out.println(&quot;\nProduct completed as below :&quot;);
		for (String part : parts)
			System.out.println(part);
	}
}

// Director class 
class Director {
	Builder builder;

	// Director knows how to use the builder and the sequence of steps.
	public void construct(Builder builder) {
		this.builder = builder;
		builder.startUpOperations();
		builder.buildBody();
		builder.insertWheels();
		builder.addHeadlights();
		builder.endOperations();
	}
}

public class BuilderPatternExample {

	public static void main(String[] args) {
		System.out.println(&quot;***Builder Pattern Demo***&quot;);
		Director director = new Director();

		Builder fordCar = new Car(&quot;Ford&quot;);
		Builder hondaMotorycle = new MotorCycle(&quot;Honda&quot;);

		// Making Car
		director.construct(fordCar);
		Product p1 = fordCar.getVehicle();
		p1.showProduct();

		// Making MotorCycle
		director.construct(hondaMotorycle);
		Product p2 = hondaMotorycle.getVehicle();
		p2.showProduct();
	}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;输出结果：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;***Builder Pattern Demo***

Product completed as below :
Car model is :Ford
This is a body of a Car
4 wheels are added
2 Headlights are added

Product completed as below :
This is a body of a Motorcycle
2 wheels are added
1 Headlights are added
Motorcycle model is :Honda
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;q--a&quot;&gt;Q &amp;amp; A&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;使用生成器模式有什么好处?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;你可以用生成器模式逐步构建复杂对象，并且可以改变构建步骤。通过隐藏构建复杂对象的细节（构建每部分的细节），加强了封装性。 Director 可以从 Builder 获取最终构建完成的 Product，在表面看了就好像只有一个方法（construct()）用于构建最终产品，其他的内部方法只是涉及构建具体的部分。&lt;/li&gt;
      &lt;li&gt;使用这种模式，同样的构建过程，可以产生不同的产品。&lt;/li&gt;
      &lt;li&gt;因为你可以改变构造步骤，所以你可以改变产品的内部表示。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;生成器模式的坏处？&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;不适用于处理可变对象（mutable object），即创建后可被修改的对象。&lt;/li&gt;
      &lt;li&gt;可能需要写些重复代码，例如不同的具体生成器有些代码类似或重复，某些情况下可能会有不好的影响，并可能成为&lt;em&gt;&lt;a href=&quot;https://blog.csdn.net/jiangpingjiangping/article/details/78067595&quot;&gt;反模式&lt;/a&gt;&lt;/em&gt;。&lt;/li&gt;
      &lt;li&gt;一个具体的生成器专用于产生某类产品，所以要生产另一类产品，就需要编写一个用于该类产品的具体生成器。&lt;/li&gt;
      &lt;li&gt;生成器模式只有在构建比较复杂的对象时用才有优势。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在上面例子中我可以使用抽象类而不是接口吗？&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;可以的。你可以使用抽象类，而不是用接口。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如何确定应该使用抽象类还是接口？&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;如果你想要一些集中的或是默认的行为，那么抽象类是更好的选择，因为这种情况下你可以提供一些默认的实现。另一方面，使用接口则需要从零开始实现，接口定义了某些规则/契约，强调应该做什么，但不强调怎么做。还有就是如果要考虑实现多继承，接口就更合适。 如果你要给接口添加一个新的方法，那么这个接口的所有实现都需要实现这个新方法，有点麻烦。但如果在抽象类中添加一个新方法，并有默认实现，那么旧代码不受影响。在 Java 8 引入了 &lt;code&gt;default&lt;/code&gt; 关键字在接口的用法，可以在接口里提供默认方法。&lt;/li&gt;
      &lt;li&gt;下面是抽象类更适用的场景：
        &lt;ul&gt;
          &lt;li&gt;想要在多个联系紧密的类之间共享代码&lt;/li&gt;
          &lt;li&gt;被继承的抽象类有很多公共方法或字段，或者它们当中需要非公有访问修饰符。&lt;/li&gt;
          &lt;li&gt;你想使用非静态或非 &lt;code&gt;final&lt;/code&gt; 字段，这样可以修改其所属对象的状态。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;接下来是使用接口更合适的场景：
        &lt;ul&gt;
          &lt;li&gt;希望一些不相关的类实现你的接口。&lt;/li&gt;
          &lt;li&gt;指定某种数据类型的行为，但是不关心如何实现。&lt;/li&gt;
          &lt;li&gt;想要适用多继承。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;上面例子中，在 Car 里，brand name 在第一步添加了，而在 MotorCycle 里， brand name 在最后一步添加，这是故意的吗？&lt;/p&gt;

    &lt;p&gt;是的。这是为了说明，每种具体生成器可以自由决定如何产生最终产品。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为什么使用单独一个类作为 Director？应该可以使用客户端代码（client code）充当 Director 的角色啊。&lt;/p&gt;

    &lt;p&gt;这方面没有限制。上面的代码例子，将 Director 角色与客户端代码分离，但是接下来的例子会直接适用客户端代码做 Director。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;客户端代码（client code）是什么意思？&lt;/p&gt;

    &lt;p&gt;包含 main() 方法的类就是客户端代码（client code）。在 &lt;em&gt;Effective Java&lt;/em&gt; 一书的第 4 页，有三段话讲了术语 &lt;em&gt;exported API&lt;/em&gt; 以及 a &lt;em&gt;client&lt;/em&gt; of the API. 引用如下：&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;This book uses a few technical terms that are not defined in &lt;em&gt;The Java Language Specification&lt;/em&gt;. The term &lt;em&gt;exported API&lt;/em&gt;, or simply &lt;em&gt;API&lt;/em&gt;, refers to the classes, interfaces, constructors, members, and serialized forms by which a programmer accesses a class, interface, or package. (The term &lt;em&gt;API&lt;/em&gt;, which is short for &lt;em&gt;application programming interface&lt;/em&gt;, is used in preference to the otherwise preferable term &lt;em&gt;interface&lt;/em&gt; to avoid confusion with the language construct of that name.) A programmer who writes a program that uses an API is referred to as a &lt;em&gt;user&lt;/em&gt; of the API. A class whose implementation uses an API is a &lt;em&gt;client&lt;/em&gt; of the API.&lt;/p&gt;

      &lt;p&gt;Classes, interfaces, constructors, members, and serialized forms are collectively known as &lt;em&gt;API elements&lt;/em&gt;. An exported API consists of the API elements that are accessible outside of the package that defines the API. These are the API elements that any client can use and the author of the API commits to support. Not coincidentally, they are also the elements for which the Javadoc utility generates documentation in its default mode of operation. Loosely speaking, the exported API of a package consists of the public and protected members and constructors of every public class or interface in the package.&lt;/p&gt;

      &lt;p&gt;In Java 9, a &lt;em&gt;module system&lt;/em&gt; was added to the platform. If a library makes use of the module system, its exported API is the union of the exported APIs of all the packages exported by the library’s module declaration.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;前面提到改变构建步骤。能否演示一下通过改变构建步骤产生不同的最终产品？&lt;/p&gt;

    &lt;p&gt;下面的例子给出演示。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;改进版例子&quot;&gt;改进版例子&lt;/h3&gt;

&lt;p&gt;改进版例子做了如下修改：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这次只关注 Car 作为最终产品。&lt;/li&gt;
  &lt;li&gt;定制 Car 的构建步骤包含这些：
    &lt;ul&gt;
      &lt;li&gt;开始的消息（startUpMessage)。&lt;/li&gt;
      &lt;li&gt;处理结束消息（endOperationsMessage）&lt;/li&gt;
      &lt;li&gt;确定车身材料（bodyType）&lt;/li&gt;
      &lt;li&gt;车轮数量（noOfWheels）&lt;/li&gt;
      &lt;li&gt;车头灯数量（noOfHeadLights）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;客户端代码同时充当了 Director 的角色。&lt;/li&gt;
  &lt;li&gt;生成器的接口被重命名为 ModifiedBuilder， 除 constructCar() 和 getConstructedCar() 方法外，接口中的其他方法的返回类型都是 ModifiedBuilder，这样可以实现方法链（method chaining）。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;代码实现-1&quot;&gt;代码实现&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package jdp2e.builder.demo;

//The common interface
interface ModifiedBuilder {
	/*
	 * All these methods return type is ModifiedBuilder. This will help us to apply
	 * method chaining
	 */
	ModifiedBuilder startUpOperations(String startUpMessage);

	ModifiedBuilder buildBody(String bodyType);

	ModifiedBuilder insertWheels(int noOfWheels);

	ModifiedBuilder addHeadlights(int noOfHeadLights);

	ModifiedBuilder endOperations(String endOperationsMessage);

	/* Combine the parts and make the final product. */
	ProductClass constructCar();

	// Optional method:To get the already constructed object
	ProductClass getConstructedCar();
}

//Car class
class CarBuilder implements ModifiedBuilder {
	private String startUpMessage = &quot;Start building the product&quot;;// Default start-up message
	private String bodyType = &quot;Steel&quot;;// Default body
	private int noOfWheels = 4;// Default number of wheels
	private int noOfHeadLights = 2;// Default number of head lights
	private String endOperationsMessage = &quot;Product creation completed&quot;;// Default finish up message
	ProductClass product;

	@Override
	public ModifiedBuilder startUpOperations(String startUpMessage) {
		this.startUpMessage = startUpMessage;
		return this;
	}

	@Override
	public ModifiedBuilder buildBody(String bodyType) {
		this.bodyType = bodyType;
		return this;
	}

	@Override
	public ModifiedBuilder insertWheels(int noOfWheels) {
		this.noOfWheels = noOfWheels;
		return this;
	}

	@Override
	public ModifiedBuilder addHeadlights(int noOfHeadLights) {
		this.noOfHeadLights = noOfHeadLights;
		return this;
	}

	@Override
	public ModifiedBuilder endOperations(String endOperationsMessage) {
		this.endOperationsMessage = endOperationsMessage;
		return this;
	}

	@Override
	public ProductClass constructCar() {

		product = new ProductClass(this.startUpMessage, this.bodyType, this.noOfWheels, this.noOfHeadLights,
				this.endOperationsMessage);
		return product;
	}

	@Override
	public ProductClass getConstructedCar() {
		return product;
	}
}

//Product class 
final class ProductClass {
	private String startUpMessage;
	private String bodyType;
	private int noOfWheels;
	private int noOfHeadLights;
	private String endOperationsMessage;

	public ProductClass(final String startUpMessage, String bodyType, int noOfWheels, int noOfHeadLights,
			String endOperationsMessage) {
		this.startUpMessage = startUpMessage;
		this.bodyType = bodyType;
		this.noOfWheels = noOfWheels;
		this.noOfHeadLights = noOfHeadLights;
		this.endOperationsMessage = endOperationsMessage;
	}

	/*
	 * There is no setter methods used here to promote immutability. Since the
	 * attributes are private and there is no setter methods, the keyword &quot;final&quot; is
	 * not needed to attach with the attributes.
	 */
	@Override
	public String toString() {
		return &quot;Product Completed as:\n startUpMessage=&quot; + 
            startUpMessage + &quot;\n bodyType=&quot; + 
            bodyType + &quot;\n noOfWheels=&quot; + 
            noOfWheels + &quot;\n noOfHeadLights=&quot; + 
            noOfHeadLights + &quot;\n endOperationsMessage=&quot; + 
            endOperationsMessage;
	}

}

//Director class 
public class BuilderPatternModifiedExample {

	public static void main(String[] args) {
		System.out.println(&quot;***Modified Builder Pattern Demo***&quot;);
		/*
		 * Making a custom car (through builder) Note the steps: 
		 * Step1:Get a builder object with required parameters 
		 * Step2:Setter like methods are used.They will set the optional fields also. 
		 * Step3:Invoke the constructCar() method to get the final car.
		 */
		final ProductClass customCar1 = new CarBuilder()
            .addHeadlights(5)
            .insertWheels(5)
            .buildBody(&quot;Plastic&quot;)
			.constructCar();
		System.out.println(customCar1);
		System.out.println(&quot;--------------&quot;);
		/*
		 * Making another custom car (through builder) with a different sequence and
		 * steps.
		 */
		ModifiedBuilder carBuilder2 = new CarBuilder();
		final ProductClass customCar2 = carBuilder2
            .insertWheels(7)
            .addHeadlights(6)
            .startUpOperations(&quot;I am making my own car&quot;)
            .constructCar();
		System.out.println(customCar2);
		System.out.println(&quot;--------------&quot;);

		/*
		 * customCar2 = carBuilder2.insertWheels(70)//error because customCar2 is final
		 * .addHeadlights(6) .startUpOperations(&quot;I am making my own car&quot;)
		 * .constructCar(); System.out.println(customCar2);
		 */
		
		// Verifying the getConstructedCar() method
		final ProductClass customCar3 = carBuilder2.getConstructedCar();
		System.out.println(customCar3);

	}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;输出结果：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;***Modified Builder Pattern Demo***
Product Completed as:
startUpMessage=Start building the product
bodyType=Plastic
noOfWheels=5
noOfHeadLights=5
endOperationsMessage=Product creation completed
--------------
Product Completed as:
startUpMessage=I am making my own car
bodyType=Steel
noOfWheels=7
noOfHeadLights=6
endOperationsMessage=Product creation completed
--------------
Product Completed as:
startUpMessage=I am making my own car
bodyType=Steel
noOfWheels=7
noOfHeadLights=6
endOperationsMessage=Product creation completed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在改进版例子中，第 124 行，构建 &lt;code&gt;customCar1&lt;/code&gt;，逐步调用了 &lt;code&gt;addHeadLights()&lt;/code&gt;, &lt;code&gt;insertWheels()&lt;/code&gt;, &lt;code&gt;buildBody()&lt;/code&gt; 方法。 然后当构建 &lt;code&gt;customCar2&lt;/code&gt; 时，方法的调用顺序不同了，而没调用的方法，会取默认值。&lt;/p&gt;

&lt;h3 id=&quot;q--a-1&quot;&gt;Q &amp;amp; A&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;改进版例子中客户端代码用到 &lt;code&gt;final&lt;/code&gt; 关键字，但是 &lt;code&gt;ProductClass&lt;/code&gt; 的属性却没有用 &lt;code&gt;final&lt;/code&gt; 关键字，为什么？&lt;/p&gt;

    &lt;p&gt;在客户端代码使用 &lt;code&gt;final&lt;/code&gt; 关键字是为了提高不可修改性（immutability），但是在 &lt;code&gt;ProductClass&lt;/code&gt; 属性已经是私有且那个类没有 setter 方法，所以已经是不可修改了，不需要使用 &lt;code&gt;final&lt;/code&gt; 关键字。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不可修改的对象有什么好处？&lt;/p&gt;

    &lt;p&gt;这样的对象一旦构建完成，就可以安全地共享，更重要的是它们是线程安全的（thread-safe），所以在多线程环境中省去了很多同步操作。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;何时应该考虑使用生成器模式？&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;[Gamma95] Gamma, Erich, Richard Helm, Ralph Johnson, and John Vlissides. 1995. &lt;em&gt;Design Patterns: Elements of Reusable Object-Oriented Software.&lt;/em&gt; Reading, MA: Addison-Wesley. ISBN: 0201633612&lt;/li&gt;
  &lt;li&gt;Sarcar, Vaskaran. &lt;em&gt;Design Patterns in Java, Second Edition.&lt;/em&gt; Apress, 2019&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://springframework.guru/gang-of-four-design-patterns/builder-pattern/&quot;&gt;Springframework guru: Builder Pattern&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Joshua Block. &lt;em&gt;Effective Java, Third Edition.&lt;/em&gt; Addison-Wesley, 2018&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/jiangpingjiangping/article/details/78067595&quot;&gt;设计模式杂谈——模式与反模式之争&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 02 Feb 2020 18:42:00 +0000</pubDate>
        <link>https://zwt.io/2020/02/02/builder-pattern-in-depth/</link>
        <guid isPermaLink="true">https://zwt.io/2020/02/02/builder-pattern-in-depth/</guid>
        
        <category>Design Pattern</category>
        
        <category>设计模式</category>
        
        
      </item>
    
      <item>
        <title>Spring Boot的类</title>
        <description>&lt;h2 id=&quot;常见类的用途&quot;&gt;常见类的用途&lt;/h2&gt;

&lt;h3 id=&quot;springapplicationbuilder&quot;&gt;SpringApplicationBuilder&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;java.lang.Object&lt;/code&gt;&lt;br /&gt;
​	&lt;code&gt;org.springframework.boot.builder.SpringApplicationBuilder&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Builder for &lt;code&gt;SpringApplication&lt;/code&gt; and &lt;code&gt;ApplicationContext&lt;/code&gt; instances with convenient fluent API and context hierarchy support. Simple example of a context hierarchy:&lt;br /&gt;
&lt;code&gt;new SpringApplicationBuider(ParentConfig.class).child(ChildConfig.class).run(args);&lt;/code&gt;&lt;br /&gt;
Another common use case is setting active profiles and default properties to set up the environment for an application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;new SpringApplicationBuilder(Application.class).profiles(&quot;server&quot;)
    			.properties(&quot;transport=local&quot;).run(args);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your needs are simpler, consider using the static convenience methods in SpringApplication instead.&lt;/p&gt;

&lt;p&gt;(org.springframework.boot:spring-boot:2.2.4.RELEASE)&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;这里就是Builder模式，顺便记录一下，先上图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/builder-pattern.png&quot; alt=&quot;builder-pattern&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GoF 对 &lt;strong&gt;Builder Pattern&lt;/strong&gt; 的定义如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Separate the construction of a complex object from its representation so that the same construction processes can create different representations.&lt;/p&gt;

  &lt;p&gt;将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同表示。（中文版书里的翻译，另外注意，在书中 Builder 译作“生成器”）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上图中，&lt;code&gt;Product&lt;/code&gt; 是我们想要构建的复杂对象，&lt;code&gt;ConcreteBuilder&lt;/code&gt; 通过实现抽象的 &lt;code&gt;Builder&lt;/code&gt; 接口去构造和组合一个 product 的部件。具体的构造者，&lt;code&gt;ConcreteBuilder&lt;/code&gt; 负责构建 product 的内部表现，和创造过程及组合机制。 &lt;code&gt;Builder&lt;/code&gt; 也可以提供方法使得被创建的对象可以被使用。 Director 负责使用 Builder 取创建最终的 Product，也就是说 Director 是 Builder 的使用者。 构造者(Builders) 可以保持对所构造的对象(products)的引用，以便可以再次使用。&lt;/p&gt;

&lt;h3 id=&quot;springapplication&quot;&gt;SpringApplication&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;java.lang.Object&lt;/code&gt;&lt;br /&gt;
​	&lt;code&gt;org.springframework.boot.SpringApplication&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Class that can be used to bootstrap and launch a Spring application from a Java main method. By default class will perform the following steps to bootstrap your application:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create an appropriate &lt;code&gt;ApplicationContext&lt;/code&gt; instance (depending on your classpath)&lt;/li&gt;
  &lt;li&gt;Register a &lt;code&gt;CommandLinePropertySource&lt;/code&gt; to expose command line arguments as Spring properties&lt;/li&gt;
  &lt;li&gt;Refresh the application context, loading all singleton beans&lt;/li&gt;
  &lt;li&gt;Trigger any &lt;code&gt;CommandLineRunner&lt;/code&gt; beans&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In most circumstances the static &lt;code&gt;run(Class, String[])&lt;/code&gt; method can be called directly from you main method to bootstrap your application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt; @Configuration
 @EnableAutoConfiguration
 public class MyApplication  {

   // ... Bean definitions

   public static void main(String[] args) {
     SpringApplication.run(MyApplication.class, args);
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more advanced configuration a &lt;code&gt;SpringApplication&lt;/code&gt; instance can be created and customized before being run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public static void main(String[] args) {
   SpringApplication application = new SpringApplication(MyApplication.class);
   // ... customize application settings here
   application.run(args)
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;SpringApplication&lt;/code&gt;s can read beans from a variety of different sources. It is generally recommended that a single &lt;code&gt;@Configuration&lt;/code&gt; class is used to bootstrap your application, however, you may also set sources from:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The fully qualified class name to be loaded by &lt;code&gt;AnnotatedBeanDefinitionReader&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The location of an XML resource to be loaded by &lt;code&gt;XmlBeanDefinitionReader&lt;/code&gt;, or a groovy script to be loaded by &lt;code&gt;GroovyBeanDefinitionReader&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The name of a package to be scanned by &lt;code&gt;ClassPathBeanDefinitionScanner&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Configuration properties are also bound to the SpringApplication. This makes it possible to set SpringApplication properties dynamically, like additional sources (“spring.main.sources” - a CSV list) the flag to indicate a web environment (“spring.main.web-application-type=none”) or the flag to switch off the banner (“spring.main.banner-mode=off”).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;org.springframework.boot.SpringApplication&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public static org.springframework.context.ConfigurableApplicationContext run(Class &amp;lt;?&amp;gt; primarySource, String ... args)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Static helper that can be used to run a &lt;code&gt;SpringApplication&lt;/code&gt; from the specified source using default settings.&lt;br /&gt;
Parameters:&lt;br /&gt;
&lt;code&gt;primarySource&lt;/code&gt; - the primary source to load&lt;br /&gt;
&lt;code&gt;args&lt;/code&gt; - the application arguments (usually passed from a Java main method)&lt;br /&gt;
Returns:&lt;br /&gt;
the running &lt;code&gt;ApplicationContext&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Feb 2020 15:54:00 +0000</pubDate>
        <link>https://zwt.io/2020/02/01/spring-classes/</link>
        <guid isPermaLink="true">https://zwt.io/2020/02/01/spring-classes/</guid>
        
        <category>Spring Boot</category>
        
        <category>Notes</category>
        
        
      </item>
    
      <item>
        <title>Spring Boot 消息</title>
        <description>&lt;h2 id=&quot;消息通信&quot;&gt;消息通信&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/messaging.png&quot; alt=&quot;messaging&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最简单的消息机制，从A点到B点，通过某种信道传递消息，可以使一个简单的函数调用，一个socket连接，或者是一个HTTP请求。主要目的是发送端发送消息给接收端消费。&lt;/p&gt;

&lt;h3 id=&quot;消息通信使用场景&quot;&gt;消息通信使用场景&lt;/h3&gt;

&lt;p&gt;下面列出一些消息通信常见的使用场景：&lt;/p&gt;

&lt;h4 id=&quot;可靠送达&quot;&gt;可靠送达&lt;/h4&gt;

&lt;p&gt;通常需要一些消息确认机制，如果中间有个Broker，消息生产者要通过一些确认，了解Broker确实收到了消息。同理在消费者段也需要给Broker确认已经收到消息。通常支付、股票交易等系统会使用这种模式。&lt;!--more--&gt;&lt;/p&gt;

&lt;h4 id=&quot;解耦&quot;&gt;解耦&lt;/h4&gt;

&lt;p&gt;按照业务领域解耦，使用bounded context.&lt;/p&gt;

&lt;h4 id=&quot;扩展和高可用&quot;&gt;扩展和高可用&lt;/h4&gt;

&lt;p&gt;多个Broker扩展。&lt;/p&gt;

&lt;h4 id=&quot;异步&quot;&gt;异步&lt;/h4&gt;

&lt;p&gt;异步消息确保响应性，responsiveness&lt;/p&gt;

&lt;h4 id=&quot;互操作性&quot;&gt;互操作性&lt;/h4&gt;

&lt;p&gt;采用Broker架构，实现AMQP等协议。&lt;/p&gt;

&lt;h3 id=&quot;消息模式和设计模式&quot;&gt;消息模式和设计模式&lt;/h3&gt;

&lt;h4 id=&quot;点到点&quot;&gt;点到点&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/point-to-point.png&quot; alt=&quot;point-to-point&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;发布-订阅&quot;&gt;发布-订阅&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/pub-sub.png&quot; alt=&quot;pub-sub&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;设计模式&quot;&gt;设计模式&lt;/h4&gt;

&lt;p&gt;A design patterns is a solution to a commonly known problem in the software design. By the same token, messaging patterns attempt to solve problems with messaging designs.&lt;/p&gt;

&lt;p&gt;​	You will learn about the implementation of the following patterns during the course of this book, so I want to list them here with simple definitions to introduce them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Message type patterns:&lt;/em&gt; Describe different forms of messaging, such as string(maybe plain text, JSON and/or XML), byte array, object, etc.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Message channel patterns:&lt;/em&gt; Determine what kind of a transport(channel) will be used to send a message and what kind of attributes it will have. The idea here is that the producer and consumer know how to connect to the transport(channel) and can send and receive the message. Possible attributes of this transport include a request-reply feature and a unidirectional channel, which you will learn about very soon. One example of this pattern is the point-to-point channel.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Routing patterns:&lt;/em&gt; Describe a way to send message between producer and consumers by providing a routing mechanism(filtering that’s dependent on a set of conditions) in an integrated solution. That can be accomplished by programming, or in some cases, the messaging system(the broker) can have these capabilities(as with RabbitMQ).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Service consumer patterns:&lt;/em&gt; Describe how the consumers will behave when messages arrive, such as adding a transactional approach when processing the message. There are frameworks that allow you to initiate this kind of behavior(like the Spring Framework, which you do by adding the @Transactional, a transaction-base abstraction).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Contract patterns:&lt;/em&gt; Contracts between the producer and consumer to have simple communications, such as when you do some REST calls, where you call a JSON or XML message with fields.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Message construction patterns:&lt;/em&gt; Describe how a message is created so it can travel within the messaging system. For example, you can create an “envelope” that can have a body(the actual message) and some headers(with a correlation ID or a sequence or maybe a reply address). With a simple web request, you can add parameters or headers and the actual message becomes the body of the request, making the whole request part of the construction pattern. The HTTP protocol allows for that kind of communication (messaging).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Transformation patterns:&lt;/em&gt; Describe how to change the content of the message within the messaging system. Think about a message that requires some processing and needs to be enhanced on the fly, such as a content enricher.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, these patterns not only describe the messaging process but some of them describe how to handle some of the common use cases you saw earlier. Of cause, there are a lot more messaging patterns.&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Feb 2020 10:44:00 +0000</pubDate>
        <link>https://zwt.io/2020/02/01/spring-boot-messaging/</link>
        <guid isPermaLink="true">https://zwt.io/2020/02/01/spring-boot-messaging/</guid>
        
        <category>Spring Boot</category>
        
        <category>Messaging</category>
        
        
      </item>
    
      <item>
        <title>Java线程间通信</title>
        <description>&lt;h3 id=&quot;生产者与消费者&quot;&gt;生产者与消费者&lt;/h3&gt;

&lt;p&gt;一种典型的线程间通信的例子是涉及到生产者线程与消费者线程之间的关系。生产者生产数据项被消费者消费，每个被生产出的数据项被存放在共享的变量中。&lt;/p&gt;

&lt;p&gt;想象线程以不同的速度运行，消费者可能来不及处理掉生产者之前生产出来并放到共享变量中的数据项。还有可能就是消费者消费速度太快了，未等到生产者产生数据就去取了。&lt;/p&gt;

&lt;p&gt;为了克服这类问题，生产者线程必须等到它被通知之前生产的数据项已经被消费掉了才继续生产，而消费者线程必须等到它被通知已经有新的数据项产生了才取消费。下面代码展示如何通过使用 &lt;code&gt;wait()&lt;/code&gt; 和 &lt;code&gt;notify()&lt;/code&gt; 完整这样的任务。&lt;!--more--&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package io.zwt;

// PC stands for Producer and Consumer
public class PC {
    public static void main(String[] args) {
        Shared s = new Shared(); // 共享变量
        new Producer(s).start(); // 生产者线程
        new Consumer(s).start(); // 消费者线程
    }
}

// 表示共享数据的类
class Shared {
    private char c; // 字符
    private volatile boolean writable = true; // 是否可写入状态

    // 一个同步方法，设置共享变量所保存的字符 c，这个方法对应生产者的操作
    synchronized void setSharedChar(char c) {
        // 若不可写入，就在一个 while 循环中等待
        while (!writable)
            try {
                wait();
            } catch (InterruptedException ignored) {
            }
        this.c = c; // 写入数据
        writable = false; // 改变状态
        notify(); // 生产好了，通知消费者
    }

    // 对应消费者的操作
    synchronized char getSharedChar() {
        // 可写入状态则等待，说明在生产，所以要等待
        while (writable)
            try {
                wait();
            } catch (InterruptedException ignored) {
            }
        writable = true;
        notify(); // 消费完了，通知生产者
        return c; // 读取到的字符
    }
}

// 生产者线程
class Producer extends Thread {
    private final Shared s;

    Producer(Shared s) {
        this.s = s;
    }

    @Override
    public void run() {
        for (char ch = 'A'; ch &amp;lt;= 'Z'; ch++) {
            s.setSharedChar(ch);
            System.out.println(ch + &quot; produced by producer.&quot;);
        }
    }
}

// 消费者线程
class Consumer extends Thread {
    private final Shared s;

    Consumer(Shared s) {
        this.s = s;
    }

    @Override
    public void run() {
        char ch;
        do {
            ch = s.getSharedChar();
            System.out.println(ch + &quot; consumed by consumer.&quot;);
        } while (ch != 'Z');
    }
}
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Thu, 30 Jan 2020 09:35:00 +0000</pubDate>
        <link>https://zwt.io/2020/01/30/java-thread-communication/</link>
        <guid isPermaLink="true">https://zwt.io/2020/01/30/java-thread-communication/</guid>
        
        <category>Java</category>
        
        <category>Thread</category>
        
        
      </item>
    
      <item>
        <title>水密舱壁模式</title>
        <description>&lt;p&gt;水密舱壁模式是一类容错的应用程序设计。在水密舱壁模式架构中，应用程序的个组成元素被分隔到隔舱中，这样一旦其中一个出故障，其它部分仍能够运行。这是命名来自船体当中的分隔区域（水密舱壁）。如果一艘船的水密隔舱坏了，那么只是受损部位会进水（其它部分被隔开了），这样能够防止沉船。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Compartments_and_watertight_subdivision_of_a_ship's_hull_(Seaman's_Pocket-Book,_1943).jpg&quot; alt=&quot;水密壁舱&quot; /&gt; &lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;场景与问题&quot;&gt;场景与问题&lt;/h2&gt;

&lt;p&gt;一个基于云的应用程序可能包括多个服务，每个服务可能有一个或者多个消费者。一个服务超负荷或者出故障会影响到这个服务的所有消费者。而且，一个消费者可能同时对多个服务发起请求，每个请求都占用着资源。当消费者向一个错误配置的服务或无反应的服务发起请求，那么客户端请求所占用的资源可能不能及时地释放。随着对服务的请求继续发起，此类资源可能会被耗尽。例如，客户端连接池可能会耗尽。在那情况下，消费者对于其它服务的请求会受到影响。最终导致消费者不仅没法再对原来无响应的服务发起请求，而且也不能对其它服务发起请求了。同样的资源耗尽问题也影响着有多个消费者的服务。来自一个客户端的大量请求可能会耗尽服务可用的资源。其它消费者就没有办法再消费服务，导致雪崩故障效应。&lt;/p&gt;

&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;

&lt;p&gt;将服务实例按照消费者的负载和可用性要求分为不同的组。 这种设计有助于隔离故障，并允许你在即使是故障情况下仍能为部分消费者维持服务功能。&lt;/p&gt;

&lt;p&gt;一个消费者同样也可以分区资源，服务调用间资源互不影响。（即调用某个服务的资源不会影响到用于调用另一个服务的资源。 ） 例如，一个需要调用多个服务的消费者可能会为每个服务指定一个连接池。如果一个服务开始出故障，那只会影响到指定给那个服务的连接池，而消费者仍然可以继续使用其它服务。&lt;/p&gt;

&lt;p&gt;这种模式的好处有以下几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将消费者和服务从雪崩故障中隔离开来。一个影响到一个消费者或服务的问题可以被隔离在它自己的水密舱壁里，防止解决方案整体失败。&lt;/li&gt;
  &lt;li&gt;能让你在发生故障的情况下保留部分功能。其它服务和应用程序功能能够继续运行。&lt;/li&gt;
  &lt;li&gt;可以让你部署能为消费者应用提供不同服务质量的服务。优先级高的消费者池可以配置使用高优先级的服务。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面的图展示围绕调用独立服务的连接池构造的水密舱壁。如果服务A（Service A）出故障或者其它毛病，它的连接池已经隔开了，所以只有使用了指派给服务A的线程池的工作负荷（workload）会受到影响。而使用服务B和C的工作负荷没受影响，能够继续不间断运行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bulkhead-1.png&quot; alt=&quot;First diagram of the Bulkhead pattern&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下一个图展示了多个客户端调用一个服务。每个客户端分别被指派一个服务实例。 客户端 1（Client 1）发起太多请求了并且压垮了它的服务实例。因为每个服务实例都是分别隔离开的，其它的客户端可以继续发起请求。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bulkhead-2.png&quot; alt=&quot;First diagram of the Bulkhead pattern&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;问题与思考&quot;&gt;问题与思考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;根据业务以及应用程序的技术性需求定义分区。&lt;/li&gt;
  &lt;li&gt;当将服务或消费者分区到水密舱壁，应考虑技术上能提供的隔离级别，也要考虑开销成本，性能以及可维护性。&lt;/li&gt;
  &lt;li&gt;考虑将水密舱壁模式与重试、断路器还有节流模式结合起来实现更加周密的故障处理机制。&lt;/li&gt;
  &lt;li&gt;当将消费者分区到水密舱壁，考虑使用进程，线程池以及信号量。像Netflix Hystrix还有Polly的项目提供了框架用于创建消费者水密舱壁。&lt;/li&gt;
  &lt;li&gt;当将服务分区到水密舱壁，考虑将它们部署到独立的虚拟机，容器或进程。容器在资源隔离和相对低开销方面提供了一个好的平衡点。&lt;/li&gt;
  &lt;li&gt;使用异步消息通信的服务可以通过不同的队列隔离开来。每个队列可以有一组专用的实例处理消息，或者一个单组实例，使用算法出队和分发处理。&lt;/li&gt;
  &lt;li&gt;确定水密舱壁的粒度级别。例如，如果你想在分区上放租户，你可以将每个租户放到独立的分区，或者将几个租户放到一个分区。&lt;/li&gt;
  &lt;li&gt;监控每个分区的性能和服务水平协议（Service Level Agreement）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;何时使用这种模式&quot;&gt;何时使用这种模式&lt;/h2&gt;

&lt;p&gt;这种模式适用于：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;隔离用于消费一系列后端服务的资源，尤其是即使其中一个服务无响应，应用程序能够提供某些级别的功能的情况。&lt;/li&gt;
  &lt;li&gt;将重要的消费者与普通消费者隔离开。&lt;/li&gt;
  &lt;li&gt;防止应用程序发生雪崩故障。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这种模式不适用于：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;项目中不能接受对资源的低效利用。&lt;/li&gt;
  &lt;li&gt;没有必要增加复杂度的情况。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;例子&quot;&gt;例子&lt;/h2&gt;

&lt;p&gt;下面的Kubernetes配置文件创建了一个隔离的容器用于运行单个服务，定义了它自己的CPU和内存资源以及限额。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;apiVersion: v1
kind: Pod
metadata:
  name: drone-management
spec:
  containers:
  - name: drone-management-container
    image: drone-service
    resources:
      requests:
        memory: &quot;64Mi&quot;
        cpu: &quot;250m&quot;
      limits:
        memory: &quot;128Mi&quot;
        cpu: &quot;1&quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Wed, 29 Jan 2020 08:46:00 +0000</pubDate>
        <link>https://zwt.io/2020/01/29/bulkhead-pattern/</link>
        <guid isPermaLink="true">https://zwt.io/2020/01/29/bulkhead-pattern/</guid>
        
        <category>模式</category>
        
        <category>微服务</category>
        
        
      </item>
    
  </channel>
</rss>
