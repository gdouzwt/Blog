<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>记录</title>
    <description></description>
    <link>https://zwt.io/</link>
    <atom:link href="https://zwt.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 25 Mar 2020 00:34:20 +0000</pubDate>
    <lastBuildDate>Wed, 25 Mar 2020 00:34:20 +0000</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>第11章练习回顾</title>
        <description>&lt;ol&gt;
  &lt;li&gt;B&lt;/li&gt;
  &lt;li&gt;F -&amp;gt; D Modules are required to have a module-info.java file at the root directory of the module. Option D matches this requirement.&lt;/li&gt;
  &lt;li&gt;B&lt;/li&gt;
  &lt;li&gt;D -&amp;gt; G The -m or –module option is used to specify the module and class name. The -p or -module-path option is used to specify the location of the modules. Option D would be correct if the rest of the command were correct. However, running a program requires specifying the package name with periods (.) instead of slashes. Since the command is incorrect, option G is correct.&lt;/li&gt;
  &lt;li&gt;AF -&amp;gt; AFG Options C and D are incorrect because there is no use keyword. Options A and F are correct because opens is for reflection and uses declares an API that consumes a service. Option G is also correct as the file can be completely empty. This is just something you have to memorize.&lt;/li&gt;
  &lt;li&gt;BDF -&amp;gt; BC Packages inside a module are not exported by default, making option B correct and option A incorrect. Exporting is necessary for other code to use the packages; it is not necessary to call the main() method at the command line, making option C correct and option D incorrect. The module-info.java file has the correct name and compiles, making options E and F incorrect.&lt;/li&gt;
  &lt;li&gt;EF -&amp;gt; DG Options A, B, E, and F are incorrect because they refer to keywords that don’t exist. The requires transitive keyword is used when specifying a module to be used by the requesting module and any other modules that use the requesting module. Therefore, dog needs to specify the transitive relationship, and option G is correct. The module puppy just needs to require dog, and it gets the transitive dependencies, making option D correct.&lt;!--more--&gt;&lt;/li&gt;
  &lt;li&gt;ABCD -&amp;gt; ABD Options A and B are correct because the -p (–module-path) option can be passed when compiling or running a program. Option D is also correct because jdeps can use the –module-path option when listing dependency information.&lt;/li&gt;
  &lt;li&gt;AEF -&amp;gt; AB The -p specifies the module path. This is just a directory, so all of the options have a legal module path. The -m specifies the module, which has two parts separated by a slash. Options E and F are incorrect since there is no slash. The first part is the module name. It is separated by periods (.) rather than dashes (-), making option C incorrect. The second part is the package and class name, again separated by periods. The package and class names must be legal Java identifiers. Dashes (-) are not allowed, ruling out option D. This leaves options A and B as the correct answers.&lt;/li&gt;
  &lt;li&gt;B&lt;/li&gt;
  &lt;li&gt;ABD -&amp;gt; BDEF This is another question you just have to memorize. The jmod command has five modes you need to be able to list: create, extract, describe, list, and hash. The hash operation is not an answer choice. The other four are making options B, D, E, and F correct.&lt;/li&gt;
  &lt;li&gt;A -&amp;gt; B The java command uses this option to print information when the program loads. You might think jar does the same thing since it runs a program too. Alas, this parameter does not exist on jar.&lt;/li&gt;
  &lt;li&gt;AD -&amp;gt; E There is a trick here. A module definition uses the keyword module rather than class. Since the code does not compile, option E is correct. If the code did compile, options A and D would be correct.&lt;/li&gt;
  &lt;li&gt;A&lt;/li&gt;
  &lt;li&gt;AD -&amp;gt; BD The java command has an –add-exports option that allows exporting a package at runtime. However, it is not encouraged to use it, making options B and D the answer.&lt;/li&gt;
  &lt;li&gt;BC&lt;/li&gt;
  &lt;li&gt;D -&amp;gt; E&lt;/li&gt;
  &lt;li&gt;AC&lt;/li&gt;
  &lt;li&gt;BC&lt;/li&gt;
  &lt;li&gt;BE&lt;/li&gt;
  &lt;li&gt;G&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 22 Mar 2020 18:42:00 +0000</pubDate>
        <link>https://zwt.io/2020/03/22/chapter11-exam-review/</link>
        <guid isPermaLink="true">https://zwt.io/2020/03/22/chapter11-exam-review/</guid>
        
        <category>Java</category>
        
        <category>OCP</category>
        
        
      </item>
    
      <item>
        <title>RSocket与Spring Security简单整合</title>
        <description>&lt;h3 id=&quot;创建工程&quot;&gt;创建工程&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;greetings-service&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;在 start.spring.io 选择 2.3.0 M2 版本 Spring Boot，依赖项如下&lt;/p&gt;

      &lt;p&gt;Lombok&lt;/p&gt;

      &lt;p&gt;RSocket&lt;/p&gt;

      &lt;p&gt;Spring Security&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;greetings-client&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;客户端的依赖项也是&lt;/p&gt;

      &lt;p&gt;Lombok&lt;/p&gt;

      &lt;p&gt;RSocket&lt;/p&gt;

      &lt;p&gt;Spring Security&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;服务端应用&quot;&gt;服务端应用&lt;/h4&gt;

&lt;p&gt;GreetingsServiceApplication.java  &lt;!--more--&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// 省略导入
// 一个简单的，基于用户名和密码的“问候”应用
// 简单起见，所有类都写在一个文件里
@SpringBootApplication
public class GreetingsServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(GreetingsServiceApplication.class, args);
    }
}

@Configuration
@EnableRSocketSecurity
class RSocketSecurityConfiguration {

    @Bean
    RSocketMessageHandler messageHandler(RSocketStrategies strategies) {
        RSocketMessageHandler mh = new RSocketMessageHandler();
        mh.getArgumentResolverConfigurer()
            .addCustomResolver(new AuthenticationPrincipalArgumentResolver());
        mh.setRSocketStrategies(strategies);
        return mh;
    }

    // 授权
    @Bean
    PayloadSocketAcceptorInterceptor authorization(RSocketSecurity security) {
        return security
                .authorizePayload(spec -&amp;gt; spec
                        .route(&quot;greetings&quot;)
                        .authenticated()
                        .anyExchange()
                        .permitAll())
                .simpleAuthentication(Customizer.withDefaults())
                .build();
    }

    // 用户认证 Authentication
    @Bean
    MapReactiveUserDetailsService authentication() {
        UserDetails jlong = User.withDefaultPasswordEncoder().username(&quot;jlong&quot;)
            .password(&quot;pw&quot;).roles(&quot;USER&quot;).build();
        UserDetails rwinch = User.withDefaultPasswordEncoder().username(&quot;rwinch&quot;)
            .password(&quot;pw&quot;).roles(&quot;ADMIN&quot;, &quot;USER&quot;).build();
        return new MapReactiveUserDetailsService(jlong, rwinch);
    }
}

// DTO
@Data
@AllArgsConstructor
@NoArgsConstructor
class GreetingResponse {
    private String message;
}

@Controller
class GreetingController {

    @MessageMapping(&quot;greetings&quot;)
    Flux&amp;lt;GreetingResponse&amp;gt; greet(@AuthenticationPrincipal Mono&amp;lt;UserDetails&amp;gt; user) {
        return user
                .map(UserDetails::getUsername)
                .flatMapMany(GreetingController::greet);
    }

    private static Flux&amp;lt;GreetingResponse&amp;gt; greet(String name) {
        return Flux.fromStream(
                Stream.generate(() -&amp;gt; 
                new GreetingResponse(&quot;Hello &quot; + name + &quot; @ &quot; + 
                Instant.now().toString())))
                .delayElements(Duration.ofSeconds(1));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;服务端的配置文件&lt;/strong&gt;：application.properties&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-properties&quot;&gt;spring.rsocket.server.port=8888
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;客户端应用&quot;&gt;客户端应用&lt;/h4&gt;

&lt;p&gt;GreetingsClientApplication.java&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@SpringBootApplication
@Log4j2
public class GreetingsClientApplication {

    @SneakyThrows
    public static void main(String[] args) {
        SpringApplication.run(GreetingsClientApplication.class, args);
        System.in.read(); // 让程序不要结束
    }

    private final MimeType mimeType =
            MimeTypeUtils.parseMimeType(WellKnownMimeType.MESSAGE_RSOCKET_AUTHENTICATION.getString());
    private final UsernamePasswordMetadata credentials = new UsernamePasswordMetadata(&quot;jlong&quot;, &quot;pw&quot;);

    // 配置所用编码器
    @Bean
    RSocketStrategiesCustomizer rSocketStrategiesCustomizer() {
        return strategies -&amp;gt; strategies.encoder(new SimpleAuthenticationEncoder());
    }

    // 相当于客户端
    @Bean
    RSocketRequester rSocketRequester(RSocketRequester.Builder builder) {
        return builder
                //.setupMetadata(this.credentials, this.mimeType)
                .connectTcp(&quot;localhost&quot;, 8888)
                .block();
    }

    // 应用就绪时通过RSocket向localhost:8888/greetings发起请求
    // 并将响应消息通过日志输出到控制台
    @Bean
    ApplicationListener&amp;lt;ApplicationReadyEvent&amp;gt; ready(RSocketRequester greetings) {
        return event -&amp;gt; greetings
                .route(&quot;greetings&quot;)
                .metadata(this.credentials, this.mimeType)
                .data(Mono.empty())
                .retrieveFlux(GreetingResponse.class)
                .subscribe(gr -&amp;gt; log.info(&quot;secured response: &quot; + gr.toString()));
    }
}

// DTO
@Data
@AllArgsConstructor
@NoArgsConstructor
class GreetingResponse {
    private String message;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;结束&quot;&gt;结束&lt;/h3&gt;

&lt;p&gt;感觉直接看代码也挺好理解的，就不勉强添加太多文字说明了。有什么不明白的，可以看&lt;a href=&quot;https://www.bilibili.com/video/av95256090&quot;&gt;视频讲解&lt;/a&gt;。&lt;/p&gt;

</description>
        <pubDate>Tue, 10 Mar 2020 21:00:00 +0000</pubDate>
        <link>https://zwt.io/2020/03/10/spring-tips-rsocket-spring-security/</link>
        <guid isPermaLink="true">https://zwt.io/2020/03/10/spring-tips-rsocket-spring-security/</guid>
        
        <category>RSocket</category>
        
        <category>Spring Security</category>
        
        <category>Authentication</category>
        
        
      </item>
    
      <item>
        <title>网络爬虫学习笔记</title>
        <description>&lt;h3 id=&quot;课程计划&quot;&gt;课程计划&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;入门&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HttpClient&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Jsoup&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;案例&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;dependencies {
    implementation('org.jsoup:jsoup:1.12.2')
    implementation('org.apache.httpcomponents:httpclient:4.5.2')
  
    testImplementation('org.slf4j:slf4j-log4j12:1.7.25')
    testImplementation('org.junit.jupiter:junit-jupiter:5.6.0')
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;爬虫功能&quot;&gt;爬虫功能&lt;/h3&gt;

&lt;p&gt;从功能上来讲，爬虫一般分为数据采集，处理，存储三个部分。爬虫从一个或若干个初始页面的URL开始，获得初始页面上的URL，在抓取页面的过程中，不断从当前页面抽取新的URL放入队列，直到满足系统的一定停止条件。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数据采集&lt;/li&gt;
  &lt;li&gt;处理&lt;/li&gt;
  &lt;li&gt;存储&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从初始页面开始，爬取这个页面里面的详细页面连接，接着是下一页，等等。&lt;!--more--&gt;&lt;/p&gt;

&lt;h4 id=&quot;为什么学习网络爬虫&quot;&gt;为什么学习网络爬虫&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;可以实现搜索引擎&lt;/p&gt;

    &lt;p&gt;搜集，自己感兴趣的数据。做好玩的事情。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;大数据时代，获取更多数据源，人工智能&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;数据分析&lt;/li&gt;
      &lt;li&gt;数据挖掘&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;搜索引擎优化，网站推广，研究规则&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;就业，数据工程师，爬虫工程师， Microsoft Health,  Data mining&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;带参数的-get-请求&quot;&gt;带参数的 GET 请求&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;HttpGet&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;post-请求&quot;&gt;POST 请求&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;HttpPost 不带参数&lt;/li&gt;
  &lt;li&gt;带参数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[To be continued!]&lt;/p&gt;

</description>
        <pubDate>Mon, 02 Mar 2020 19:30:00 +0000</pubDate>
        <link>https://zwt.io/2020/03/02/web-scraping-notes/</link>
        <guid isPermaLink="true">https://zwt.io/2020/03/02/web-scraping-notes/</guid>
        
        <category>Java</category>
        
        <category>爬虫</category>
        
        <category>scraping</category>
        
        
      </item>
    
      <item>
        <title>OCP-1Z0-816 模拟测试1回顾</title>
        <description>&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Given:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Path p1 = Paths.get(&quot;c:\\temp\\test1.txt&quot;);
Path p2 = Paths.get(&quot;c:\\temp\\test2.txt&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which of the following code fragments moves the file test1.txt to test2.txt, even if test2.txt exists?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Files.move(p1, p2);
    &lt;blockquote&gt;
      &lt;p&gt;This will throw a &lt;code&gt;java.nio.file.FileAlreadyExistsException&lt;/code&gt; if the file already exists.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Files.move(p1, p2, StandardCopyOption.REPLACE_EXISTING);&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;try(Files.move(p1, p2)) { }
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;Files.move&lt;/code&gt; returns a &lt;code&gt;Path&lt;/code&gt; object (of the destination file), which is not a resource that can be closed because it does not implement &lt;code&gt;AutoCloseable&lt;/code&gt; interface. So this will not compile.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;try(Files.copy(p1, p2, StandardCopyOption.REPLACE_EXISTING)) { Files.delete(p1); }&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Files.copy(p1, p2, StandardCopyOption.REPLACE_EXISTING); Files.delete(p1);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
Files.copy method will copy the test1.txt into test2.txt. If test2.txt doesn’t exist, it will be created. However, Files.isSameFile method doesn’t check the contents of the file. It is meant to check if the two path objects resolve to the same file or not. In this case, they are not, and so, it will return false.&lt;br /&gt;
The following is brief JavaDoc description for both the methods:&lt;br /&gt;
&lt;code&gt;public static Path copy(Path source, Path target, CopyOption... option) throws IOException&lt;/code&gt;  &lt;!--more--&gt;
Copy a file to a target file.&lt;br /&gt;
This method copies a file to the target file with the options parameter specifying how the copy is performed. By default, the copy fails if the target file already exists or is a symbolic link, except if the source are the same file, in which case the method completes without copying the file.&lt;br /&gt;
File attributes are not required to be copied to the target file. If symbolic links are supported, and the file is a symbolic link, then the final target of the link is copied. If the file is a directory in the target location(entries in the directory are not copies).&lt;br /&gt;
The options parameter may include any of the following:&lt;br /&gt;
&lt;strong&gt;REPLACE_EXISTING&lt;/strong&gt; If the target file exists, then the target file is replaced if it is not a non-empty directory. If the target file exists and is a symbolic link, then the symbolic link itself, not the target of the link, is replaced.&lt;br /&gt;
&lt;strong&gt;COPY_ATTRIBUTES&lt;/strong&gt; Attempts to copy the file attributes associated with this file to the target file. The exact file attributes that are copied is platform and file system dependent and therefore unspecified. Minimally, the last-modified-time is copied to the target file if supported by both the source and target file store. Copying of file timestamps may result in precision loss.&lt;br /&gt;
&lt;strong&gt;NOFOLLOW_LINKS&lt;/strong&gt; Symbolic links are not followed. If the file is a symbolic link, then the symbolic link itself, not the target of the link, is copied. It is implementation specific if file attributes can be copied to the new link. In other words, the &lt;strong&gt;COPY_ATTRIBUTES&lt;/strong&gt; option may be ignored when copying a symbolic link.&lt;br /&gt;
An implementation of this interface may support additional implementation specific options.&lt;br /&gt;
Copying a file is not an atomic operation. If an &lt;code&gt;IOException&lt;/code&gt; is thrown then it possible that the target file is incomplete or some of its file attributes have not been copied from the source file. When the &lt;code&gt;REPLACE_EXISTING&lt;/code&gt; option is specified and the target file exists, then the target file is replaced. The check for the existence of the file and the creation of the new file may not be atomic with respect to other file system activities.&lt;br /&gt;
&lt;code&gt;public static Path move(Path source, Path target, CopyOption... options) throws IOException&lt;/code&gt;&lt;br /&gt;
Move or rename a file to a target file.&lt;br /&gt;
By default, this method attempts to move the file to the target file, failing if the target file exists except if the source and target are the same file, in which case this method has no effect. If the file is a symbolic link then the symbolic link itself, not the target of the link, is moved. This method may be invoked to move an empty directory. In some implementations a directory has entries for special files or links that are created when the directory is created. In such implementations a directory is considered empty when only the special entries exist. When invoked to move a directory that is not empty then the directory is moved if it does not require moving the entries in the directory. For example, renaming a directory on the same FileStore will usually not require moving the entries in the directory. When moving a directory requires that its entries be moved then this method fails (by throwing an &lt;code&gt;IOException&lt;/code&gt;). To move a file tree may involve copying rather than moving directories and this can be done using the copy method in conjunction with the Files.walkFileTree utility method.&lt;br /&gt;
The options parameter may include any of the following:&lt;br /&gt;
&lt;strong&gt;REPLACE_EXISTING&lt;/strong&gt;  If the target file exists, then the target file is replaced if it is not a non-empty directory. If the target file exists and is a symbolic link, then the symbolic link itself, not the target of the link, is replaced.
&lt;strong&gt;ATOMIC_MOVE&lt;/strong&gt; The move is performed as an atomic file system operation and all other options are ignored. If the target file exists then it is implementation specific if the existing file is replaced or this method fails by throwing an &lt;code&gt;IOException&lt;/code&gt;. If the move cannot be performed as an atomic file system operation then &lt;code&gt;AtomicMoveNotSupportedException&lt;/code&gt; is thrown. This can arise, for example, when the target location is on a different FileStore and would require that the file be copied, or target location is associated with a different provider to this object. An implementation of this interface may support additional implementation specific options.&lt;br /&gt;
Where the move requires that the file be copied then the last-modified-time is copied to the new file. An implementation may also attempt to copy other file attributes but is not required to fail if the file attributes cannot be copied. When the move is performed as a non-atomic operation, and a IOException is thrown, then the state of the files is not defined. The original file and the target file may both exist, the target file may be incomplete or some of its file attributes may not been copied from the original file.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; Consider the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;class LowBalanceException extends ____ {  // 1
    public LowBalanceException(String msg) { super(msg); }
}

class WithdrawalException extends ____ { // 2 
    public WithdrawalException(String msg) { super(msg); }
}

class Account {
    double balance;
    public void withdraw(double amount) throws WithdrawalException {
        try {
            throw new RuntimeException(&quot;Not Implemented&quot;);
        } catch (Exception e) {
            throw new LowBalanceException( e.getMessage());
        }
    }
    public static void main(String[] args) {
        try {
            Account a = new Account();
            a.withdraw(100.0);
        } catch(Exception e) {
            System.out.println(e.getMessage());
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What can be inserted at // 1 and // 2 so that the above code will prints Not Implemented?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Exception Exception&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Exception LowBalanceException&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;WithdrawalException Exception&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;WithdrawalException RuntimeException&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;1.&lt;/strong&gt; The withdraw method declares that it throws &lt;code&gt;WithdrawalException&lt;/code&gt;. This means that the only exceptions that can come out of this method are WithdrawalExceptions (which means &lt;code&gt;WithdrawalException&lt;/code&gt; or its subclasses) or RuntimeExceptions.&lt;br /&gt;
&lt;strong&gt;2.&lt;/strong&gt; The try block in withdraw method throws a &lt;code&gt;RuntimeException&lt;/code&gt;. It will be caught by the &lt;code&gt;catch(Exception)&lt;/code&gt; block because &lt;code&gt;RuntimeException&lt;/code&gt; is-a &lt;code&gt;Exception&lt;/code&gt;. The code in the catch block throws a LowBalanceException, which is not caught. Thus, it will be thrown out of this method, which means LowBalanceException must either be a &lt;code&gt;RuntimeException&lt;/code&gt; or be a &lt;code&gt;WithdrawalException&lt;/code&gt; (i.e. must extend &lt;code&gt;WithdrawalException&lt;/code&gt;) to satisfy the throws clause of the withdraw method.&lt;br /&gt;
&lt;strong&gt;3.&lt;/strong&gt; The &lt;code&gt;main()&lt;/code&gt; method does not have a throws clause but the call to &lt;code&gt;withdraw()&lt;/code&gt; is enclosed within a try block with &lt;code&gt;catch(Exception)&lt;/code&gt;. Thus, &lt;code&gt;WithdrawalException&lt;/code&gt; can extend either &lt;code&gt;Exception&lt;/code&gt; or &lt;code&gt;RuntimeException&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt; Which of the following lines will cause the compilation to fail?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public enum EnumA{ A, AA, AAA};  //1

public class TestClass //2
{
  public enum EnumB { B, BB, BBB }; //3
  public static enum EnumC { C, CC, CCC }; //4
  public TestClass()
  {
    enum EnumD { D, DD, DDD } //5
  }
  public void methodX()
  {
    public enum EnumE{ E, EE, EEE } //6
  }
  public static void main(String[] args) //7
  {
    enum EnumF {F, FF, FFF }; //8
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;1,2, or both depending on the file name.
    &lt;blockquote&gt;
      &lt;p&gt;Since both EnumA and TestClass are public, they must be defined in a file with a name of EnumA.java and TestClass.java respectively.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;3
    &lt;blockquote&gt;
      &lt;p&gt;A public (or non-public) enum can be defined inside any class.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;4
    &lt;blockquote&gt;
      &lt;p&gt;A enum can be defined as a static member of any class. You can also have multiple public enums with in the same class.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;5
    &lt;blockquote&gt;
      &lt;p&gt;An enum cannot be defined inside any method or constructor&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;6
    &lt;blockquote&gt;
      &lt;p&gt;An enum cannot be defined inside any method or constructor&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;7
    &lt;blockquote&gt;
      &lt;p&gt;There is nothing wrong with this line.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;8
    &lt;blockquote&gt;
      &lt;p&gt;An enum cannot be defined inside any method or constructor&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
You need to know the following facts about enums:&lt;br /&gt;
&lt;strong&gt;1.&lt;/strong&gt; Enum constructor is always private. You cannot make it public or protected. If an enum type has no constructor declarations, then a private constructor that takes no parameters is automatically provided.&lt;br /&gt;
&lt;strong&gt;2.&lt;/strong&gt; An enum is implicitly final, which means you cannot extend it.&lt;br /&gt;
&lt;strong&gt;3.&lt;/strong&gt; You cannot extend an enum from another enum or class because an enum implicitly extends java.lang.Enum. But an enum can implement interfaces.&lt;br /&gt;
&lt;strong&gt;4.&lt;/strong&gt; Since enum maintains exactly one instance of its constants, you cannot clone it. You cannot even override the clone method in an enum because java.lang.Enum makes it final.&lt;br /&gt;
&lt;strong&gt;5.&lt;/strong&gt; Compiler provides an enum with two public static methods automatically - &lt;code&gt;values()&lt;/code&gt; and &lt;code&gt;valueOf(String)&lt;/code&gt;. The &lt;code&gt;values()&lt;/code&gt; method returns an array of its constants and &lt;code&gt;valueOf()&lt;/code&gt; method tries to match the String argument exactly (i.e. case sensitive) with an enum constant and returns that constant if successful otherwise it throws &lt;code&gt;java.lang.IllegalArgumentException&lt;/code&gt;.&lt;br /&gt;
&lt;strong&gt;6.&lt;/strong&gt; By default, an enum’s &lt;code&gt;toString()&lt;/code&gt; prints the enum name but you can override it to print anything you want.&lt;br /&gt;
The following are a few more important facts about &lt;code&gt;java.lang.Enum&lt;/code&gt; which you should know:&lt;br /&gt;
&lt;strong&gt;1.&lt;/strong&gt; It implements &lt;code&gt;java.lang.Comparable&lt;/code&gt; (thus, an enum can be added to sorted collections such as &lt;code&gt;SortedSet&lt;/code&gt;, &lt;code&gt;TreeSet&lt;/code&gt;, and &lt;code&gt;TreeMap&lt;/code&gt;).&lt;br /&gt;
&lt;strong&gt;2.&lt;/strong&gt; It has a method &lt;code&gt;ordinal()&lt;/code&gt;, which returns the index (starting with 0) of that constant i.e. the position of that constant in its enum declaration.&lt;br /&gt;
&lt;strong&gt;3.&lt;/strong&gt; It has a method &lt;code&gt;name()&lt;/code&gt;, which returns the name of this enum constant, exactly as declared in its enum declaration.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;8.&lt;/strong&gt; Which statements about the following code are correct?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;interface House{
  public default String getAddress() {
    return &quot;101 Main Str&quot;;
  }
}
interface Office {
  public static String getAddress() {
    return &quot;101 Smart Str&quot;;
  }
}
interface WFH extends House, Office {
  private boolean isOffice() {
    return true;
  }
}
class HomeOffice implements House, Office {
  public String getAddress() {
    return &quot;R No 1, Home&quot;;
  }
}
public class TestClass {
  public static void main(String[] args) {
    Office off = new HomeOffice(); //1
    System.out.println(off.getAddress()); //2
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Code for class HomeOffice will cause compilation to fail.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Code for interface WFH will cause compilation to fail.
    &lt;blockquote&gt;
      &lt;p&gt;Since Java 9, an interface is allowed to have private(but not protected) static as well as instance methods.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;It will compile fine and print R No 1, Home when run.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Line at //1 will cause compilation to fail.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Line at //2 will cause compilation to fail.
    &lt;blockquote&gt;
      &lt;p&gt;Since the declared type of variable off is Office, compiler will check the call to getAddress against Office interface. However, getAddress in Office is static and Java 8 requires static interface method to be invoked using the interface name instead of a reference variable. That is why, the compiler will raise the following error message:&lt;br /&gt;
TestClass.java:26 error: illegal static interface method call&lt;br /&gt;
   System.out.println(h.getAddress()); //2&lt;br /&gt;
the receiver expression should be replaced with the type qualifier ‘Office’
1 error&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;9.&lt;/strong&gt; Given:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;class Booby {
}
class Dooby extends Booby {
}
class Tooby extends Dooby {
}

and the following declarations:  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;List&amp;lt;? super Booby&amp;gt; bV = null;&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;List&amp;lt;? extends Tooby&amp;gt; tV = null;&lt;/code&gt;&lt;br /&gt;
Which of the following statements will compile without any error?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;11.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;14.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;15.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;17.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;20.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;21.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;25.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;27.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;29.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;30.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;31.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;32.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;33.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;34.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;35.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;36.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;39.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;41.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;42.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;43.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;45.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;46.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;48.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;49.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;50.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;51.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;53.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;57.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;58.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;60.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;61.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;63.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;64.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;65.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;66.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;67.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;70.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;71.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;73.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;78.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;80.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;81.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;82.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;83.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;How many methods have to be provided by a class that is not abstract and that implements Serializable interface?&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;0
    &lt;blockquote&gt;
      &lt;p&gt;Serializable interface does not declare any methods. That is why is also called as a “marker” interface.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;1&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;2&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Given that a code fragment has just created a JDBC Connection and has executed an update statement, which of the following statements is correct?&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Changes to the database are pending a commit call on the connection.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Changes to the database will be rolled back if another update is executed without committing the previous update.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Changes to the database will be committed right after the update statement has completed execution.
    &lt;blockquote&gt;
      &lt;p&gt;A Connection is always in auto-commit mode when it is created. As per the problem statement, an update was fired without explicitly disabling the auto-commit mode, the changes will be committed right after the update statement has finished execution.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Changes to the database will be committed when another query (update or select) is fired using the connection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
When a connection is created, it is in auto-commit mode. i.e. auto-commit is enabled. This means that each individual SQL statement is treated as a transaction and is automatically committed right after it is completed. (A statement is completed when all of its result sets and update counts have been retrieved. In almost all cases, however, a statement is completed, and therefore committed, right after it is executed.)&lt;/p&gt;

&lt;p&gt;The way to allow two or more statements to be grouped into a transaction is to disable the auto-commit mode. Since it is enabled by default, you have to explicitly disable it after creating a connection by calling &lt;code&gt;con.setAutoCommit(false);&lt;/code&gt;  &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Which interfaces does java.util.NavigableMap extend directly or indirectly?&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;java.util.SortedSet&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code&gt;java.util.Map&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code&gt;java.util.SortedMap&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;java.util.TreeMap&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;TreeMap&lt;/code&gt; is a class that implements &lt;code&gt;NavigableMap&lt;/code&gt; interface. &lt;code&gt;ConcurrentSkipListMap&lt;/code&gt; is the other such class.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;java.util.List&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
A &lt;code&gt;NavigableMap&lt;/code&gt; is a &lt;code&gt;SortedMap&lt;/code&gt; (which in turn extends Map) extended with navigation methods returning the closest matches for given search targets. Methods &lt;code&gt;lowerEntry&lt;/code&gt;, &lt;code&gt;floorEntry&lt;/code&gt;, &lt;code&gt;ceilingEntry&lt;/code&gt;, and &lt;code&gt;higherEntry&lt;/code&gt; return Map. Entry objects associated with keys respectively less than, less than or equal, greater than or equal, and greater than a give key, returning null if there is no such key. Similarly, methods &lt;code&gt;lowerKey&lt;/code&gt;, &lt;code&gt;ceilingKey&lt;/code&gt;, and &lt;code&gt;higherKey&lt;/code&gt; return only the associated keys.&lt;/p&gt;

&lt;p&gt;All of these methods are designed for locating, not traversing entries.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;NavigableMap&lt;/code&gt; may be accessed and traversed in either ascending or descending key order. The &lt;code&gt;descendingMap&lt;/code&gt; method returns a view of the map with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. Methods &lt;code&gt;subMap&lt;/code&gt;, &lt;code&gt;headMap&lt;/code&gt;, and &lt;code&gt;tailMap&lt;/code&gt; differ from the like-named &lt;code&gt;SortedMap&lt;/code&gt; methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Submaps of any NavigableMap must implement the NavigableMap interface.&lt;/p&gt;

&lt;p&gt;This interface additionally defines methods &lt;code&gt;firstEntry&lt;/code&gt;, &lt;code&gt;pollFirstEntry&lt;/code&gt;, &lt;code&gt;lastEntry&lt;/code&gt;, and &lt;code&gt;pollLastEntry&lt;/code&gt; that return and/or remove the least and greatest mapping, if any exist, else returning null.&lt;/p&gt;

&lt;p&gt;Implementations of entry-returning methods are expected to return &lt;code&gt;Map.Entry&lt;/code&gt; pairs representing snapshots of mappings at the time they were produced, and thus generally do not support the optional &lt;code&gt;Entry.setValue&lt;/code&gt; method. Note however that it is possible to change mappings in the associated map using method put.&lt;/p&gt;

&lt;p&gt;Methods &lt;code&gt;subMap(K, K)&lt;/code&gt;, &lt;code&gt;headMap(K)&lt;/code&gt;, and &lt;code&gt;tailMap(K)&lt;/code&gt; are specified to return &lt;code&gt;SortedMap&lt;/code&gt; to allow existing implementations of &lt;code&gt;SortedMap&lt;/code&gt; to be compatibly retrofitted to implement &lt;code&gt;NavigableMap&lt;/code&gt;, but extensions and implementations of this interface are encouraged to override these methods to return &lt;code&gt;NavigableMap&lt;/code&gt;. Similarly, &lt;code&gt;SortedMap.keySet()&lt;/code&gt; can be overridden to return &lt;code&gt;NavigableSet&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;In which of the following cases can the Console object be acquired?&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;When the JVM is started from an interactive command line with explicitly redirecting the standard input and output streams to Console.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;When the JVM is started from an interactive command line without redirecting the standard input and output streams.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;When the JVM is started in the background with the standard input and output streams directed to Console.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;When the JVM is started in the background without redirecting the standard input and output streams.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
Whether a virtual machine has a console is dependent upon the underlying platform and also upon the manner in which the virtual machine is invoked. If the virtual machine is started from an interactive command line without redirecting the standard input and output streams then its console will exist and will typically be connected to the keyboard and display from which the virtual machine was launched. If the virtual machine is started automatically, for example by a background job scheduler, then it will typically not have a console.&lt;/p&gt;

&lt;p&gt;If this virtual machine has a console then it is represented by a unique instance of this class which can be obtained by invoking the &lt;code&gt;System.console()&lt;/code&gt; method. If no console device is available then an invocation of that method will return null.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Which of the following are wrapper classes for primitive types?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;java.lang.String&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;java.lang.Void&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;There is Void class but it does not wrap any primitive type.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;java.lang.Null&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;There is no Null class in java.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;java.lang.Object&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;None of the above&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
Frequently it is necessary to represent a value of primitive type as if it were an object. There are following wrapper classes for this purpose:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;Char&lt;/code&gt;, &lt;code&gt;Character&lt;/code&gt;, &lt;code&gt;Short&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Long&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, and &lt;code&gt;Double&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that Byte, Short, Integer, Long, Float and Double extend from Number which is an abstract class. An object of type Double, for example, contains a field whose type is double, representing that value in such a way that a reference to it can be stored in a variable of reference type. These classes also provide a number of methods for converting among primitive values, as well as supporting such standard methods as &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;hasCode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is important to understand that objects of wrapper classes are immutable.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Which of the following standard functional interface returns void?&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;Supplier&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;It takes no argument and returns an object.&lt;br /&gt;
&lt;code&gt;T get()&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;Function&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Represents a function that accepts one argument and produces a result.&lt;br /&gt;
&lt;code&gt;R apply(T t)&lt;/code&gt;&lt;br /&gt;
Applies this function to the given argument.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;Predicate&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;It takes and argument and returns a boolean:&lt;br /&gt;
&lt;code&gt;boolean test(T t)&lt;/code&gt;&lt;br /&gt;
Evaluates this predicate on the given argument.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code&gt;Consumer&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Its functional method is:&lt;br /&gt;
&lt;code&gt;void accept(T t)&lt;/code&gt;&lt;br /&gt;
Performs this operation on the given argument.&lt;br /&gt;
It also has the following default method:&lt;br /&gt;
&lt;code&gt;default Consumer&amp;lt;T&amp;gt; andThen(Consumer&amp;lt;? super T&amp;gt; after)&lt;/code&gt;&lt;br /&gt;
Returns a composed &lt;code&gt;Consumer&lt;/code&gt; that performs, in sequence, this operation followed by the after operation.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;UnaryOperator&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Represents an operation on a single operand that produces a result of the same type as its operand. This is a specialization of &lt;code&gt;Function&lt;/code&gt; for the case where the operand and result are of the same type.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
You should go through the description of all the functional interfaces given &lt;strong&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Which of the following switches is/are used for controlling the execution of assertions at run time?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;-ua&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code&gt;-da&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;It is a short form for ‘disable assertions’.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code&gt;-enableassertions&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;-assert&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;-keepassertions&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
Although not explicitly mentioned in the exam objectives, OCP Java 11 Part 2 Exam requires you to know about the switches used to enable and disable assertions. Here are a few important points that you should know:&lt;br /&gt;
Assertions can be enabled or disabled for specific classes and/or packages. To specify a class, use the class name. To specify a package, use the package name followed by “…“(three dots also known as ellipses):&lt;br /&gt;
&lt;code&gt;java -ea:&amp;lt;class&amp;gt; myPackage.myProgram&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;java -da:&amp;lt;package&amp;gt;... myPackage.myProgram&lt;/code&gt;&lt;br /&gt;
You can have multiple &lt;code&gt;-ea/-da&lt;/code&gt; flags on the command line. For example, multiple flags allow you to enable assertions in general, but disable them in a particular package.&lt;br /&gt;
&lt;code&gt;java -ea -da:com.xyz... myPackage.myProgram&lt;/code&gt;&lt;br /&gt;
The above command enables assertions for all classes  in all packages, but then the subsequent &lt;code&gt;-da&lt;/code&gt; switch disables them for the &lt;code&gt;com.xyz&lt;/code&gt; package and its subpackages.&lt;br /&gt;
To enable assertion for one package and disable for other you can use:&lt;br /&gt;
&lt;code&gt;java -ea:&amp;lt;package1&amp;gt;... -da:&amp;lt;package2&amp;gt;... myPackage.myProgram&lt;/code&gt;&lt;br /&gt;
You can enable or disable assertions in the unnamed root package (i.e. the default package) using the following commands:&lt;br /&gt;
&lt;code&gt;java -ea:... myPackage.myProgram&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;java -da:... myPackage.myProgram&lt;/code&gt;&lt;br /&gt;
Note that when you use a package name in the &lt;code&gt;ea&lt;/code&gt; or &lt;code&gt;da&lt;/code&gt; flag, the flag applies to that package as well as its subpackages. For example,&lt;br /&gt;
&lt;code&gt;java -ea:com... -da:com.enthuware... com.enthuware.Main&lt;/code&gt;&lt;br /&gt;
The above command first enables assertions for all the classes in &lt;code&gt;com&lt;/code&gt; as well as for the classes in the subpackages of &lt;code&gt;com&lt;/code&gt;. It then disables assertions for classes in package &lt;code&gt;com.enthuware&lt;/code&gt; and its subpackages.&lt;br /&gt;
Another thing is that -ea/-da do not apply to system classes. For system classes (i.e. the classes that com bundled with the JDK/JRE), you need to use &lt;code&gt;-enablesystemassertions/-esa&lt;/code&gt; or &lt;code&gt;-disablesystemassertions/-dsa&lt;/code&gt;&lt;br /&gt;
Note that * and ** are not valid wildcards for including subpackages.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Which of these statements concerning the use of standard collection interfaces are true?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;None of the standard collection classes are thread safe.
    &lt;blockquote&gt;
      &lt;p&gt;Vector and Hashtable are.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;class HashSet implements SortedSet.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Collection classes implementing List cannot have duplicate elements.
    &lt;blockquote&gt;
      &lt;p&gt;List is meant for ordering of elements. Duplicates are allowed.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;ArrayList can only accommodate a fixed number of elements.
    &lt;blockquote&gt;
      &lt;p&gt;It grows as more elements are added.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Some operations may throw an UnsupportedOperationException.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
Some operations may throw an UnsupportedOperationException. This exception type is unchecked, and code calling these operations is not required to explicitly handle exceptions of this type.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Which of the following are standard annotations used to suppress various warnings generated by the compiler?&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;@SuppressWarning(&quot;rawtypes&quot;)&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;@SuppressWarning( {&quot;deprecation&quot;, &quot;unchecked&quot;} )&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;@SuppressWarning(&quot;deprecation&quot;, &quot;unchecked&quot;)&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Syntax is incorrect because this annotation takes only one value type String array. So, if you want to pass multiple string values, you must pass an array containing those values.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;@SafeVarargs&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;This can be used on a constructor or a method. If a constructor or a method tries to perform unsafe operations involving a var args parameter and a parameterized collection, a warning is generated. This annotation suppresses that warning. Example:&lt;/p&gt;

      &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@SafeVarargs // Not actually safe but still suppresses the warning
static void m(List&amp;lt;String&amp;gt;... stringList) {
    Object[] array = stringLists;
    List&amp;lt;Integer&amp;gt; temList = Arrays.asList(42);
    array[0] = temList; // Semantically invalid, but compiles without warnings because of the annotation
    String s = stringLists[0].get(0);  // Oh no, ClassCastException at runtime!
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;@Override&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;This annotation is used only on methods. It causes a warning to be generated if a method does not actually override any method from the base class. It does not suppress any warning.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;@Deprecated&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;This annotation causes a warning to be generated. It does not suppress any warning.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
As per JLS 11 section 9.6.4.5, &lt;code&gt;@SuppressWarning&lt;/code&gt; must support three values: &lt;code&gt;unchecked&lt;/code&gt;, &lt;code&gt;deprecation&lt;/code&gt;, and &lt;code&gt;removal&lt;/code&gt;. However, it is not an error if you use a value that is not supported by the compiler. A compiler simply ignores it.&lt;/p&gt;

&lt;p&gt;Different compilers may support more values. For example, Oracle’s javac compiler supports a large number of values (https://docs.oracle.com/en/java/javase/11/tools/javac.html). The ones that you should be aware of for the exam are: &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;rawtypes&lt;/code&gt;, &lt;code&gt;serial&lt;/code&gt;, and &lt;code&gt;varargs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This annotation is not repeatable. Therefore, you cannot use it twice on the same type. However, you can specify multiple values like this: &lt;code&gt;@SuppressWarning({ &quot;deprecation&quot;, &quot;unchecked&quot;} )&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;You are implementing a special sorting algorithm that can sort objects of different classes. Which of the following class declarations will you use?&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;java
public class SpecialSorter&amp;lt;&amp;gt; {
    ...
}
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code&gt;java
public class SpecialSorter&amp;lt;K&amp;gt; {
    ...
}
&lt;/code&gt;&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;This is the correct way to define a generic class. Within the class, you can use K as a type, for example:&lt;/p&gt;

      &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class SpecialSorter&amp;lt;K&amp;gt; {
    public void sort(ArrayList&amp;lt;K&amp;gt; items) {
        K item = items.get(0);
        // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;java
public class &amp;lt;SpecialSorter&amp;gt; {
    ...
}
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;java
public class SpecialSorter(K) {
    ...
}
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Code that uses generic collection classes can interoperate with code that uses raw collections classes because of?&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;type erasure
    &lt;blockquote&gt;
      &lt;p&gt;Type erasure means that a compiled java class does not contain any of the generic information that is present in the java file. In other words, the compiler removes the generic information from a java class when it compile it into byte code. For example, &lt;code&gt;List&amp;lt;String&amp;gt; list;&lt;/code&gt; and &lt;code&gt;List list;&lt;/code&gt; are compiled to the same byte code. Therefore, at run time, it does not matter whether you’ve used generic classes or not and this kinds of classes to interoperate because they are essentially the same class to the JVM.&lt;br /&gt;
Type erasure ensure that no new classes are created for parameterized types; consequently, generics incur no runtime overhead.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;reification
    &lt;blockquote&gt;
      &lt;p&gt;This is just the opposite of type erasure. Here, all the type information is preserved in the byte code. In Java, arrays are reified. For example,&lt;/p&gt;

      &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;ArrayList[] alArray = new ArrayList[1];
Collection[] cArray = alArray;
cArray[0] = new HashSet();
&lt;/code&gt;&lt;/pre&gt;

      &lt;p&gt;The above code will compile fine. But it will throw an &lt;code&gt;java.lang.ArrayStoreException&lt;/code&gt; at run time because the byte code contains the information that &lt;code&gt;cArray&lt;/code&gt; actually points to an array of &lt;code&gt;ArrayList&lt;/code&gt;s and not of &lt;code&gt;HasSet&lt;/code&gt;s.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;just in time compilation&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;byte code instrumentation&lt;br /&gt;
字节码操作好像有点意思。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Which of the following is/are valid functional interface?&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;java
interface F {
    default void m() {}
}
&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;It is not a valid functional interface because it does not have an abstract method.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;java
interface F {
    default void m() {}
    static void n() {}
}
&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;It is not a valid functional interface because it does not have an abstract method.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;java
interface F {
    void m();
    void n();
}
&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;It is not a valid functional interface because it has more than one abstract methods.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code&gt;java
interface F {
    default void m() { }
    abstract void n();
}
&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;The use of abstract keyword is redundant here, but it legal.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;java
interface F {
    void m() {}
}
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will not compile because the method has a body but it lacks the keyword default.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
A functional interface is an interface that contains exactly one abstract method. It may contain zero or more default methods and/or static methods in addition to the abstract method. Because a functional interface contains exactly one abstract method, you can omit the name of that method when you implement it using a lambda expression. For example, consider the following interface -&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;interface Predicate&amp;lt;T&amp;gt; {
    boolean test(T t);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The purpose of this interface is to provide a method that operates on an object of class T and return a boolean.&lt;/p&gt;

&lt;p&gt;You could have a method that takes an instance of class that  implements this interface defined like this -&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public void printImportantData(ArrayList&amp;lt;Data&amp;gt; dataList, Predicate&amp;lt;Data&amp;gt; p) {
    for (Data d: dataList) {
        if (p.test(d)) System.out.println(d);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where Data class could be as simple as &lt;code&gt;public class Data { public int value; }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, you can call the above method as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;printImportantData(al, (Data d) -&amp;gt; { return d.value &amp;gt; 1; } );&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Notice the lack of method name here. This is possible because the interface has only one abstract method so the compiler can figure out the name. This can be shortened to:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;printImportantData(al, d -&amp;gt; d.value &amp;gt; 1);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Notice that there is no declaration of d! The compiler can figure out all information it needs because the interface has only one abstract method and that method has only one parameter. So you don’t need to write all those things in your code.&lt;/p&gt;

&lt;p&gt;Compare the above approach to the old style using an inner class that does the same thing -&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;printImportantData(al, new Predicate&amp;lt;Data&amp;gt;() {
    public boolean test(Data d) {
        return d.value &amp;gt; 1;
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Predicate&lt;/code&gt; interface described above can be used anywhere there is a need to “do something with an object and return a boolean” and is actually provided by the standard java library in &lt;code&gt;java.util.function&lt;/code&gt; package. This package provides a few other useful functional interfaces.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Predicate&amp;lt;T&amp;gt;&lt;/code&gt; Represents a predicate (boolean-valued function) of one argument of type T.&lt;br /&gt;
&lt;code&gt;Consumer&amp;lt;T&amp;gt;&lt;/code&gt; Represents an operation that accepts a single input argument of type T and returns no result.&lt;br /&gt;
&lt;code&gt;Function&amp;lt;T, R&amp;gt;&lt;/code&gt; Represents a function that accepts one argument of type T and produces a result of type R&lt;br /&gt;
&lt;code&gt;Supplier&amp;lt;T&amp;gt;&lt;/code&gt; Represents a supplier of results of type T.&lt;/p&gt;

&lt;p&gt;Please see &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&quot;&gt;http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&lt;/a&gt; for learning Lambda expressions in Java.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;看段代码，判断输出：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import java.util.HashSet;

enum SIZE {
    TALL, GRANDE, JUMBO;
}

public class CoffeeMug {
    public static void main(String[] args) {
        HashSet&amp;lt;SIZE&amp;gt; hs = new HashSet&amp;lt;&amp;gt;();
        hs.add(SIZE.TALL); hs.add(SIZE.JUMBO); hs.add(SIZE.GRANDE);
        hs.add(SIZE.TALL); hs.add(SIZE.TALL); hs.add(SIZE.JUMBO);
        for(SIZE s: hs) System.out.println(s);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two concepts involved in this question:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A &lt;code&gt;Set&lt;/code&gt; (such as a &lt;code&gt;HashSet&lt;/code&gt;) does not allow duplicate elements. If you add a duplicate element, it is ignored. Thus, only three unique &lt;code&gt;SIZE&lt;/code&gt; elements are stored.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is important to understand how the &lt;code&gt;add()&lt;/code&gt; method of a Set works :&lt;br /&gt;
&lt;code&gt;boolean add(E o)&lt;/code&gt;
    Adds the specified element to this set if it is not already present (optional operation). More formally, adds the specified element, o, to this set if this set contains no element e such that &lt;code&gt;(o==null ? e==null : o.equals(e))&lt;/code&gt;. If this set already contains the specified element, the call leaves this set unchanged and returns false. In combination with the restriction on constructors, this ensures that sets never contain duplicate elements.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The order of elements is not defined in &lt;code&gt;HashSet&lt;/code&gt;. So while retrieving elements, it can return them in any order.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Remember that, &lt;code&gt;TreeSet&lt;/code&gt; does store elements in their &lt;strong&gt;natural sorted order&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Also remember that the order of Enums is the order in which they are defined. It is not necessarily same as alphabetical order of their names.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Which of the following annotations are retained for run time?&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;@SuppressWarnings&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;It is defined with &lt;code&gt;@Retention(SOURCE)&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;@Override&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;It is defined with &lt;code&gt;@Retention(SOURCE)&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code&gt;@SafeVarargs&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;It is defined with &lt;code&gt;@Retention(RUNTIME)&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code&gt;@FunctionalInterface&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;It is defined with &lt;code&gt;@Retention(RUNTIME)&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code&gt;@Deprecated&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;It is defined with &lt;code&gt;@Retention(RUNTIME)&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Your application needs to load a set of key value pairs from a database table which never changes. Multiple threads need to access this information but none of them changes it.  Which class would be the most appropriate to store such data if the values need not be keep in a sorted fashion?&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;Hashtable&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;TreeMap&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;List&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
You should know that all &lt;code&gt;Hashtable&lt;/code&gt; methods are synchronized and this compromises its performance for simultaneous reads.&lt;br /&gt;
Since no thread modifies the data, it is not efficient to use a &lt;code&gt;Hashtable&lt;/code&gt;.&lt;br /&gt;
A &lt;code&gt;HashMap&lt;/code&gt; is perfect choice because its methods are not synchronized and so it allows efficient multiple reads. &lt;code&gt;TreeMap&lt;/code&gt; is used to keep the keys sorted which makes it a little bit slower than &lt;code&gt;HashMap&lt;/code&gt;.&lt;br /&gt;
&lt;code&gt;Set&lt;/code&gt; and &lt;code&gt;List&lt;/code&gt; can’t be used since we need to store Key-value pairs.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;A programmer has written the following code to ensure that the phone number is not null and is of 10 characters:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public void processPhoneNumber(String number) {
    assert number != null &amp;amp;&amp;amp; number.length() == 10 : &quot;Invalid phone number&quot;;
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which of the given statements regarding the above code are correct?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;This is an appropriate use of assertions.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;This code will not work  in all situations.
    &lt;blockquote&gt;
      &lt;p&gt;It will not work if assertions are disabled.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;The given code is syntactically correct.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Constrains on input parameters should be enforced using assertions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
As a rule, assertions should not be used to assert the validity of input parameters of a public method. Since assertions may be disabled at the wish of the user of the program, input validation will not occur when assertions are disabled. A public method should ensure in all situations(whether assertions are enabled or disabled) that the input parameters are valid before proceeding with the rest of the code. For this reason, input validation should always be done using the standard exception mechanism:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;if(number == null || number.length() != 10) throw new RuntimeException(&quot;Invalid phone number&quot;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, assertions may be used to validate the input parameters of a private method. This is because private methods are called only by the developer of the class. Therefore, if a private method is called with an invalid parameter, this problem should be rectified at the development stage itself. It cannot occur in the production stage, so there is not need to throw an explicit exception.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;nio-2-files-class&quot;&gt;NIO 2 Files class&lt;/h3&gt;

&lt;p&gt;文件操作， &lt;code&gt;Files.copy&lt;/code&gt;方法&lt;/p&gt;

&lt;p&gt;However, &lt;code&gt;Files.isSameFile&lt;/code&gt; method doesn’t check the contents of the file. It is meant to check if the two path objects resolve to the same file or not. In this case, they are not, and so, it will return false.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public static Path copy(Path source, Path target, CopyOption... options) throws IOException
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;选项参数（options parameter)可以包括以下：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REPLACE_EXISTING&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;​      If the target file exists, then the target file is replaced if it is not a non-empty directory. If the target file exists and is a symbolic link, then the symbolic link itself, not the target of the link, is replaced.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;COPY_ATTRIBUTES&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;​      Attempts to copy the file attributes associated with this file to the target file. The exact file attributes that are copied is platform and file system dependent and therefore unspecified. Minimally, the last-modified-time is copied to the target file if supported by both the source and target file store. Copying of file timestamps may result in precision loss.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOFOLLOW_LINKS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;​      Symbolic links are not followed. If the file is a symbolic link, then the symbolic link itself, not the target of the link, is copied. It is implementation specific if file attributes can be copied to the new link.  In other words, the COPY_ATTRIBUTES option may be ignored when copying a symbolic link.&lt;br /&gt;
An implementation of this interface may support additional implementation specific options.
Coping a file is not an atomic operation. If an &lt;code&gt;IOException&lt;/code&gt; is thrown then it’s possible that the target file is incomplete or some of its file attributes have not been copied from the source file. When the REPLACE_EXISTING option is specified and the target file exists, then the target file is replaced. The check for the existence of the creation of the new file may not be atomic with respect to other file system activities.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public static Path move(Path source, Path target, CopyOption... options) throws IOException
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Move or rename a file to a target file.
By default, this method attempts to move the file to the target file, failing if the target file exists except if the source and target are the same file, in which case this method has no effect. If the file is a symbolic link then the symbolic link itself, not the target of the link, is moved. This method may be invoked to move an empty directory. In some implementations a directory has entries for special files or links that are created when the directory is created. In such implementations a directory is considered empty when only the special entries exist. When invoked to move a directory that is not empty then the directory is moved if it does not require moving the entries in the directory. For example, renaming a directory on the same FileStore will usually not required moving the entries in the directory. When moving a directory requires that its entries be moved then this method fails (by throwing an &lt;code&gt;IOException&lt;/code&gt;). To move a file tree may involve copying rather than moving directories and this can be done using the copy method in conjunction with the &lt;code&gt;Files.walkFileTree&lt;/code&gt; utility method.&lt;/p&gt;

&lt;p&gt;The options parameter may include any of the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REPLACE_EXISTING&lt;/strong&gt; If the target file exists, then the target file is replaced if it is not a non-empty directory. If the target file exists and is a symbolic link, then the symbolic link itself, not the target of the link, is replaced.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ATOMIC_MOVE&lt;/strong&gt; The move is performed as an atomic file system operation and all other options are ignored. If the target file exists then it is implementation specific if the existing file is replaced or this method fails by throwing an &lt;code&gt;IOException&lt;/code&gt;. If the move cannot be performed as an atomic file system operation then &lt;code&gt;AtomicMoveNotSupportedException&lt;/code&gt; is thrown. This can arise, for example, when the target location is on a different FileStore and would require that the file be copied, or target location is associated with a different provider to this object. An implementation of this interface may support additional implementation specific options.&lt;/p&gt;

&lt;p&gt;Where the move requires that the file be copied then the last-modified-time is copied to the new file. An implementation may also attempt to copy other file attributes but is not required to fail if the file attributes cannot be copied. When the move is performed as a non-atomic operation, and an &lt;code&gt;IOException&lt;/code&gt; is thrown, then the state of the files is not defined. The original file and the target file may both exist, the target file may be incomplete or some of its file attributes may not been copied from the original file.&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Wed, 26 Feb 2020 15:15:00 +0000</pubDate>
        <link>https://zwt.io/2020/02/26/ocp-mock-test1-review/</link>
        <guid isPermaLink="true">https://zwt.io/2020/02/26/ocp-mock-test1-review/</guid>
        
        <category>Java</category>
        
        <category>1Z0-816</category>
        
        <category>认证考试</category>
        
        
      </item>
    
      <item>
        <title>OCP 816 考点速记</title>
        <description>&lt;p&gt;&lt;strong&gt;Unmodifiable collections using of/copyOf and Collections.unmodifiableXXX methods&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;java.util.List&lt;/code&gt; and &lt;code&gt;java.util.Set&lt;/code&gt; have &lt;code&gt;of&lt;/code&gt; and &lt;code&gt;copyOf&lt;/code&gt; static factory methods that provide a convenient way to create unmodifiable lists/sets.&lt;/p&gt;

&lt;p&gt;The of methods accept either an array or multiple individual parameters. If you pass it a collection, it will be treated as a regular object i.e. it will return a list/set containing the same collection object instead of returning a list/set containing the objects that the passed collection contains.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;copyOf&lt;/code&gt;, on the other hand, accepts only a &lt;code&gt;Collection&lt;/code&gt;. It iterates through the passed &lt;code&gt;Collection&lt;/code&gt; and adds all the elements of that &lt;code&gt;Collection&lt;/code&gt; in the returned list/set. &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Here are a few important points about these methods:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;They return unmodifiable copies of the original List/Set. Thus, any operation that tries to modify the returned list throws an &lt;code&gt;java.lang.UnsupportedOperationException&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The list/set returned by the &lt;code&gt;of/copyOf&lt;/code&gt; methods is completely independent of the original collection. Thus, if you modify the original collection after passing it to &lt;code&gt;of/copyOf&lt;/code&gt; methods, those changes will not be reflected in the list returned by the &lt;code&gt;of/copyOf&lt;/code&gt; methods.&lt;/li&gt;
  &lt;li&gt;They do not support &lt;code&gt;null&lt;/code&gt; elements. Thus, if your array contains a &lt;code&gt;null&lt;/code&gt; and if you try to create a &lt;code&gt;List&lt;/code&gt; using &lt;code&gt;List.of&lt;/code&gt;, it will throw a &lt;code&gt;NullPointerException&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Collections.unmodifiableXXX&lt;/code&gt; methods&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;java.utils.Collections&lt;/code&gt; class also has several variations of &lt;code&gt;unmodifiableXXX&lt;/code&gt; static methods (such as &lt;code&gt;unmodifiableList(List )&lt;/code&gt;, &lt;code&gt;unmodifiableSet(Set )&lt;/code&gt;, and &lt;code&gt;unmodifiableMap(Map )&lt;/code&gt; ). These method return an unmodifiable view of the underlying collection. The fundamental difference between &lt;code&gt;Collections.unmodifiableXXX&lt;/code&gt; and &lt;code&gt;List.of/copyOf&lt;/code&gt; methods is that &lt;code&gt;Collections.unmodifiableList&lt;/code&gt; returns a view (instead of a copy) into the underlying list. Which means, if you make any changes to the underlying list after creating the view, those changes will be visible in the view. Further, &lt;code&gt;Collections.unmodifiableList&lt;/code&gt; has no problem with nulls.&lt;/p&gt;

&lt;p&gt;The word unmodifiable in &lt;code&gt;unmodifiableXXX&lt;/code&gt; method name refers to the fact that you cannot modify the view using a reference to view.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Top Down Approach for modularzing an application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While modularizing an app in a top-down approach, you need to remember the following points -&lt;/p&gt;

&lt;p&gt;\1. Any jar file can be converted into an automatic module by simply putting that jar on the module-path instead of the classpath. Java automatically derives the name of this module from the name of the jar file.&lt;/p&gt;

&lt;p&gt;\2. Any jar that is put on classpath (instead of module-path) is loaded as a part of the “unnamed” module.&lt;/p&gt;

&lt;p&gt;\3. An explicitly named module (which means, a module that has an explicitly defined name in its module-info.java file) can specify dependency on an automatic module just like it does for any other module i.e. by adding a requires &lt;code&gt;&amp;lt;module-name&amp;gt;;&lt;/code&gt; clause in its module info but it cannot do so for the unnamed module because there is no way to write a requires clause without a name. In other words, a named module can access classes present in an automatic module but not in the unnamed module.&lt;/p&gt;

&lt;p&gt;\4. Automatic modules are given access to classes in the unnamed module (even though there is no explicitly defined module-info and requires clause in an automatic module). In other words, a class from an automatic module will be able to read a class in the unnamed module without doing anything special.&lt;/p&gt;

&lt;p&gt;\5. An automatic module exports all its packages and is allowed to read all packages exported by other modules. Thus, an automatic module can access: all packages of all other automatic modules + all packages exported by all explicitly named modules + all packages of the unnamed module (i.e. classes loaded from the classpath).&lt;/p&gt;

&lt;p&gt;Thus, if your application jar &lt;strong&gt;A&lt;/strong&gt; directly uses a class from another jar &lt;strong&gt;B&lt;/strong&gt;, then you would have to convert &lt;strong&gt;B&lt;/strong&gt; into a module (either named or automatic). If &lt;strong&gt;B&lt;/strong&gt; uses another jar &lt;strong&gt;C&lt;/strong&gt;, then you can leave &lt;strong&gt;C&lt;/strong&gt; on the class path if &lt;strong&gt;B&lt;/strong&gt; hasn’t yet been migrated into a named module. Otherwise, you would have to convert &lt;strong&gt;C&lt;/strong&gt; into an automatic module as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;
There are two possible ways for an automatic module to get its name:
\1. When an Automatic-Module-Name entry is available in the manifest, its value is the name of the automatic module.
\2. Otherwise, a name is derived from the JAR filename (see the ModuleFinder JavaDoc for the derivation algorithm) - Basically, hyphens are converted into dots and the version number part is ignored. So, for example, if you put mysql-connector-java-8.0.11.jar on module path, its module name would be mysql.connector.java&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Bottom Up Approach for modularzing an application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While modularizing an app using the bottom-up approach, you basically need to convert lower level libraries into modular jars before you can convert the higher level libraries. For example, if a class in &lt;strong&gt;A.jar&lt;/strong&gt; directly uses a class from &lt;strong&gt;B.jar&lt;/strong&gt;, and a class in &lt;strong&gt;B.jar&lt;/strong&gt; directly uses a class from &lt;strong&gt;C.jar&lt;/strong&gt;, you need to first modularize &lt;strong&gt;C.jar&lt;/strong&gt; and then &lt;strong&gt;B.jar&lt;/strong&gt; before you can modularize &lt;strong&gt;A.jar&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Thus, bottom up approach is possible only when the dependent libraries are modularized already.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Java_Module_Execution_Options&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You need to know about three command line options for running a class that is contained in a module:&lt;/p&gt;

&lt;p&gt;\1. &lt;strong&gt;–module-path&lt;/strong&gt; or -p: This option specifies the location(s) of the module(s) that are required for execution. This option is very versatile. You can specify exploded module directories, directories containing modular jars, or even specific modular or non-modular jars here. The path can be absolute or relative to the current directory. For example, –module-path c:/javatest/output/mathutils.jar or –module-path mathutils.jar&lt;/p&gt;

&lt;p&gt;You can also specify the location where the module’s files are located. For example, if your module is named abc.math.utils and this module is stored in c:\javatest\output, then you can use: –module-path c:/javatest/output. Remember that c:\javatest\output directory must contain abc.math.utils directory and the module files (including module-info.class) must be present in their appropriate directory structure under abc.math.utils directory.&lt;/p&gt;

&lt;p&gt;You can specify as many jar files or module locations separated by path separator (; on windows and : on *nix) as required.&lt;/p&gt;

&lt;p&gt;NOTE: -p is the short form for –module-path.(Observe the single and double dashes).&lt;/p&gt;

&lt;p&gt;\2. &lt;strong&gt;–module&lt;/strong&gt; or &lt;strong&gt;-m&lt;/strong&gt;: This option specifies the module that you want to run. For example, if you want to run abc.utils.Main class of abc.math.utils module, you should write –module abc.math.utils/abc.utils.Main
If a module jar specifies the Main-Class property its MANIFEST.MF file, you can omit the main class name from –module option. For example, you can write, –module abc.math.utils instead of –module abc.math.utils/abc.utils.Main.&lt;/p&gt;

&lt;p&gt;NOTE: -m is the short form for –module.(Observe the single and double dashes).&lt;/p&gt;

&lt;p&gt;Thus,
java –module-path mathutils.jar –module abc.math.utils/abc.utils.Main is same as
java -p mathutils.jar -m abc.math.utils/abc.utils.Main&lt;/p&gt;

&lt;p&gt;NOTE: It is possible to treat modular code as non-modular by ignoring module options altogether. For example, if you want to run the same class using the older classpath option, you can do it like this:
java -classpath mathutils.jar abc.utils.Main&lt;/p&gt;

&lt;p&gt;\3. &lt;strong&gt;-classpath&lt;/strong&gt;: Remember that modular code cannot access code present on the -classpath but “automatic modules” are an exception to this rule. When a non-modular jar is put on –module-path, it becomes an “automatic module” but it can still access all the modular as well as non-modular code. In other words, a class from an automatic module can access classes present on –module-path as well as on -classpath without having any “requires” clause (remember that there is no module-info in automatic modules).
Thus, if your modular jar A depends on a non-modular jar B, you have to put that non-modular jar B on –module-path. You must also add appropriate requires clause in your module A’s module-info otherwise compilation of your module will not succeed. Further, if the non-modular jar B depends on another non-modular jar C, then the non-modular jar C may be put on the classpath or module-path.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Java_Module_Compilation_Options&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For compiling a Java class that is part of a module, you need to remember the following five command line options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;–module-source-path: This option is used to specify the location of the module source files. It should point to the parent directory of the directory where module-info.java of the module is stored. For example, if your module name is moduleA, then the module-info.java for this module would be in moduleA directory and if moduleA directory exists in src directory, then –module-source-path should contain the src directory i.e. –module-source-path src&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If moduleA depends on another module named moduleB, and if moduleB directory exists in src2 directory, you can add this directory in –module-source-path as well i.e. –module-source-path src;src2. javac will compile the required files of src2 as well if the source code of moduleB is organized under src2 correctly.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;-d: This option is required when you use the –module-source-path option. It is used to specify the output directory. This is the directory where javac will generate the module’s package driven directory structure and the class files for the sources. For example, if you specify out as the output directory, javac will create a directory under out with the same name as the name of the module and will create class files with appropriate package driven directory structure under that directory.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;–module or -m: This option is used when you want to compile all the source files of a particular module. This option is helpful when you want to compile all the files at once without listing any of the source files of a module individually in the command.
For example, if you have two java files in moduleA, stored under moduleA\a\A1.java and moduleA\a\A2.java, you can compile both of them at the same time using the command: java –module-source-path src -d out –module moduleA
Javac will find out all the java source files under moduleA and compile all of them. It will create the class files under the output directory specified in -d option i.e. out. Thus, the out directory will now have two class files - moduleA/a/A1.class and moduleA/a/A2.class.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;–module-path or -p: This option specifies the location(s) of any other module upon which the module to be compiled depends and is very versatile. You can specify the exploded module directories, directories containing modular jars, or specific modular jars here. For example, if you want to compile moduleA and it depends on another module named abc.util packaged as utils.jar located in thirdpartymodules directory then your module-path can be thirdpartymodules or thirdpartymodules/utils.jar. That both the following two commands will work:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;javac –module-source-path src –module-path thirdpartymodules -d out –module moduleA
and
javac –module-source-path src –module-path thirdpartymodules\utils.jar -d out –module moduleA&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;If your module depends on a non-modular third party jar, you need to do two things -Put that third party jar in –module-path.
Putting a non-modular jar in –module-path causes that jar to be loaded as an “automatic module”. The name of this module is assumed to be same as the name of the jar minus any version numbers. For example, if you put mysql-driver-6.0.jar in –module-path, it will be loaded as an automatic module with name mysql.driver. Name derivation is explained in detail in java.lang.module.ModuleFinder JavaDoc but for the exam, just remember that hyphens are converted into dots and the version number and extension part is removed.
It is also possible for a non-modular jar to specify its module name using Automatic-Module-Name: &lt;code&gt;&amp;lt;module name&amp;gt;&lt;/code&gt; entry to the jar’s MANIFEST.MF.Add a requires &lt;code&gt;&amp;lt;module-name&amp;gt;;&lt;/code&gt; clause in module-info of your module.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;-classpath&lt;/strong&gt;: This option is used for compilation of non-modular code. If you are compiling regular non-modular code but that code depends on some classes, then you can put those classes or jars on the classpath using -classpath option.
&lt;strong&gt;Note:&lt;/strong&gt; This option is not helpful for compilation of modular code because classes of a modular cannot see classes on classpath. Modular code can only see other modular code. That is why, non-modular classes have to be converted into “automatic modules” and put on –module-path as explained above.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;enum points&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You need to know the following facts about enums:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Enum constructor is always private. You cannot make it public or protected. If an enum type has no constructor declarations, then a private constructor that takes no parameters is automatically provided.&lt;/li&gt;
  &lt;li&gt;An enum is implicitly final, which means you cannot extend it.&lt;/li&gt;
  &lt;li&gt;You cannot extend an enum from another enum or class because an enum implicitly extends java.lang.Enum. But an enum can implement interfaces.&lt;/li&gt;
  &lt;li&gt;Since enum maintains exactly one instance of its constants, you cannot clone it. You cannot even override the clone method in an enum because java.lang.Enum makes it final.&lt;/li&gt;
  &lt;li&gt;Compiler provides an enum with two public static methods automatically - values() and valueOf(String). The values() method returns an array of its constants and valueOf() method tries to match the String argument exactly (i.e. case sensitive) with an enum constant and returns that constant if successful otherwise it throws java.lang.IllegalArgumentException.&lt;/li&gt;
  &lt;li&gt;By default, an enum’s toString() prints the enum name but you can override it to print anything you want.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following are a few more important facts about java.lang.Enum which you should know:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It implements java.lang.Comparable (thus, an enum can be added to sorted collections such as SortedSet, TreeSet, and TreeMap).&lt;/li&gt;
  &lt;li&gt;It has a method ordinal(), which returns the index (starting with 0) of that constant i.e. the position of that constant in its enum declaration.&lt;/li&gt;
  &lt;li&gt;It has a method name(), which returns the name of this enum constant, exactly as declared in its enum declaration.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;AutoCloseable_points&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You need to know the following points regarding try-with-resources statement for the exam:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The resource class must implement java.lang.AutoCloseable interface. Many standard JDK classes such as implement java.io.Closeable interface, which extends java.lang.AutoCloseable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AutoCloseable has only one method - public void close() throws Exception.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Resources are closed at the end of the try block and before any catch or finally block.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Resources are not even accessible in the catch or finally block. For example:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;try(Device d = new Device())
{
   d.read();
}finally{
   d.close(); //This will not compile because d is not accessible here.
}
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;Note that the try-with-resource was enhanced in Java 9 and it now allows you to use a variable declared before the try statement in the try-with-resource block. In this case, of course, the variable is accessible after the try block but the object referred to by it has been closed. For example, the following is valid since Java 9:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;Device d = new Device();
try(d){ //valid since Java 9
  ...
}finally{
   d.close(); //this will compile but may not work correctly because the object referred to by d has already been closed.
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Resources are closed in the reverse order of their creation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Resources are closed even if the code in the try block throws an exception.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;java.lang.AutoCloseable’s close() throws Exception but java.io.Closeable’s close() throws IOException.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If code in try block throws exception and an exception also thrown while closing is resource, the exception thrown while closing the resource is suppressed. The caller gets the exception thrown in the try block.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;JDBC URL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The format of a JDBC URL is : &lt;code&gt;jdbc:&amp;lt;subprotocol&amp;gt;:&amp;lt;subname&amp;gt;&lt;/code&gt;
where subprotocol defines the kind of database connectivity mechanism that may be supported by one or more drivers. The contents and syntax of the subname will depend on the subprotocol.&lt;/p&gt;

&lt;p&gt;Here are a few examples of commonly used urls for connecting to derby db (the Java database that comes bundled with various IDEs such as Netbeans) and Mysql:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;jdbc:derby:sample
jdbc:derby://localhost:1527/sample
jdbc:mysql://localhost:1527/sample
jdbc:mysql://192.168.0.100:3306/testdb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Observe that a JDBC url always starts with jdbc: and has at least three components separated by a two colons.&lt;/p&gt;

&lt;p&gt;It also usually includes the hostname or address and the port number on which the database is listening for the requests but that is not necessary.&lt;/p&gt;

&lt;p&gt;Most drivers allow adding more options to the URL in the subname part, for example the following JDBC url for Oracle DB specifies the type of the jdbc driver : &lt;br /&gt;
jdbc:oracle:thin:@localhost:1521:testdb&lt;/p&gt;

&lt;p&gt;Userid and password are usually supplied separately from the URL but some drivers allow them to be specified in the URL itself. For example: &lt;br /&gt;
jdbc:oracle:thin:scott/mypassword@//myhost:1521/orcl&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Command Line Switches for Assertions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Although not explicitly mentioned in the exam objectives, OCP Java 11 Part 2 Exam requires you to know about the switches used to enable and disable assertions. Here are a few important points that you should know:&lt;/p&gt;

&lt;p&gt;Assertions can be enabled or disabled for specific classes and/or packages. To specify a class, use the class name. To specify a package, use the package name followed by “…” (three dots also known as ellipses):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;java -ea:&amp;lt;class&amp;gt; myPackage.myProgram&lt;/code&gt;
&lt;code&gt;java -da:&amp;lt;package&amp;gt;... myPackage.myProgram&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can have multiple -ea/-da flags on the command line. For example, multiple flags allow you to enable assertions in general, but disable them in a particular package.
&lt;code&gt;java -ea -da:com.xyz... myPackage.myProgram&lt;/code&gt;
The above command enables assertions for all classes in all packages, but then the subsequent -da switch disables them for the com.xyz package and its subpackages.&lt;/p&gt;

&lt;p&gt;To enable assertion for one package and disable for other you can use:
&lt;code&gt;java -ea:&amp;lt;package1&amp;gt;... -da:&amp;lt;package2&amp;gt;... myPackage.myProgram&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can enable or disable assertions in the unnamed root package (i.e. the default package) using the following commands:
&lt;code&gt;java -ea:... myPackage.myProgram&lt;/code&gt;
&lt;code&gt;java -da:... myPackage.myProgram&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that when you use a package name in the ea or da flag, the flag applies to that package as well as its subpackages. For example,
&lt;code&gt;java -ea:com... -da:com.enthuware... com.enthuware.Main&lt;/code&gt;
The above command first enables assertions for all the classes in com as well as for the classes in the subpackages of com. It then disables assertions for classes in package com.enthuware and its subpackages.&lt;/p&gt;

&lt;p&gt;Another thing is that &lt;code&gt;-ea/-da&lt;/code&gt; do not apply to system classes. For system classes (i.e. the classes that come bundled with the JDK/JRE), you need to use &lt;code&gt;-enablesystemassertions/-esa&lt;/code&gt; or &lt;code&gt;-disablesystemassertions/-dsa&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that &lt;strong&gt;*** and ****&lt;/strong&gt; are not valid wildcards for including subpackages.&lt;/p&gt;

</description>
        <pubDate>Wed, 26 Feb 2020 01:15:00 +0000</pubDate>
        <link>https://zwt.io/2020/02/26/ocp-816-learning-points/</link>
        <guid isPermaLink="true">https://zwt.io/2020/02/26/ocp-816-learning-points/</guid>
        
        <category>Java</category>
        
        <category>1Z0-816</category>
        
        <category>认证考试</category>
        
        
      </item>
    
      <item>
        <title>816 基准测试回顾</title>
        <description>&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Which of the following annotations are retained for run time?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;@SuppressWarnings
    &lt;blockquote&gt;
      &lt;p&gt;It is defined with @Retention(SOURCE)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;@Override
    &lt;blockquote&gt;
      &lt;p&gt;It is defined with @Retention(SOURCE)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;@SafeVarargs
    &lt;blockquote&gt;
      &lt;p&gt;It is defined with @Retention(RUNTIME)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;@FunctionalInterface
    &lt;blockquote&gt;
      &lt;p&gt;It is defined with @Retention(RUNTIME)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;@Deprecated
    &lt;blockquote&gt;
      &lt;p&gt;It is defined with @Retention(RUNTIME)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Your application needs to load a set of key value pairs from a database table which never changes. Multiple threads need to access this information but none of them changes it.&lt;br /&gt;
Which class would be the most appropriate to store such data if the values need not be kept in a sorted fashion?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Hashtable&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;HaspMap&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Set&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;TreeMap&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;List&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
You should know that all &lt;code&gt;Hashtable&lt;/code&gt; methods are synchronized and this compromises its performance for simultaneous reads.&lt;br /&gt;
Since not thread modifies the data, it is not efficient to use a &lt;code&gt;Hashtable&lt;/code&gt;.&lt;br /&gt;
A &lt;code&gt;HashMap&lt;/code&gt; is a perfect choice because its methods are not synchronized and so it allows efficient multiple reads. TreeMap is used to keep the keys sorted which makes it a little bit slower than &lt;code&gt;HashMap&lt;/code&gt;.&lt;br /&gt;
&lt;code&gt;Set&lt;/code&gt; and &lt;code&gt;List&lt;/code&gt; can’t be used since we need to store Key-value pairs.  &lt;!--more--&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; A programmer has written the following code to ensure that the phone number is not null and is of 10 characters:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public void processPhoneNumber(String number) {
  assert number != null &amp;amp;&amp;amp; number.length() == 10 : &quot;Invalid phone number&quot;;
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which of the given statements regarding the above code are correct?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;This is an appropriate use of assertions.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;This code will not work in all situations.
    &lt;blockquote&gt;
      &lt;p&gt;It will not work if assertions are disabled.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;The given code is syntactically correct.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Constrains on input parameters should be enforced using assertions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
As a rule, assertions should not be used to assert the validity of the input public method. Since assertions may be disabled at wish of the user of the program, input validation will not occur when assertions are disabled. A public method should ensure in all situations(whether assertions are enabled or disabled) that the input parameters are valid before proceeding with the rest of the code. For this reason, input validation should always be done using the standard exception mechanism:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;if(number == null || number.length() != 10) throw new RuntimeException(&quot;Invalid phone number&quot;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, assertions may be used to validate the input parameters of a private method. This is because private methods are called only by the developer of the class. Therefore, if a private method is called with an invalid parameter, this problem should be rectified at the development stage itself. It cannot occur in the production stage, so there is no need to throw an explicit exception.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;8.&lt;/strong&gt; Which is/are the root interface(s) for all collection related interfaces?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;BaseCollection&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Collection&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;List&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Set&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Map&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
All name-value maps such as &lt;code&gt;java.util.HashMap&lt;/code&gt; and &lt;code&gt;java.util.TreeMap&lt;/code&gt; implement &lt;code&gt;java.util.Map&lt;/code&gt; and all collections such as &lt;code&gt;java.util.ArrayList&lt;/code&gt;, and &lt;code&gt;java.util.LinkedList&lt;/code&gt; implement &lt;code&gt;java.util.Collection&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;9.&lt;/strong&gt; You have a collection (say, an ArrayList) which is read by multiple reader threads and which is modified by a single writer thread. The collection allows multiple concurrent reads but does not tolerate concurrent read and write. Which of the following strategies will you use to obtain best performance?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;synchronize all access to the collection.
    &lt;blockquote&gt;
      &lt;p&gt;While this is a valid approach, if you do this then even the reader threads will not be able to read concurrently. This will drastically reduce performance.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;make the collection variable final.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;make the collection variable final and volatile.
    &lt;blockquote&gt;
      &lt;p&gt;Making it final and volatile will only ensure that all threads access the same collection object but it will not prevent simultaneous access by reader and writer threads.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Wrap the collection into its synchronized version using Collections.synchronizedCollection().
    &lt;blockquote&gt;
      &lt;p&gt;This is same as option 1 and has the same issue.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Encapsulate the collection into another class and use ReadWriteLock to manage read and write access.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
Since the collection allows multiple simultaneous reads, it is ok for multiple threads to access the collection simultaneously if they are not modifying the collection. On the other hand, a writer thread must get sole custody of the collection before modifying. This can be easily achieved by using a ReadWriteLock. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class MultipleReadersSingleWriter {
    private final ArrayList&amp;lt;String&amp;gt; theList = new ArrayList&amp;lt;String&amp;gt;();
    //Note that ReadWriteLock is an interface.
    private final ReadWriteLock rwl = new ReentrantReadWriteLock();
    private final Lock r = rwl.readLock();
    private final Lock w = rwl.writeLock();
    public String read(){
        r.lock();
        try{
            System.out.println(&quot;reading&quot;);
            if(theList.isEmpty()) return null;
            else return theList.get(0);
        }finally{
            r.unlock();
        }
    }
    public void write(String data){
        w.lock();
        try{
            System.out.println(&quot;Written &quot;+data);
            theList.add(data);
        }finally{
            w.unlock();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;11.&lt;/strong&gt; Which variables of the encapsulating class can an inner class access, if the inner class is defined in a instance method of the encapsulating class?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;All static variables.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;All final instance variables.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;All instance variables.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;All automatic variables.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;All final and effectively final automatic variables.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt; &lt;br /&gt;
Consider the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class TestClass
{
  static int si = 10; int ii = 20;
  public void inner() {
    int ai = 30; // automatic variable
    ai = 31; // ai is not effectively final anymore
    final int fai = 40; // automatic final variable
    class Inner {
      public Inner() { System.out.println(si&quot; &quot;+ii+&quot; &quot;+fai); }
    }
    new Inner();
  }
  public static void main(String[] args) { ne TestClass().inner(); }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As method &lt;code&gt;inner()&lt;/code&gt; is an instance method(i.e. non-static method), &lt;code&gt;si&lt;/code&gt;, &lt;code&gt;ii&lt;/code&gt;, and &lt;code&gt;fai&lt;/code&gt; are accessible in class &lt;code&gt;Inner&lt;/code&gt;. Note that &lt;code&gt;ai&lt;/code&gt; is not accessible because it is not effectively final. If the line &lt;code&gt;ai = 31;&lt;/code&gt; did not exist, &lt;code&gt;ai&lt;/code&gt; would have been accessible. If method &lt;code&gt;inner()&lt;/code&gt; were a static method, &lt;code&gt;ii&lt;/code&gt; would have been inaccessible. Prior to Java 8, only final local variables were accessible to the inner class but in Java 8, event effectively final local variables of the method are accessible to the inner defined in that method as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12.&lt;/strong&gt; Which interface would you use to represent a collection having non-unique objects in the order of insertion?&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;List&lt;br /&gt;
java.util.List&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;java.util.List&lt;/code&gt; interface is implemented by collections that maintain sequences of possibly non-unique elements. Elements retain their ordering in the sequence. Collection classes implementing &lt;code&gt;SortedSet&lt;/code&gt; maintain their elements sorted in the set.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;14.&lt;/strong&gt; Identify the correct statement about i18n.&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;I18N class allows you to port your code from multiple regions and/or languages.
    &lt;blockquote&gt;
      &lt;p&gt;There is no class named I18N.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;You should use Locale and formatter objects such as NumberFormat and DateFormat to generate locale specific output.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;The i18n method of NumberFormat and DateFormat allows you to generate locale specific output.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Using default locale for NumberFormat and DateFormat automatically ensures that the formatted text will be localized to the location - [ ] setting of the machine on which the code is run.(Assuming the default locale hasn’t been explicitly changed by any means.)
    &lt;blockquote&gt;
      &lt;p&gt;When not passed to the &lt;code&gt;getInstance()&lt;/code&gt; method, the default &lt;code&gt;Locale&lt;/code&gt; is used, which is same as the one set by the operating system. If you want to change it,(for example, if you want to generate French format on a US machine), you must create a new &lt;code&gt;Locale(&quot;fr&quot;, &quot;FR&quot;)&lt;/code&gt; object and use the following methods to get an appropriate NumberFormat or DateFormat instance -&lt;br /&gt;
NumberFormat: &lt;code&gt;NumberFormat getInstance(Locale locale)&lt;/code&gt;&lt;br /&gt;
DateFormat: &lt;code&gt;DateFormat getDateInstance(int style, Locale locale)&lt;/code&gt;&lt;br /&gt;
Note that DateFormat does not have &lt;code&gt;getInstance(Locale locale)&lt;/code&gt; method.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;i18n stands for Internationalization and it is handled automatically by Java.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;15.&lt;/strong&gt; Which of the following statements are correct regarding abstract classes and interfaces?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;An abstract class can have private as well as static methods while an interface can not have static methods.
    &lt;blockquote&gt;
      &lt;p&gt;Interfaces can have static methods(public as well as private). Interfaces cannot have protected methods. It cannot have non-public fields and instance fields.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;An abstract class cannot implement multiple interfaces while an interface can extend multiple interfaces.
    &lt;blockquote&gt;
      &lt;p&gt;An abstract class(or any class for that matter) can implement any number of interfaces.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Abstract classes can have abstract methods but interface cannot.
    &lt;blockquote&gt;
      &lt;p&gt;Both abstract classes and interfaces can have abstract as well as non-abstract methods. The difference is that by default(i.e. when no modifier is specified), the methods of an abstract class have “default” access and are non-abstract(i.e. must have a body), while the methods of an interface are public and abstract.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Abstract classes can have instance fields but interfaces can’t
    &lt;blockquote&gt;
      &lt;p&gt;Fields of an interface are always public, static, and final.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;An abstract class can have final methods but an interface cannot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;16.&lt;/strong&gt; Which of the following statements are correct?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Assertions can be enabled or disabled on a class basis.
    &lt;blockquote&gt;
      &lt;p&gt;Yes, it can be enabled/disabled for class as well as package basis using -ea or -da flags.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Assertions are appropriate to check whether method parameters are valid.
    &lt;blockquote&gt;
      &lt;p&gt;Since it does not say which kind of methods (public or private), you should assume all methods.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Conditional compilation is used to allow an application that uses assertions to run with maximum performance.
    &lt;blockquote&gt;
      &lt;p&gt;Assertion can be disabled without recompiling the code.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;When an assertion fails, a programmer may either throw an exception or simply return from the method.
    &lt;blockquote&gt;
      &lt;p&gt;When an assertion fails, a programmer should always throw the exception.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
An assertion signifies a basic assumption made by the programmer that he/she believes to be true at all times. It is never a wise idea to try to recover when an assertion fails because that is the whole purpose of assertions: that the program should fail if that assumption fails.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;17.&lt;/strong&gt; Complete the code so that the user can enter a password on the command line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import java.io.Console;
public class TestClass {
  public static void main(String[] args) throws Exception {
    Console c = System.console();
    char[] cha = c.readPassword(&quot;Please enter password:&quot;);
    String pwd = new String(cha);
    System.out.println(&quot;pwd = &quot;+pwd);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;1.&lt;/strong&gt; &lt;code&gt;Console&lt;/code&gt; class is in &lt;code&gt;java.io&lt;/code&gt; package.&lt;br /&gt;
&lt;strong&gt;2.&lt;/strong&gt; Correct way to retrieve the &lt;code&gt;Console&lt;/code&gt; object is &lt;code&gt;System.console();&lt;/code&gt; There is only one &lt;code&gt;Console&lt;/code&gt; object so &lt;code&gt;new Console();&lt;/code&gt; doesn’t make sense. And therefore, Console’s constructor is not public.&lt;br /&gt;
&lt;strong&gt;3.&lt;/strong&gt; You can read user’s input using either &lt;code&gt;readLine()&lt;/code&gt; or &lt;code&gt;readPassword()&lt;/code&gt;. Here, since you are reading password, &lt;code&gt;readPassword()&lt;/code&gt; should be used. &lt;code&gt;readPassword()&lt;/code&gt; ensures that the keys typed by the user aren’t echoed to the command prompt.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;19.&lt;/strong&gt; What will the following code print?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;ReentrantLock rlock = new ReentrantLock();
boolean f1 = rlock.lock();
System.out.println(f1);
boolean f2 = rlock.lock();
System.out.println(f2);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;    &lt;blockquote&gt;
      &lt;p&gt;true&lt;br /&gt;
true&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;    &lt;blockquote&gt;
      &lt;p&gt;true&lt;br /&gt;
false&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;    &lt;blockquote&gt;
      &lt;p&gt;true&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;It will not compile.
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;java.util.concurrent.locks.Lock&lt;/code&gt; interface’s &lt;code&gt;lock()&lt;/code&gt; method returns &lt;code&gt;void&lt;/code&gt;, while its &lt;code&gt;tryLock()&lt;/code&gt; returns &lt;code&gt;boolean&lt;/code&gt;.&lt;br /&gt;
Had the code been:&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;ReentrantLock rlock = new ReentrantLock();
boolean f1 = rlock.tryLock();
System.out.println(f1);
boolean f2 = rlock.tryLock();
System.out.println(f2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It would have printed:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;true&lt;br /&gt;
true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that &lt;code&gt;java.util.concurrent.locks.ReentrantLock&lt;/code&gt; class implements &lt;code&gt;java.util.concurrent.locks.Lock&lt;/code&gt; interface.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;21.&lt;/strong&gt; Anonymous inner classes always extend directly from the Object class.&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;True&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;False&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
When you create an anonymous class for an interface, it extends from Object. For example,&lt;br /&gt;
button.addActionListener( new ActionListener() {  public void actionPerformed(ActionEvent ae) { } }  );&lt;br /&gt;
But if you make an anonymous class from another class then it extends from that class. For example, consider the following class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;class MyListener implements ActionListener {
  public void actionPerformed(ActionEvent ae) {
    System.out.println(&quot;MyListener class&quot;);
  }
}

button.addActionListener(new MyListener() {
  public void actionPerformed(ActionEvent ea) {
    System.out.println(&quot;Anonymous Listener class&quot;);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the anonymous class actually extends from MyListener class and successfully overrides the actionPerformed() method.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;22.&lt;/strong&gt; Consider the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Locale myLoc = new Locale(&quot;fr&quot;, &quot;FR&quot;);
ResourceBundle rb = ResourceBundle.getBundle(&quot;appmessages&quot;, myLoc);
//INSERT CODE HERE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which of the following lines of code will assign a ResourceBundle for a different Locale to rb than the one currently assigned?&lt;br /&gt;
(Assume appropriate import statements)&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;rb = ResourceBundle.getBundle(“appmessages”, new Locale(“ch”, “CH”));&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;rb = ResourceBundle.getBundle(“appmessages”, CHINA);
    &lt;blockquote&gt;
      &lt;p&gt;In this question, the import statements are not specified. If appropriate imports are present (i.e. import static java.util.Locale.*; ), this will work fine. In the exam, you may see a couple of question that have such ambiguous options. In our opinion, it is best not to assume anything special or out of ordinary. Therefore, this option should not be selected.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;myLoc.setLocale(Locale.CHINA);
    &lt;blockquote&gt;
      &lt;p&gt;There is no setLocale() method in Locale.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;myLoc.setLocale(new Locale(“ch”, “CH”));&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;rb = ResourceBundle.getBundle(“appmessages”, Locale.CHINA);&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;rb.setLocale(Locale.CHINA);
    &lt;blockquote&gt;
      &lt;p&gt;There is no setLocale() method in Locale.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
Note that once a &lt;code&gt;ResourceBundle&lt;/code&gt; is retrieved, changing the Locale will not affect the &lt;code&gt;ResourceBundle&lt;/code&gt;. You have to retrieve a new &lt;code&gt;ResourceBundle&lt;/code&gt; by passing in the new &lt;code&gt;Locale&lt;/code&gt; and then assign it to the variable.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;23.&lt;/strong&gt; Which of these methods are defined in the Map interface?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;contains(Object o)&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;addAll(Collection c)&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;remove(Object o)&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;values()&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;toArray()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
The Map interface defines the methods &lt;code&gt;remove(Object)&lt;/code&gt; and &lt;code&gt;values()&lt;/code&gt;. It does not define  methods &lt;code&gt;contains()&lt;/code&gt;, &lt;code&gt;addAll()&lt;/code&gt; and &lt;code&gt;toArray()&lt;/code&gt;&lt;br /&gt;
Methods with these names are defined in the Collection interface, but Map does not extend from Collection.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;24.&lt;/strong&gt; Insert appropriate methods so that the following code will produce expected output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import java.util.*;
public class TestClass {
  public static void main(String[] args) {
    NavigableSet&amp;lt;String&amp;gt; myset = new TreeSet&amp;lt;String&amp;gt;();
    myset.add(&quot;a&quot;); myset.add(&quot;b&quot;); myset.add(&quot;c&quot;);
    myset.add(&quot;aa&quot;); myset.add(&quot;bb&quot;); myset.add(&quot;c&quot;);
    System.out.println(myset.floor(&quot;a&quot;));
    System.out.println(myset.ceiling(&quot;aaa&quot;));
    System.out.println(myset.lower(&quot;a&quot;));
    System.out.println(myset.higher(&quot;bb&quot;));
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Expected output.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;a&lt;br /&gt;
b&lt;br /&gt;
null&lt;br /&gt;
c&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;25.&lt;/strong&gt; Complete the following code so that it will print each line in the given file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import java.io.*;
class Liner {
  public void dumper(File f) throws IOException {
    FileReader x1 = new FileReader(f);
    BufferedReader x2 = new BufferedReader(x1);
    String x3 = x2.readLine();
    while (x3 != null) {
      System.out.println(x3);
      x3 = x2.readLine();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;26.&lt;/strong&gt; Which of the following statements are correct?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Assertions are usually enabled in the production environment.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Assertions are usually disabled in the development and testing environment.
    &lt;blockquote&gt;
      &lt;p&gt;Just the reverse is true.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Assertions can be enabled selectively on per class basis but not on per package basis.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Assertions can be enabled selectively on per class basis as well as on per package basis.
    &lt;blockquote&gt;
      &lt;p&gt;Yes, it can be enabled/disabled on class as well as package basis -ea or -da flags.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;It is not a good practice to write code that recovers from an assertion failure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
An assertion signifies a basic assumption made by the programmer that he/she believes to be true at all times. It is never a wise idea to try to recover when an assertion fails is the whole prupose of assertions: that the program should fail if that assumption fails.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;27.&lt;/strong&gt; Which clause(s) are used by a module definition that implements a service?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;exports
    &lt;blockquote&gt;
      &lt;p&gt;A service provider module is not read directly by a service user module. So, &lt;em&gt;exports&lt;/em&gt; clause is not required.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;provides
    &lt;blockquote&gt;
      &lt;p&gt;The provider module must specify the service interface and the implementing class that implements the service interface. For example,&lt;br /&gt;
&lt;code&gt;provides org.printservice.api.Print with com.myprinter.PrintImpl&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;uses
    &lt;blockquote&gt;
      &lt;p&gt;A uses clause is used by the module that uses a service. For example,&lt;br /&gt;
&lt;code&gt;uses org.printservice.api.Print;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;implements
    &lt;blockquote&gt;
      &lt;p&gt;This is not a valid clause in module-info.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;requires
    &lt;blockquote&gt;
      &lt;p&gt;The implementing module must require the module that defines the service interface.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
For example, if an &lt;code&gt;abc.print&lt;/code&gt; module implements an &lt;code&gt;org.printing.Print&lt;/code&gt; service interface defined in &lt;code&gt;PrintServiceAPI&lt;/code&gt; module using &lt;code&gt;com.abc.PrintImpl&lt;/code&gt; class, then this is how its module-info should look:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;module abc.print {
    requires PrintServiceAPI; //required because this module defines the service interface org.printing.Print
    uses org.printing.Print; //specifies that this module uses this service
    //observe that abc.print module is not required.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;31.&lt;/strong&gt; Which of the following statements regarding the assertion mechanism of Java is NOT correct?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Assertions require changes at the JVM level.
    &lt;blockquote&gt;
      &lt;p&gt;No change is required in the JVM for supporting assertions.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Assertions require changes at the API level.
    &lt;blockquote&gt;
      &lt;p&gt;Besides the ‘assert’ keyword, new methods are added in &lt;code&gt;java.lang.Class&lt;/code&gt; and &lt;code&gt;java.lang.ClassLoader&lt;/code&gt; classes.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Assertions can be enabled or disabled through the command line at the time of execution of (i.e. starting) the program.
    &lt;blockquote&gt;
      &lt;p&gt;By using the switches, -ea and -da or -enableassertions or -disableassertions&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Code that uses Assertions cannot be run on version below 1.4
    &lt;blockquote&gt;
      &lt;p&gt;Because of the ‘assert’ keyword.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Code written for JDK version 1.3 cannot be compiled under JDK version 1.4
    &lt;blockquote&gt;
      &lt;p&gt;It can be compiled by using -source flag: javac -source 1.3 classname.java&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;32.&lt;/strong&gt; Identify correct statements about annotations.&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;@SuppressWarnings can be used only on a class, constructor, or a method.
    &lt;blockquote&gt;
      &lt;p&gt;Actually, it can be used on several things. Its target can be a &lt;strong&gt;TYPE&lt;/strong&gt;, &lt;strong&gt;FIELD&lt;/strong&gt;, &lt;strong&gt;METHOD&lt;/strong&gt;, &lt;strong&gt;PARAMETER&lt;/strong&gt;, &lt;strong&gt;CONSTRUCTOR&lt;/strong&gt;, &lt;strong&gt;LOCAL_VARIABLE&lt;/strong&gt;, and &lt;strong&gt;MODULE&lt;/strong&gt;.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;@Override can only be used on instance methods.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;@SafeVarargs can only be used on methods.
    &lt;blockquote&gt;
      &lt;p&gt;It can be used on constructors and methods.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;@Deprecated can be used only on a class, constructor, or a method.
    &lt;blockquote&gt;
      &lt;p&gt;Actually, it can be used on serval things, Its target can be a &lt;strong&gt;CONSTRUCTOR&lt;/strong&gt;, &lt;strong&gt;FIELD&lt;/strong&gt;, &lt;strong&gt;LOCAL_VARIABLE&lt;/strong&gt;, &lt;strong&gt;METHOD&lt;/strong&gt;, &lt;strong&gt;PACKAGE&lt;/strong&gt;, &lt;strong&gt;MODULE&lt;/strong&gt;,&lt;strong&gt;PARAMETER&lt;/strong&gt;,&lt;strong&gt;TYPE&lt;/strong&gt;.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;@SuppressWarnings(“all”) can be used suppress all warnings from a method or a class.
    &lt;blockquote&gt;
      &lt;p&gt;Although you can pass any string value to the SuppressWarnings annotation (unrecognized values are ignored), the Java specification mandates only three values - unchecked, deprecation, and removal. Different compilers and IDEs may support other values in addition to these three. There is no rule that says the value “all” has to suppress all warnings (although a compiler or an IDE may do that upon seeing this value.)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;33.&lt;/strong&gt; Which of the following is thrown when an assertion fails?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;AssertionError&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;AssertionException&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;RuntimeException&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;AssertionFailedException&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Exception&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
A java.lang.AssertionError is thrown.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class java.lang.AssertionError extends java.lang.Error {
  public java.lang.AssertionError();
  public java.lang.AssertionError(java.lang.Object);
  public java.lang.AssertionError(boolean);
  public java.lang.AssertionError(char);
  public java.lang.AssertionError(int);
  public java.lang.AssertionError(long);
  public java.lang.AssertionError(float);
  public java.lang.AssertionError(double);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;38.&lt;/strong&gt; Which of the following are required to construct a Locale?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;language&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;region&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;country
    &lt;blockquote&gt;
      &lt;p&gt;country is the second parameter that may be passed while creating a Locale. It is not required though.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;time zone&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;state&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;culture&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
Locale needs at least a language to be constructed. It has three constructor -&lt;br /&gt;
&lt;code&gt;Locale(String language)&lt;/code&gt;&lt;br /&gt;
Construct a locale from a language code.&lt;br /&gt;
&lt;code&gt;Locale(String language, String country)&lt;/code&gt;&lt;br /&gt;
Construct a locale from language, country&lt;br /&gt;
&lt;code&gt;Locale(String language, String country, String variant)&lt;/code&gt;&lt;br /&gt;
Construct a locale from language, country, variant&lt;/p&gt;

&lt;p&gt;For example:&lt;br /&gt;
&lt;code&gt;new Locale(&quot;fr&quot;, &quot;FR&quot;);&lt;/code&gt; // language is French, Country is France.&lt;br /&gt;
&lt;code&gt;new Locale(&quot;fr&quot;, &quot;CA&quot;);&lt;/code&gt; // language is French, Country is Canada, so this means, you are trying to use Canadian dialect of French.&lt;br /&gt;
&lt;code&gt;new Locale(&quot;en&quot;, &quot;IN&quot;);&lt;/code&gt; // language is English, COuntry is India, so this means, you are trying to use Indian dialect of English.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;40.&lt;/strong&gt; Which of the following are standard Java annotations?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;@NonNull
    &lt;blockquote&gt;
      &lt;p&gt;This is not a standard Java annotation.&lt;br /&gt;
Although this annotation is officially not in scope for the OCP Java 11 exam, we have seen questions on the exam that require knowledge about this annotation. It exists in Spring framework as well as in &lt;strong&gt;&lt;a href=&quot;https://checkerframework.org/manual/&quot;&gt;Checker Framework&lt;/a&gt;&lt;/strong&gt;, which is referred in an Oracle &lt;strong&gt;&lt;a href=&quot;https://blogs.oracle.com/java-platform-group/java-8s-new-type-annotations&quot;&gt;blog&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
It can be applied to a field, method parameter, or method return type.&lt;br /&gt;
org.springframework.lang&lt;br /&gt;
Annotation Type NonNull&lt;br /&gt;
@Target(value={METHOD,PARAMETER,FIELD})&lt;br /&gt;
@Retention(value=RUNTIME)&lt;br /&gt;
@Documented @Nonnull&lt;br /&gt;
@TypeQualifierNickname&lt;br /&gt;
public @interface NonNull&lt;br /&gt;
A common Spring annotation to declare that annotated elements cannot be null.&lt;br /&gt;
It can be used like this:&lt;br /&gt;
&lt;strong&gt;1.&lt;/strong&gt; @NonNull String getString(@NonNull String input){ return “adsf”; };&lt;br /&gt;
&lt;strong&gt;2.&lt;/strong&gt; @NonNull String name; //instance or class fields&lt;br /&gt;
&lt;strong&gt;3.&lt;/strong&gt; Function&amp;lt;Integer, Integer&amp;gt; fin =  (@NonNull var x) -&amp;gt; 2*x;//lambda expression&lt;br /&gt;
You may see the details of the NonNull annotation of the checker framework &lt;strong&gt;&lt;a href=&quot;https://checkerframework.org/api/org/checkerframework/checker/nullness/qual/NonNull.html&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;@Interned
    &lt;blockquote&gt;
      &lt;p&gt;@Interned is not a standard Java annotation.&lt;br /&gt;
Although this annotation is officially not in scope for the OCP Java 11 exam, we have seen questions on the exam that require knowledge about this annotation. It exists in Spring framework as well as in &lt;strong&gt;&lt;a href=&quot;https://checkerframework.org/manual/&quot;&gt;Checker Framework&lt;/a&gt;&lt;/strong&gt;, which is referred in an Oracle &lt;strong&gt;&lt;a href=&quot;https://blogs.oracle.com/java-platform-group/java-8s-new-type-annotations&quot;&gt;blog&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;@Repeatable&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;@Retention&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;41.&lt;/strong&gt; A programmer wants to rename all the files in a directory (just the files and not directories) to &lt;code&gt;&amp;lt;existing filename&amp;gt;&lt;/code&gt;.checked.&lt;br /&gt;
Complete the given code so that it works as required.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import java.io.File;
import java.util.*;
public class ChangeFileNames {
  public static void main(String[] args) throws Exception {
    File dir = new File(args[0]);
    if(!dir.isDirectory()) {
      System.out.println(args[0]+&quot; is not a directory.&quot;);
      return;
    }
    File[] files = dir.listFiles();
    for (File oldfile : files) {
      // process only if oldfile is a normal file and not a directory
      if(!oldfile.isDirectory()) {
        String oldfilename = oldfile.getName();
        File newfile = new File(args[0]+File.separator+oldfilename+&quot;.checked&quot;);
        boolean b = oldfile.renameTo(newfile);
        if(b)
            System.out.println(&quot;Changed: &quot;+oldfilename+&quot; To &quot;+newfile.getName());
        else
            System.out.println(&quot;Not Changed: &quot;+oldfilename);
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
This programs illustrates the usage of many important File class methods.&lt;br /&gt;
&lt;strong&gt;1.&lt;/strong&gt; The &lt;code&gt;isDirectory()&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; if the file object represents a directory.&lt;br /&gt;
&lt;strong&gt;2 and 3.&lt;/strong&gt; File class has two methods for returning the contents of a directory (although it has more but for the exam, you need to know only these two):&lt;br /&gt;
&lt;code&gt;String[] list()&lt;/code&gt;&lt;br /&gt;
Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname.&lt;br /&gt;
&lt;code&gt;File[] listFiles()&lt;/code&gt;&lt;br /&gt;
Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname.&lt;br /&gt;
The for loop is expecting ‘files’ to be an array or a Collection of File objects. Thus, 2nd and 3rd blanks should be &lt;code&gt;File[]&lt;/code&gt; and &lt;code&gt;listFiles&lt;/code&gt; respectively.&lt;br /&gt;
&lt;strong&gt;4.&lt;/strong&gt; &lt;code&gt;isFile()&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; if the file object represents a normal file.&lt;br /&gt;
&lt;strong&gt;5.&lt;/strong&gt; &lt;code&gt;renameTo(File newfile)&lt;/code&gt; renames the file to newfile.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;46.&lt;/strong&gt; What classes can a non-static nested class extend?&lt;br /&gt;
(Provided that the class to be extended is visible and is not final.)&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Only the encapsulating class.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Any top level class.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Any class.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;It depends on whether the inner class is defined in a method or not.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;None of the above.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
In general, there is no restriction on what a nested class may or may not extend.&lt;br /&gt;
FYI, a nested class is any class whose declaration occurs within the body of another class or interface. A top level class is a class that is not a nested class. An inner class is a nested class that is not explicitly or implicitly declared static.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;47.&lt;/strong&gt; A JDBC driver implementation must provide implementation classes for which of the following interfaces?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;java.sql.Driver&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;java.sql.Connection&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;java.sql.Statement&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;java.sql.SQLException
    &lt;blockquote&gt;
      &lt;p&gt;This is a class and not an interface. It is provided by the JDBC API.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;java.sql.Date
    &lt;blockquote&gt;
      &lt;p&gt;This is a class and not an interface. It is provided by the JDBC API.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;java.sql.ResultSet&lt;/code&gt; is another important interface that a driver must provide.&lt;br /&gt;
Besides these, there are several interfaces and methods that a driver must provide but they are not relevant for the exam. If you want to learn more, please refer JDBC Specification.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;49.&lt;/strong&gt; Identify the correct statement regarding a JDBC Connection：&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;When a JDBC Connection is created, it is in auto-commit mode.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;When a JDBC Connection is created, its commit mode depends on the parameters used while creating the connection.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;When a JDBC Connection is created, its auto-commit feature is disabled.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;When a JDBC Connection is created, it is in commit mode undetermined.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
When a connection is created, it is in auto-commit mode. i.e. auto-commit is enabled. This means that each individual SQL statement is treated as a transaction and is automatically committed right after it is completed. (A statement is completed when all of its result sets and update counts have been retrieved. In almost all cases, however, a statement is completed, and therefore committed, right after it is executed.)&lt;br /&gt;
The way to allow two or more statements to be grouped into a transaction is to disable the auto-commit mode. Since it is enabled by default, you have to explicitly disable it after creating a connection by calling &lt;code&gt;con.setAutoCommit(false);&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;51.&lt;/strong&gt; Which of these statements are true?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Non-static inner class cannot have static members.
    &lt;blockquote&gt;
      &lt;p&gt;They can have final fields but the static fields have to be final constants.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Objects of static nested classes can be created without creating instances of their Outer classes.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Member variables in any nested class cannot be declared final.
    &lt;blockquote&gt;
      &lt;p&gt;Nested classes can have final members (i.e. methods and fields)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Anonymous classes cannot define constructors explicitly in Java code.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Anonymous classes cannot be static.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
Non-static inner classes can contain final static fields (but not methods).&lt;br /&gt;
Anonymous classes cannot have explicitly defined constructors, since they have no names.&lt;br /&gt;
Remember: A nested class is any class whose declaration occurs within the body of another class or interface. A top level class is a class that is not a nested class. An inner class is a nested class that is not explicitly or implicitly declared &lt;code&gt;static&lt;/code&gt;. A class defined inside an interface is implicitly &lt;code&gt;static&lt;/code&gt;.&lt;br /&gt;
Consider the following nested class &lt;code&gt;B&lt;/code&gt; which is &lt;code&gt;static&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class A  //This is a standard Top Level class.  
{  
  class X
  {
    final int j = 10; //compiles fine!
  }  
  public static class B //This is a static nested class
  {
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can create objects of &lt;code&gt;B&lt;/code&gt; without having objects of &lt;code&gt;A&lt;/code&gt;. For example: &lt;code&gt;A.B b = new A.B();&lt;/code&gt; Members in outer instances are directly accessible using simple names. There is no restriction that member variables in inner classes must be &lt;code&gt;final&lt;/code&gt;. Nested classes define distinct types from the enclosing class, and the &lt;code&gt;instanceof&lt;/code&gt; operator does not take of the outer instance into consideration.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;52.&lt;/strong&gt; Which of these statements concerning nested classes and interfaces are true?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;An instance of a static nested class has an inherent outer instance.
    &lt;blockquote&gt;
      &lt;p&gt;Because static nested class is a static class.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;A static nested class can contain non-static member variables.
    &lt;blockquote&gt;
      &lt;p&gt;It is like any other normal class.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;A static nested interface can contain static member variables.
    &lt;blockquote&gt;
      &lt;p&gt;Static nested interface is similar to top level interface.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;A static nested interface has an inherent outer instance associated with it.
    &lt;blockquote&gt;
      &lt;p&gt;A static nested interface is a static interface and so does not have an associated outer instance.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;For each instance of the outer class, there can exist many instances of a non-static inner class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
Note the difference between an Inner class and a static nested class. Inner class means a NON STATIC class defined inside a class. Remember: A nested class is any class whose declaration occurs within the body of another class or interface. A top level class is a class that is not a nested class. An inner class is a nested class that is not explicitly or implicitly declared static. A class defined inside an interface is implicitly static. For example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class A  // outer class
{
   static public class B //Static Nested class . It can be used in other places: A.B b = new A.B(); There is no outer instance.
   {
   }
   class C //Inner class. It can only be used like this: A.C c = new A().new C(); Outer instance is needed.
   {
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One can define a class as a static member of any top-level class. Now consider the following contents of a file named I1.java …&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface I1
{
    public void mA();
    public interface InnerI1
    {
        int k = 10;
        public void innerA();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, interface &lt;code&gt;InnerI1&lt;/code&gt; is implicitly &lt;strong&gt;STATIC&lt;/strong&gt; and so is called as static nested interface. ‘k’ is a &lt;code&gt;static&lt;/code&gt; (&amp;amp; &lt;code&gt;final&lt;/code&gt;) member of this interface. If you do &lt;code&gt;'javap'&lt;/code&gt; on I1 it prints: Compiled from I1.java&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public interface I1
    /* ACC_SUPER bit NOT set */
{
    public abstract void mA();
    public static interface I1. InnerI1
    /* ACC_SUPER bit NOT set */
    {
        public static final int k;
        public abstract void innerA();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This interface can be referred to in other places like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;class MyClass implements I1.InnerI1
{
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is similar to referring a Top Level class.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;55.&lt;/strong&gt; Which of the following command line switches is required for the assert statements to be executed while running a Java class?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code&gt;ea&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;ua&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;a&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;No switch is needed, they are on by default.
    &lt;blockquote&gt;
      &lt;p&gt;No, assertions are turned off by default.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;source&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
Although not explicitly mentioned in the exam objectives, OCP Java 11 Part 2 Exam requires you to know about the switches used to enable and disable assertions. Here are a few important points that you should know:&lt;br /&gt;
Assertions can be enabled or disabled for specific classes and/or packages. To specify a class, use the class name. To specify a package, use the package name followed by “…“(three dots also known as ellipses):&lt;br /&gt;
&lt;code&gt;java -ea:&amp;lt;class&amp;gt; myPackage.myProgram&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;java -da:&amp;lt;package&amp;gt;... myPackage.myProgram&lt;/code&gt;&lt;br /&gt;
You can have multiple &lt;code&gt;-ea/-da&lt;/code&gt; flags on the command line. For example, multiple flags allow you to enable assertions in general, but disable them in a particular package.&lt;br /&gt;
&lt;code&gt;java -ea -da:com.xyz... myPackage.myProgram&lt;/code&gt;&lt;br /&gt;
The above command enables assertions for all classes  in all packages, but then the subsequent &lt;code&gt;-da&lt;/code&gt; switch disables them for the &lt;code&gt;com.xyz&lt;/code&gt; package and its subpackages.&lt;br /&gt;
To enable assertion for one package and disable for other you can use:&lt;br /&gt;
&lt;code&gt;java -ea:&amp;lt;package1&amp;gt;... -da:&amp;lt;package2&amp;gt;... myPackage.myProgram&lt;/code&gt;&lt;br /&gt;
You can enable or disable assertions in the unnamed root package (i.e. the default package) using the following commands:&lt;br /&gt;
&lt;code&gt;java -ea:... myPackage.myProgram&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;java -da:... myPackage.myProgram&lt;/code&gt;&lt;br /&gt;
Note that when you use a package name in the &lt;code&gt;ea&lt;/code&gt; or &lt;code&gt;da&lt;/code&gt; flag, the flag applies to that package as well as its subpackages. For example,&lt;br /&gt;
&lt;code&gt;java -ea:com... -da:com.enthuware... com.enthuware.Main&lt;/code&gt;&lt;br /&gt;
The above command first enables assertions for all the classes in &lt;code&gt;com&lt;/code&gt; as well as for the classes in the subpackages of &lt;code&gt;com&lt;/code&gt;. It then disables assertions for classes in package &lt;code&gt;com.enthuware&lt;/code&gt; and its subpackages.&lt;br /&gt;
Another thing is that -ea/-da do not apply to system classes. For system classes (i.e. the classes that com bundled with the JDK/JRE), you need to use &lt;code&gt;-enablesystemassertions/-esa&lt;/code&gt; or &lt;code&gt;-disablesystemassertions/-dsa&lt;/code&gt;&lt;br /&gt;
Note that * and ** are not valid wildcards for including subpackages.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;56.&lt;/strong&gt; Which variables declared in the encapsulating class or in the method, can an inner class access if the inner class is defined in a static method of encapsulating class?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;All static variables&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;All final instance variables&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;All instance variables&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;All automatic variables&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;All final or effectively final static or automatic variables
    &lt;blockquote&gt;
      &lt;p&gt;An effectively final variable means even though it is not declared final, it is never assigned a value again throughout the code after being assigned a value at the time of declaration.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
Consider the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class TestClass
{
    static int si = 10; int ii = 20;
    public static void inner()
    {
        int ai = 30; // automatic variable
        ai = 31; // ai is not effectively final anymore.
        final int fai = 40; // automatic final variable
        class Inner
        {
            public Inner() { System.out.println(si+&quot;    &quot;+fai);  }
        }
        new Inner();
    }
    public static void main(String[] args) { TestClass.inner(); }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since method &lt;code&gt;inner()&lt;/code&gt; is a static method, only &lt;code&gt;si&lt;/code&gt; and &lt;code&gt;fai&lt;/code&gt; are accessible in class Inner. Note that &lt;code&gt;ai&lt;/code&gt; and &lt;code&gt;ii&lt;/code&gt; are not accessible. If method &lt;code&gt;inner()&lt;/code&gt; were a non-static, &lt;code&gt;ii&lt;/code&gt; would have been accessible. If the line &lt;code&gt;ai = 31;&lt;/code&gt; did not exist, &lt;code&gt;ai&lt;/code&gt; would have been accessible.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;58.&lt;/strong&gt; How will you initialize a &lt;code&gt;SimpleDateFormat&lt;/code&gt; object to that the following code will print the full name of the month of the given date?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;SimpleDateFormat sdf = new SimpleDateFormat(&quot;MMMM&quot;, Locale.FRANCE);&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Upper case M is for Month. For example, for February and December, the following will be printed:&lt;br /&gt;
M =&amp;gt; 2, 12&lt;br /&gt;
MM =&amp;gt; 02, 12&lt;br /&gt;
MMM =&amp;gt; févr., déc.&lt;br /&gt;
MMMM =&amp;gt; février, décembre&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;SimpleDateFormat sdf = new SimpleDateFormat(&quot;M*&quot;, Locale.FRANCE);&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;M* will print the month number (i.e. 2 for Feb and 12 for Dec), followed by *. For example, 2* or 12*&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;SimpleDateFormat sdf = new SimpleDateFormat(&quot;mmmm&quot;, Locale.FRANCE);&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Lower case m is for minutes. So mmmm will print the current minute, where the first two digits will always be zero. For example, 0032 or 0002.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;SimpleDateFormat sdf = new SimpleDateFormat(&quot;mmm&quot;, Locale.FRANCE);&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;SimpleDateFormat sdf = new SimpleDateFormat(&quot;MM&quot;, Locale.FRANCE);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
For the purpose of the exam, you need to know the basic codes for printing out a date. The important ones are m, M, d, D, e, y, s, S, h, H, and z.&lt;br /&gt;
You should check the complete details of these patterns &lt;strong&gt;&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/format/DateTimeFormatter.html&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
The important point to understand is how the length of the pattern determines the output of text and numbers.&lt;br /&gt;
Text: The text style is determined based on the number of pattern letters used. Less than 4 pattern letters will use the short form. Exactly 4 pattern letters will use the full form. Exactly 5 pattern letters will use the narrow form. Pattern letters ‘L’, ‘c’, and ‘q’ specify the stand-alone from of the text styles.&lt;br /&gt;
Number: If the count of letters is one, then the value is output using the minimum number of digits and without padding. Otherwise, the count of digits is used as the width of the output field, with the value zero-padded as necessary. The following pattern letters have constrains on the count of letters. Only one letter of ‘c’ and ‘F’ can be specified. Up to two letters of ‘d’, ‘H’, ‘h’, ‘K’, ‘k’, ‘m’, and ‘s’ can be specified. Up to three letters of ‘D’ can be specified.&lt;br /&gt;
Number/Text: If the count of pattern letters is 3 or greater, use the Text rules above. Otherwise use the Number rules above.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;59.&lt;/strong&gt; Which of the following statements are true?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Package member classes can be declared static.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Classes declared as members of top-level classes can be declared static.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Local classes can be declared static.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Anonymous classes cannot be declared static.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;No type of class can be declared static.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
The modifier static pertains only to member classes, not to top level or local or anonymous classes. That is, only classes declared as member of top-level classes can be declared static. Package member classes, local classes (i.e. classes declared in methods) and anonymous classes cannot be declared static.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;60.&lt;/strong&gt; Which of the following options can be a part of a correct inner class declaration or a combined declaration and instance initialization? (Assume that &lt;code&gt;SimpleInterface&lt;/code&gt; and &lt;code&gt;ComplexInterface&lt;/code&gt; are interfaces.)&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code&gt;java private class C { }&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code&gt;java new SimpleInterface() { // valid code }&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;java new ComplexInterface(x) { // valid code }&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;You cannot pass parameters when you implement an interface by anonymous class.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;java private final abstract class C { }&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;A final class can never be abstract.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;java new ComplexClass() implements SimpleInterface { }&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;‘implements’ part comes only in class definition not in instantiation.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;61.&lt;/strong&gt; Which of the following statements are true?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;A nested class may be declared static.
    &lt;blockquote&gt;
      &lt;p&gt;FYI, JLS defines the following terminology in Chapter 8:&lt;br /&gt;
A top level class is a class that is not a nested class.&lt;br /&gt;
A nested class is any class whose declaration occurs within the body of another class or interface.&lt;br /&gt;
An inner class is a class that is not explicitly or implicitly declared static.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Anonymous inner class may be declared public.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Anonymous inner class may be declared private.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Anonymous inner class may be declared protected.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Anonymous inner class may extend an abstract class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;abstract class SomeClass { public abstract void ml(); }
public class TestClass
{
    public static class StaticInnetClass { } //option1
    public SomeClass getSomeClass()
    {
        return new SomeClass()
        {
            public void ml() {}
        };
    }
}
//Here, the anonymous class created inside the method extends the abstract class SomeClass.
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;64.&lt;/strong&gt; Complete the code so that a Portfolio object can be serialized and deserialized properly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

public class Bond {
    String ticker = &quot;bac&quot;;
    double coupon = 8.3;
}
class Portfolio implements Serializable {
    String accountName;
    transient Bond bond = new Bond();
    private void writeObject(ObjectOutputStream os) throws Exception {
        os.defaultWriteObject();
        os.writeObject(bond.ticker);
        os.writeDouble(bond.coupon);
    }
    private void readObject(ObjectInputStream os) throws Exception {
        os.defaultReadObject();
        this.bond = new Bond();
        bond.ticker = (String) os.readObject();
        bond.coupon = os.readDouble();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;1.&lt;/strong&gt; Bond class does not implement Serializable. Therefore, for Portfolio to be serialized, ‘bond’ must be transient.&lt;br /&gt;
&lt;strong&gt;2.&lt;/strong&gt; &lt;code&gt;writeObject&lt;/code&gt; method takes &lt;code&gt;ObjectOutputStream&lt;/code&gt; as the only parameter, while &lt;code&gt;readObject&lt;/code&gt; method takes &lt;code&gt;ObjectInputStream&lt;/code&gt;.&lt;br /&gt;
&lt;strong&gt;3.&lt;/strong&gt; To serialize the object using the default behavior, you must call &lt;code&gt;objectOutputStream.defaultWriteObject();&lt;/code&gt; or &lt;code&gt;objectOutputStream.writeFields();&lt;/code&gt;. This will ensure that instance field of Portfolio object are serialized.&lt;br /&gt;
&lt;strong&gt;4.&lt;/strong&gt; To deserialize the object using the default behavior, you must call &lt;code&gt;objectInputStream.defaultReadObject();&lt;/code&gt; or &lt;code&gt;objectInputStream.readFields();&lt;/code&gt;. This will ensure that instance fields of Portfolio object are deserialized.&lt;br /&gt;
&lt;strong&gt;5.&lt;/strong&gt; The order of values to be read explicitly in &lt;code&gt;readObject&lt;/code&gt; must be exactly the same as the order they were written in &lt;code&gt;writeObject&lt;/code&gt;. Here, ticker was written before coupon and so ticker must be read before coupon.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;65.&lt;/strong&gt; Which of the following collection implementations are thread-safe?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;ArrayList&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;HashSet&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;HashMap&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;TreeSet&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;None of the above&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
Of all the collection classes of the &lt;code&gt;java.util&lt;/code&gt; package, only &lt;code&gt;Vector&lt;/code&gt; and &lt;code&gt;Hashtable&lt;/code&gt; are Thread-safe. &lt;code&gt;java.util.Collection&lt;/code&gt; class contains a &lt;code&gt;synchronizedCollection&lt;/code&gt; method that creates thread-safe instances based on collections which are not.&lt;br /&gt;
For example:&lt;br /&gt;
&lt;code&gt;Set s = Collections.synchronizedSet(new HashSet());&lt;/code&gt;&lt;br /&gt;
From Java 1.5 onwards, you can also use a new Concurrent library available in &lt;code&gt;java.util.concurrent&lt;/code&gt; package, which contains interfaces/classes such as ConcurrentMap/ConcurrentHashMap. Classes in this package offer better performance than objects returned from &lt;code&gt;Collections.synchronizedXXX&lt;/code&gt; methods.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;66.&lt;/strong&gt; Using a &lt;code&gt;Callable&lt;/code&gt; would be more appropriate than using a &lt;code&gt;Runnable&lt;/code&gt; in which of the following situations?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;When you want to execute a task directly in a separate thread.
    &lt;blockquote&gt;
      &lt;p&gt;A Callable cannot be passed to Thread for Thread creation but a Runnable can be. i.e. &lt;code&gt;new Thread(aRunnable);&lt;/code&gt; is valid. But &lt;code&gt;new Thread(aCallable);&lt;/code&gt; is not. Therefore, if you want to execute a task directly in a Thread, a &lt;code&gt;Callable&lt;/code&gt; is not suitable. You will need to use a &lt;code&gt;Runnable&lt;/code&gt;. You can achieve the same by using an &lt;code&gt;ExecutorService.submit(aCallable)&lt;/code&gt; , but in this case, you are not controlling the Thread directly.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;When your task might throw a checked exception and you want to execute it in a separate Thread.
    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;Callable.call()&lt;/code&gt; allows you to declare checked exceptions while &lt;code&gt;Runnable.run()&lt;/code&gt; does not. So if your task throws a checked exception, it would be more appropriate to use a &lt;code&gt;Callable&lt;/code&gt;.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;When your task does not return any result but you want to execute the task asynchronously.
    &lt;blockquote&gt;
      &lt;p&gt;Both &lt;code&gt;Callable&lt;/code&gt; and &lt;code&gt;Runnable&lt;/code&gt; can be used to execute a task asynchronously. If the task does not return any result, neither is more appropriate than the other. However, if the task returns a result, which you want to collect asynchronously later, &lt;code&gt;Callable&lt;/code&gt; is more appropriate.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;When you want to use &lt;code&gt;ExecutorService&lt;/code&gt; to submit multiple instance of a task.
    &lt;blockquote&gt;
      &lt;p&gt;Both can be used with an &lt;code&gt;ExecutorService&lt;/code&gt; because has overloaded submit methods:&lt;br /&gt;
&lt;code&gt;&amp;lt;T&amp;gt; Future&amp;lt;T&amp;gt; submit(Callable&amp;lt;T&amp;gt; task)&lt;/code&gt;&lt;br /&gt;
and&lt;br /&gt;
&lt;code&gt;Future&amp;lt;?&amp;gt; submit(Runnable task)&lt;/code&gt; Observe that even though a Runnable’s &lt;code&gt;run()&lt;/code&gt; method cannot return a value, the &lt;code&gt;ExecutorService.submit(Runnable)&lt;/code&gt; returns a &lt;code&gt;Future&lt;/code&gt;. The Future’s get method will return &lt;code&gt;null&lt;/code&gt; upon successful completion.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;public interface Callable&amp;lt;V&amp;gt;&lt;/code&gt;&lt;br /&gt;
A task that returns a result and may throw an exception. Implementers define a single method with no arguments called call -&lt;br /&gt;
&lt;code&gt;V call() throws Exception&lt;/code&gt;&lt;br /&gt;
The &lt;code&gt;Callable&lt;/code&gt; interface is similar to &lt;code&gt;Runnable&lt;/code&gt;, in that both are designed for classes whose instances are potentially executed by another thread. A &lt;code&gt;Runnable&lt;/code&gt;, however, does not return a result and cannot throw a checked exception.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;67.&lt;/strong&gt; Identify correct statements about the Java module system.&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;If a request is made to load a type whose package is not defined in any known module system will attempt to load it from the class path.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;The unnamed module can only access types present in the unnamed module.
    &lt;blockquote&gt;
      &lt;p&gt;The unnamed module reads every other module. In other words, a class in an unnamed module can access all exported types of all modules.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Code from a named module can access classes that are on the classpath.
    &lt;blockquote&gt;
      &lt;p&gt;A named module cannot access any random class from the classpath. If your named module requires access to a non-modular class, you must put the non-modular class/jar on module-path and load it as an automatic module. Further, you must also put an appropriate “requires” clause in your module-info.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;If a package is defined in both a named module and the unnamed module then the package in the unnamed module is ignored.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;An automatic module cannot access classes from the unnamed module.
    &lt;blockquote&gt;
      &lt;p&gt;Remember that named modules cannot access classes from the unnamed module because it is not possible for named module to declare dependency on the unnamed module.&lt;br /&gt;
But what if a named module needs to access a class from a non-modular jar? Well, you can put the non-modular jar on the module-path, thereby making it an automatic module. A named module can declare dependency on an automatic module using the requires clause.&lt;br /&gt;
Now, what if that jar in turn requires access to some other class from another third party non-modular jar? Here, the original modular jar doesn’t directly access the non-modular jar, so it may not be wise to create an automatic module out of all such third party jars. This is where the -classpath options is helpful.&lt;br /&gt;
In addition to reading every other named module, an automatic module is also made to read the unnamed module. Thus, while running a modular application, the classpath option can be used to enable automatic modules to access third party non-modular jars.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Bottom Up Approach for modularizing an application&lt;/strong&gt;&lt;br /&gt;
While modularizing an app using the bottom-up approach, you basically need to convert lower level libraries into modular jars before you can convert the higher level libraries. For example, if a class in &lt;strong&gt;A.jar&lt;/strong&gt; directly uses a class from &lt;strong&gt;B.jar&lt;/strong&gt;, and a class in &lt;strong&gt;B.jar&lt;/strong&gt; directly uses a class from &lt;strong&gt;C.jar&lt;/strong&gt;, you need to first modularize &lt;strong&gt;C.jar&lt;/strong&gt; and then &lt;strong&gt;B.jar&lt;/strong&gt; before you can modularize &lt;strong&gt;A.jar&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Thus, bottom up approach is possible only when the dependent libraries are modularized already.&lt;br /&gt;
&lt;strong&gt;Top Down Approach for modularzing an application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While modularizing an app in a top-down approach, you need to remember the following points -&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Any jar file can be converted into an automatic module by simply putting that jar on the &lt;em&gt;module-path&lt;/em&gt; instead of the &lt;em&gt;classpath&lt;/em&gt;. Java automatically derives the name of this module from the jar file.&lt;/li&gt;
  &lt;li&gt;Any jar that is put on classpath(instead of &lt;em&gt;module-path&lt;/em&gt;) is loaded as part of the “unnamed” module.&lt;/li&gt;
  &lt;li&gt;An explicitly named module (which means, a module that has an explicitly defined name in its &lt;em&gt;module-info.java&lt;/em&gt; file) can specify dependency on an automatic module just like it does for any other module i.e. by adding a &lt;code&gt;requires &amp;lt;module-name&amp;gt;;&lt;/code&gt; clause in its module info but it cannot do so for the unnamed module because there is no way to write a &lt;code&gt;requires&lt;/code&gt; clause without a name. In other words, named module can access classes present in an automatic module but not in the unnamed module.&lt;/li&gt;
  &lt;li&gt;Automatic modules are given access to classes in the unnamed module (even though there is no explicitly defined module-info and requires clause in an automatic module). In other words, a class from an automatic module will be able to read a class in the unnamed module without doing anything special.&lt;/li&gt;
  &lt;li&gt;An automatic module exports all its packages and is allowed to read all packages exported by other modules. Thus, an automatic module can access: all packages of all other automatic modules + all packages exported by all explicitly named modules + all packages of the unnamed module (i.e. classes loaded from the classpath).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thus, if your application jar &lt;strong&gt;A&lt;/strong&gt; directly uses a class from another jar &lt;strong&gt;B&lt;/strong&gt;, then you would have to convert &lt;strong&gt;B&lt;/strong&gt; into a module (either named or automatic). If &lt;strong&gt;B&lt;/strong&gt; uses another jar &lt;strong&gt;C&lt;/strong&gt;, then you can leave &lt;strong&gt;C&lt;/strong&gt; on the class path if &lt;strong&gt;B&lt;/strong&gt; hasn’t yet been migrated into a named module. Otherwise, you would have to convert &lt;strong&gt;C&lt;/strong&gt; into an automatic module as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;br /&gt;
There are two possible ways for an automatic module to get its name:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;When an Automatic-Module-Name entry is available in the manifest, its value is the name of the automatic module.&lt;/li&gt;
  &lt;li&gt;Otherwise, a name is derived from the JAR filename (see the ModuleFinder JavaDoc for the derivation algorithm) - Basically, hyphens are converted into dots and the version number part is ignored. So, for example, if you put &lt;code&gt;mysql-connector-java-8.0.11.jar&lt;/code&gt; on module path, its module name would be &lt;code&gt;mysql.connector.java&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;70.&lt;/strong&gt; Which of the following switches is/are used for controlling the execution of assertions at run time?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;-ua&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code&gt;-da&lt;/code&gt;
    &lt;blockquote&gt;
      &lt;p&gt;It is a short form for ‘disable assertions’.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code&gt;-enableassertions&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;-assert&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;-keepassertions&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
Although not explicitly mentioned in the exam objectives, OCP Java 11 Part 2 Exam requires you to know about the switches used to enable and disable assertions. Here are a few important points that you should know:&lt;/p&gt;

&lt;p&gt;Assertions can be enabled or disabled for specific classes and/or packages. To specify a class, use the class name. To specify a package, use the package name followed by “…“(three dots also known as ellipses):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;java -ea:&amp;lt;class&amp;gt; myPackage.myProgram&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;java -da:&amp;lt;package&amp;gt;... myPackage.myProgram&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can have multiple &lt;code&gt;-ea/-da&lt;/code&gt; flags on the command line. For example, multiple flags allow you to enable assertions in general, but disable them in a particular package.&lt;br /&gt;
&lt;code&gt;java -ea -da:com.xyz... myPackage.myProgram&lt;/code&gt;&lt;br /&gt;
The above command enables assertions for all classes  in all packages, but then the subsequent &lt;code&gt;-da&lt;/code&gt; switch disables them for the &lt;code&gt;com.xyz&lt;/code&gt; package and its subpackages.&lt;/p&gt;

&lt;p&gt;To enable assertion for one package and disable for other you can use:&lt;br /&gt;
&lt;code&gt;java -ea:&amp;lt;package1&amp;gt;... -da:&amp;lt;package2&amp;gt;... myPackage.myProgram&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can enable or disable assertions in the unnamed root package (i.e. the default package) using the following commands:&lt;br /&gt;
&lt;code&gt;java -ea:... myPackage.myProgram&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;java -da:... myPackage.myProgram&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that when you use a package name in the &lt;code&gt;ea&lt;/code&gt; or &lt;code&gt;da&lt;/code&gt; flag, the flag applies to that package as well as its subpackages. For example,&lt;br /&gt;
&lt;code&gt;java -ea:com... -da:com.enthuware... com.enthuware.Main&lt;/code&gt;&lt;br /&gt;
The above command first enables assertions for all the classes in &lt;code&gt;com&lt;/code&gt; as well as for the classes in the subpackages of &lt;code&gt;com&lt;/code&gt;. It then disables assertions for classes in package &lt;code&gt;com.enthuware&lt;/code&gt; and its subpackages.&lt;/p&gt;

&lt;p&gt;Another thing is that -ea/-da do not apply to system classes. For system classes (i.e. the classes that com bundled with the JDK/JRE), you need to use &lt;code&gt;-enablesystemassertions/-esa&lt;/code&gt; or &lt;code&gt;-disablesystemassertions/-dsa&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that * and ** are not valid wildcards for including subpackages.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;72.&lt;/strong&gt; Complete the following code so that it will print dick, harry, and tom in that order.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class TestClass {
    public static void main(String[] args) {
        Set&amp;lt;String&amp;gt; holder = new TreeSet&amp;lt;&amp;gt;();
        holder.add(&quot;tom&quot;);
        holder.add(&quot;dick&quot;);
        holder.add(&quot;harry&quot;);
        holder.add(&quot;tom&quot;);
        printIt(holder);
    }
    public static void printIt(Collection&amp;lt;String&amp;gt; list) {
        for(String s : list) System.out.println(s);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
The output is expected to contain unique items. This implies that you need to use a &lt;code&gt;Set&lt;/code&gt;. The output is also expected to be sorted. Thus, &lt;code&gt;TreeSet&lt;/code&gt; is the only option.&lt;br /&gt;
The &lt;code&gt;printIt()&lt;/code&gt; method expects a Collection of Strings. Therefore, the reference type of holder can be &lt;code&gt;Collection&amp;lt;String&amp;gt;&lt;/code&gt; or any subclass of &lt;code&gt;Collection&amp;lt;String&amp;gt;&lt;/code&gt; such as &lt;code&gt;Set&amp;lt;String&amp;gt;&lt;/code&gt;. It cannot be &lt;code&gt;List&lt;/code&gt; or &lt;code&gt;ArrayList&lt;/code&gt; because the object on the right hand side is &lt;code&gt;TreeSet&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;75.&lt;/strong&gt; Which of the following standard functional interfaces is most suitable to process a large collection of int primitives and return processed data for each of them?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;Function&amp;lt;Integer&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code&gt;IntFunction&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;Consumer&amp;lt;Integer&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;IntConsumer&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;Predicate&amp;lt;Integer&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
Using the regular functional interfaces by parameterizing them to Integer is inefficient as compared to using specially designed interfaces for primitives because they avoid the cost of boxing and unboxing the primitives.&lt;br /&gt;
Now, since the problem statement requires something to be returned after processing each int, you need to use a Function instead of a Consumer or a Predicate.&lt;/p&gt;

&lt;p&gt;Therefore, &lt;strong&gt;&lt;code&gt;IntFunction&lt;/code&gt;&lt;/strong&gt; is most appropriate in this case.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;77.&lt;/strong&gt; Which statements concerning the relation between a non-static inner class and its outer class instances are true?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Member variables of the outer instance are always accessible to inner instances, regardless of their accessibility modifiers.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Member variables of the outer instance can always be referred to using only the variable name within the inner instance.
    &lt;blockquote&gt;
      &lt;p&gt;This is possible only if that variable is not shadowed by another variable in inner class.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;More than one inner instance can be associated with the same outer instance.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;An inner class can extend its outer classes.&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;A final outer class cannot have any inner classes.
    &lt;blockquote&gt;
      &lt;p&gt;There is no such rule.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;80.&lt;/strong&gt; Simple rule to determine sorting order: &lt;strong&gt;spaces&lt;/strong&gt; &amp;lt; &lt;strong&gt;numbers&lt;/strong&gt; &amp;lt; &lt;strong&gt;uppercase&lt;/strong&gt; &amp;lt; &lt;strong&gt;lowercase&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;82.&lt;/strong&gt; Which of the following statements are correct?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;A List stores elements in a Sorted Order.
    &lt;blockquote&gt;
      &lt;p&gt;List just keeps elements in the order in which they are added. For sorting, you’ll need some other interface such as a SortedSet.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;A Set keeps the elements sorted and a List keeps the elements in the order they were added.
    &lt;blockquote&gt;
      &lt;p&gt;A Set keeps unique objects without any order or sorting.&lt;br /&gt;
A List keeps the elements in the order they were added. A List may have non-unique elements.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;A SortedSet keeps the elements in the order they were added.
    &lt;blockquote&gt;
      &lt;p&gt;A SortedSet keeps unique elements in their natural order.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;An OrderedSet keeps the elements sorted.
    &lt;blockquote&gt;
      &lt;p&gt;There is no interface like OrderedSet&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;An OrderedList keeps the elements ordered.
    &lt;blockquote&gt;
      &lt;p&gt;There is no such interface. The List interface itself is meant for keeping the elements in the order they were added.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;A NavigableSet keeps the elements sorted.
    &lt;blockquote&gt;
      &lt;p&gt;A NavigableSet is a Sorted extended with navigation methods reporting closest matches for given search targets. Methods lower, floor, ceiling, and higher return elements respectively less than, or equal, greater than or equal, and greater than a given element, returning null if there is no such element.&lt;br /&gt;
Since NavigableSet is a SortedSet, it keeps the elements sorted.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;84.&lt;/strong&gt; You want to execute your tasks after a given delay. Which &lt;code&gt;ExecutorService&lt;/code&gt; would you use?&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;FixedDelayExecutorService&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;TimedExecutorService&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;code&gt;DelayedExecutorService&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;code&gt;ScheduledExecutorService&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following are the details of the interface &lt;code&gt;ScheduledExecutorService&lt;/code&gt;:&lt;br /&gt;
All Superinterfaces:&lt;br /&gt;
&lt;code&gt;Executor&lt;/code&gt;, &lt;code&gt;ExecutorService&lt;/code&gt;&lt;br /&gt;
All Known Implementing Classes:&lt;br /&gt;
&lt;code&gt;ScheduledThreadPoolExecutor&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;An &lt;code&gt;ExecutorService&lt;/code&gt; that can schedule commands to run after a given delay, or to execute periodically.&lt;br /&gt;
The schedule methods create tasks with various delays and return a task object that can be used to cancel or check execution. The &lt;code&gt;scheduleAtFixedRate&lt;/code&gt; and &lt;code&gt;scheduleWithFixedDelay&lt;/code&gt; methods create and execute tasks that run periodically until cancelled.&lt;/p&gt;

&lt;p&gt;Commands submitted using the &lt;code&gt;Executor.execute(java.lang.Runnable)&lt;/code&gt; and &lt;code&gt;ExecutorService.submit&lt;/code&gt; methods are scheduled with a requested delay of zero. Zero and negative delays (but not periods) are also allowed in schedule methods, and are treated as requests for immediate execution.&lt;/p&gt;

&lt;p&gt;All schedule methods accept relative delays and periods as arguments, not absolute times or dates. It is a simple matter to transform an absolute time represented as a Date to the required form. For example, to schedule at a certain future date, you can use: &lt;code&gt;schedule(task, date.getTime() - System.currentTimeMillis(), TimeUnit.MILLISECONDS)&lt;/code&gt;. Beware however that expiration of a relative delay need not coincide with the current Date at which the task is enabled due to network time synchronization protocols, clock drift, or other factors. The Executors class provides convenient factory methods for the &lt;code&gt;ScheduledExecutorService&lt;/code&gt; implementations provided in this package.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br /&gt;
Following is a usage example that sets up a &lt;code&gt;ScheduledExecutorService&lt;/code&gt; to beep every ten seconds for an hour:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;import java.util.concurrent.*;
import static java.util.concurrent.TimeUnit.SECONDS;

public class BeeperControl {
    private final ScheduledExecutorService scheduler =
            Executors.newScheduledThreadPool(1);
    public void beepForAnHour() {
        final ScheduledFuture&amp;lt;?&amp;gt; beeperHandle =
                scheduler.scheduleAtFixedRate(() -&amp;gt;
                        System.out.println(&quot;beep&quot;), 0, 3, SECONDS);
    }
    public static void main(String[] args) {
        new BeeperControl().beepForAnHour();
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sat, 15 Feb 2020 22:10:00 +0000</pubDate>
        <link>https://zwt.io/2020/02/15/foundation-test-review/</link>
        <guid isPermaLink="true">https://zwt.io/2020/02/15/foundation-test-review/</guid>
        
        <category>Java 11</category>
        
        <category>OCP 11</category>
        
        
      </item>
    
      <item>
        <title>Exercises for Inner class</title>
        <description>&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What is an inner class? Differentiate between member, local, and anonymous inner classes.&lt;/p&gt;

    &lt;p&gt;An inner class declares inside a top-level class without a static modifier. Inner classes that declared at member level are called member inner classes, local to the method, or instance initialization block are local inner class. And local inner classes that have no name are anonymous inner classes.&lt;!--more--&gt;&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;An inner class is a class declared inside the  body of another class. A member inner class is declared inside a class. It can be declared as public, private, protected, or package-level. A local inner class is declared inside a block. Its scope is limited to the block in which it is declared. An anonymous inner class is the same as  local inner class, but has no name. It is declared and an object of the class is created at the same time.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the fully qualified name of the inner class B, which is declared as follows?&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// A.java
package io.zwt.innerclasses.exercises;
   
public class A {
	public class B {
	}
}
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;That will be :  &lt;code&gt;io.zwt.innerclasses.exercises.A.B&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Consider the following declaration for top-level class named Cup and a member inner class named Handle:&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// Cup.java
package io.zwt.innerclasses.exercises;
   
public class Cup {
	public class Handle {
		public Handle() {
			System.out.println(&quot;Created a handle for the cup&quot;);
		}
	}
   	
	public Cup() {
		System.out.println(&quot;Created a cup&quot;);
	}
}
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;Compile the in the main() method for the following CupTest class that will create an instance of the Cup.Handle inner class:&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// CupTest.java
package io.zwt.innerclasses.exercises;
public class CupTest {
    public static void main(String[] args) {
        // Create a Cup
        Cup c = new Cup();
           
        // Create a Handle
        // Cup.Handle h = / * You code goes here */;
        Cup.Handle h = c.new Handle();
    }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What will be the output when the following Outer class is run?&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// Outer.java
package io.zwt.innerclasses.exercises;
   
public class Outer {
    private final int value = 19680112;
       
    public class Inner {
        private final int value = 19690919;
        public void print() {
            System.out.println(&quot;Inner: value = &quot; + value);
            System.out.println(&quot;Inner: this.value = &quot; + this.value);
            System.out.println(&quot;Inner: Inner.this.value = &quot; + 
                              Inner.this.value);
            System.out.println(&quot;Inner: Outer.this.value = &quot; + 
                              Outer.this.value);
        }
    }
       
    public void print() {
        System.out.println(&quot;Outer: value = &quot; + value);
        System.out.println(&quot;Outer: this.value = &quot; + this.value);
        System.out.println(&quot;Outer: Outer.this.value = &quot; + 
                          Outer.this.value);
    }
       
    public static void main(String[] args) {
        Outer out = new Outer();
        Inner in = out.new Inner();
        out.print();
        in.print();
    }
}
&lt;/code&gt;&lt;/pre&gt;

    &lt;blockquote&gt;
      &lt;p&gt;19680112&lt;/p&gt;

      &lt;p&gt;19680112&lt;/p&gt;

      &lt;p&gt;19680112&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;p&gt;19690919&lt;/p&gt;

      &lt;p&gt;19690919&lt;/p&gt;

      &lt;p&gt;19690919&lt;/p&gt;

      &lt;p&gt;19680112&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The following declaration of an AnonymousTest class does not compile. Describe the reasons and steps you might take to fix the error.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// AnonymousTest
package io.zwt.innerclasses.exercises;
   
public class AnonymousTest {
    public static void main(String[] args) {
        int x = 100;
           
        Object obj = new Object() {
            {
                System.out.println(&quot;Inside.x = &quot; + x);
            }
        };
        x = 300;
        System.out.println(&quot;Outside.x = &quot; + x);
    }
}
&lt;/code&gt;&lt;/pre&gt;

    &lt;blockquote&gt;
      &lt;p&gt;x is not effectively final, make that effectively final by removing assignment x = 300;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Consider the following declaration for a top-level class A and a member inner class B:&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package io.zwt.innerclasses.exercises;
   
public class A {
    public class B {
        public B() {
            System.out.println(&quot;B is created.&quot;);
        }
    }
    public A() {
        System.out.println(&quot;A is created.&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;Consider the following incomplete declaration of class C, which inherits from the inner class A.B:&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// C.java
package io.zwt.innerclasses.exercises;
   
public class C extends A.B {
    /* Define a constructor for class C here */
    public C(A a) {
        a.super();
        System.out.println(&quot;C is created.&quot;)
    }
       
    public static void main(String[] args) {
        C c = new C(new A())/* Your code goes here */;
    }
}
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;Add an appropriate constructor for class C and complete the statement in the main() method. When class C is run, it should print the following to the standard output:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;A is created.
B is created.
C is created.
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Which of the following is true about an anonymous inner class?&lt;/p&gt;

    &lt;p&gt;a. It can inherit from one class and implement one interface.&lt;/p&gt;

    &lt;p&gt;b. It can inherit from one class and implement multiple interfaces.&lt;/p&gt;

    &lt;p&gt;c. It can inherit from one class or implement one interface. ✔&lt;/p&gt;

    &lt;p&gt;d. It can implement multiple interfaces, but inherits from only one class.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How many class files will be generated when the following declaration of the Computer class is compiled? List the names of all generated class files.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// Computer.java
package io.zwt.innerclasses.exercises;
   
public class Computer {
    public class Mouse {
        public class Button {
        }
    }
       
    public static void main(String[] args) {
        Object obj = new Object() {
        };
           
        System.out.println(obj.hasCode());
    }
}
&lt;/code&gt;&lt;/pre&gt;

    &lt;blockquote&gt;
      &lt;p&gt;4&lt;/p&gt;

      &lt;p&gt;Computer.class&lt;/p&gt;

      &lt;p&gt;Computer$Mouse.class&lt;/p&gt;

      &lt;p&gt;Computer$Mouse.Button.class&lt;/p&gt;

      &lt;p&gt;Computer$1.class&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The following declaration of class H does not compile. Point out the problem and suggest a solution.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// H.java
package io.zwt.innerclasses.exercises;
   
public class H {
    private int x = 100;
       
    public static class J {
        private int y = x * 2;
    }
}
&lt;/code&gt;&lt;/pre&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Declare x as static, or declare J as non-static.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Consider the following declaration of a top-level class P and a nested static class Q:&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// P.java
package io.zwt.innerclasses.exercises;
    
public class P {
    public static class Q {
        {
            System.out.println(&quot;Hello from Q.&quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;Complete the main() method of the following PTest class that will create an object of the nested static class Q. When class PTest is run, it should print a message “Hello from Q.” to the standard output.&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// PTest.java
package io.zwt.innerclasses.exercises;
    
public class PTest {
    public static void main(String[] args) {
        P.Q q = /* Your code goes here */ new P.Q();
    }
}
&lt;/code&gt;&lt;/pre&gt;

    &lt;blockquote&gt;
      &lt;p&gt;P served as namespace.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 15 Feb 2020 16:55:00 +0000</pubDate>
        <link>https://zwt.io/2020/02/15/inner-class-exercises/</link>
        <guid isPermaLink="true">https://zwt.io/2020/02/15/inner-class-exercises/</guid>
        
        <category>Java</category>
        
        
      </item>
    
      <item>
        <title>Travis CI上手</title>
        <description>&lt;h3 id=&quot;配置文件&quot;&gt;配置文件&lt;/h3&gt;

&lt;p&gt;我用于博客自动构建的&lt;code&gt;.travis.yml&lt;/code&gt;脚本：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;language: ruby
rvm:
  - 2.6.3
env:
  global:
  - NOKOGIRI_USE_SYSTEM_LIBRARIES=true
  - secure: D0RrVHHBEEJMyJK9OUUPM6Wms+D+zifJhHFl4BcmC0leSR0vANoQ6357Bl4miZL2flmnBU/1Z9WNzcDVM0JwQpF8ZVeEdMvgBY5+73Xjp8cIwYfWx8MAUB8J1Hug2aEiXw6KoSxjFOnUpSRnhCcWpviFNCZOa5XavMfe7+OHbNQT1U1xu+ZOmDG6Hrm3CMhfzu2cRPIfziAAgnWVfgtqA0STXnY9D0HvfsKPl6khy6VWkeF09Chqo/XVO/SV5LSgplkgXh1OzS6ITwT99UWDRqIeXYAvMJFyrHkzdxNgtAddYVxmx8WQqfqUFQ6A3HSnJy2Fq04H3gLszQxrVPzw8fNeOzBe7hIviaZdgRsglc26NO13EX//e4DA1ImiYKciFGvDNDBrqtv8u3XAG+8jVe/dLwKbBXnvi64udh2/H/lTBfWQ3eV08/R6m0m4aF8jbv0oBuXReyXuEy9D6xNm+yceekWzKAmTYPFb9W5XLveIgt8SIQO9P6tGuMWV6w7KRhgbpgI886ZeSVS3WcAGIr11SvSNa+x5WapOd/mizHrA8VvW4v8GjmYYwTOsmiLuYl2t1fWY76yYOOdSDLC9XhJN/mS3qxxX7WR4KCJgpstyzTVXj+uyuzi23sV1SdUvO35r3VkZk11ad9Qmp9WLXpdSQfMAKbu/lC7C9HfrGuM=
cache:
  bundler: true
  directories:
    - /home/travis/.rvm/
install:
- gem install bundler
- bundle install
script:
- bundle exec rake deploy
after_success:
- bash &amp;lt;(curl -s https://codecov.io/bash)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;发现启用了 cache 之后，快很多了。搞到动图凑内容：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/cache_1581461859_5053.gif&quot; alt=&quot;cache_1581461859_5053&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用来测试构建时长，哈哈哈哈！&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Feb 2020 06:49:00 +0000</pubDate>
        <link>https://zwt.io/2020/02/12/intro-to-travis/</link>
        <guid isPermaLink="true">https://zwt.io/2020/02/12/intro-to-travis/</guid>
        
        <category>持续集成</category>
        
        
      </item>
    
      <item>
        <title>AsciiDoc语法参考</title>
        <description>&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;段落&quot;&gt;&lt;em&gt;段落&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph lead&quot;&gt;
&lt;p&gt;段落不需要特别的格式，&lt;strong&gt;直接&lt;/strong&gt;写就是了。
然后呢&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;自然段&quot;&gt;&lt;em&gt;自然段&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;这是普通段落&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;开始至少空一格就成为自然段，同一个自然段里面的内容必须相邻，
即不能隔空行。&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;隔空行就是另一个自然段了。自然段文字是等宽字体，然后会保留空格和新行。
例如    保留了前边的空格，
然后这样，保留了换新行。&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;现在这里又是一个普通段落了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;然后呢&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;杂记&quot;&gt;杂记&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;使用 Travis CI 也挺好玩的，搭建起持续集成的工作流。在这里也添加个动图吧：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;一个普通图：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/city.jpg&quot; alt=&quot;City&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;一个专用动图：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/cache_1581461859_5053.gif&quot; alt=&quot;travis 真香！&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;bold &lt;strong&gt;constrained&lt;/strong&gt; &amp;amp; &lt;strong&gt;un&lt;/strong&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;italic &lt;em&gt;constrained&lt;/em&gt; &amp;amp; &lt;em&gt;un&lt;/em&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;bold italic &lt;strong&gt;&lt;em&gt;constrained&lt;/em&gt;&lt;/strong&gt; &amp;amp; &lt;strong&gt;&lt;em&gt;un&lt;/em&gt;&lt;/strong&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;monospace &lt;code&gt;constrained&lt;/code&gt; &amp;amp; &lt;code&gt;un&lt;/code&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;monospace bold &lt;code&gt;&lt;strong&gt;constrained&lt;/strong&gt;&lt;/code&gt; &amp;amp; &lt;code&gt;&lt;strong&gt;un&lt;/strong&gt;&lt;/code&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;monospace italic &lt;code&gt;&lt;em&gt;constrained&lt;/em&gt;&lt;/code&gt; &amp;amp; &lt;code&gt;&lt;em&gt;un&lt;/em&gt;&lt;/code&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;monospace bold italic &lt;code&gt;&lt;strong&gt;&lt;em&gt;constrained&lt;/em&gt;&lt;/strong&gt;&lt;/code&gt; &amp;amp; &lt;code&gt;&lt;strong&gt;&lt;em&gt;un&lt;/em&gt;&lt;/strong&gt;&lt;/code&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;C&amp;#43;&amp;#43;&lt;/code&gt; is valid syntax in the programming language by the same name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;WHERE id &amp;lt;= 20 AND value = &quot;{name}&quot;&lt;/code&gt; is a SQL WHERE clause.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Hello {
  public static void main(String[] args) {
    System.out.println(&quot;Hello&quot;);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Werewolves are allergic to &lt;mark&gt;cassia cinnamon&lt;/mark&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Did the werewolves read the &lt;span class=&quot;small&quot;&gt;small print&lt;/span&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Where did all the &lt;span class=&quot;underline&quot;&gt;cores&lt;/span&gt; run off to?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We need &lt;span class=&quot;line-through&quot;&gt;ten&lt;/span&gt; make that twenty VMs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;big&quot;&gt;O&lt;/span&gt;nce upon an infinite loop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;sup&gt;super&lt;/sup&gt;script phrase&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;sub&gt;sub&lt;/sub&gt;script phrase&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8220;double curved quotes&amp;#8221;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8216;single curved quotes&amp;#8217;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Olaf&amp;#8217;s desk was a mess.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All of the werewolves&amp;#8217; desks were a mess.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Olaf had been with the company since the &amp;#8217;60s.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rubies are red,&lt;br&gt;
Topazes are blue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ruby is red.&lt;br&gt;
Java is black.&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lists&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Edgar Allen Poe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sheri S. Tepper&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bill Bryson&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;max nesting&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;level 1&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;level 2&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;level 3&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;level 4&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;level 5&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;level 1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ordered, basic&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Step 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 3&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ordered, max nesting&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;level 1&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;level 2&lt;/p&gt;
&lt;div class=&quot;olist lowerroman&quot;&gt;
&lt;ol class=&quot;lowerroman&quot; type=&quot;i&quot;&gt;
&lt;li&gt;
&lt;p&gt;level 3&lt;/p&gt;
&lt;div class=&quot;olist upperalpha&quot;&gt;
&lt;ol class=&quot;upperalpha&quot; type=&quot;A&quot;&gt;
&lt;li&gt;
&lt;p&gt;level 4&lt;/p&gt;
&lt;div class=&quot;olist upperroman&quot;&gt;
&lt;ol class=&quot;upperroman&quot; type=&quot;I&quot;&gt;
&lt;li&gt;
&lt;p&gt;level 5&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;level 1&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Checklist&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist checklist&quot;&gt;
&lt;ul class=&quot;checklist&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-check-square-o&quot;&gt;&lt;/i&gt; checked&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-check-square-o&quot;&gt;&lt;/i&gt; also checked&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-square-o&quot;&gt;&lt;/i&gt; not checked&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;normal list item&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Description, single-line&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;first term&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;definition of first term&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;second term&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;definition of second term&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Description, multi-line&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;first term&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;definition of first term&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;second term&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;definition of second term&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Q &amp;amp; A&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;qlist qanda&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;What is Asciidoctor?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;An implementation of the AsciiDoc processor in Ruby.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;What is the answer to the Ultimate Question?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;42&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Complex content in outline lists&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Every list item has at least one paragraph of content,
which may be wrapped, even using a hanging indent.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additional paragraphs or blocks are adjoined by putting
a list continuation on a line adjacent to both blocks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;list continuation&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;a plus sign (&lt;code&gt;&amp;#43;&lt;/code&gt;) on a line by itself&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A literal paragraph does not require a list continuation.&lt;/p&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ gem install asciidoctor&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AsciiDoc lists may contain any complex content.&lt;/p&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Application&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Language&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;AsciiDoc&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Python&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Asciidoctor&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ruby&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;超链接&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://asciidoctor.org&quot; class=&quot;bare&quot;&gt;https://asciidoctor.org&lt;/a&gt; - automatic!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://asciidoctor.org&quot;&gt;Asciidoctor&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/asciidoctor&quot;&gt;Asciidoctor @ &lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://discuss.asciidoctor.org&quot; class=&quot;external&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Discuss Asciidoctor&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://discuss.asciidoctor.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Discuss Asciidoctor&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://example.org&quot; class=&quot;teal&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google, Yahoo, Bing&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See &lt;a href=&quot;#自然段&quot;&gt;&lt;em&gt;自然段&lt;/em&gt;&lt;/a&gt; to learn how to write paragraphs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Learn how to organize the document into &lt;a href=&quot;#section-titles&quot;&gt;sections&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;图片&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://asciidoctor.org/images/octocat.jpg&quot; alt=&quot;GitHub mascot&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;UI Macro&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Shortcut&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;kbd&gt;F11&lt;/kbd&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Toggle fullscreen&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;T&lt;/kbd&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Open a new tab&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;N&lt;/kbd&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;New incognito window&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;kbd&gt;\&lt;/kbd&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Used to escape characters&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;]&lt;/kbd&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Jump to keyword&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;span class=&quot;keyseq&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;+&lt;/kbd&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Increase zoom&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Content in a passthrough block is passed to the output unprocessed.
That means you can include raw HTML, like this embedded Gist:
&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mojavelinux/5333524.js&quot;&gt;
&lt;/script&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Four score and seven years ago our fathers brought forth
on this continent a new nation&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Abraham Lincoln&lt;br&gt;
&lt;cite&gt;Address delivered at the dedication of the Cemetery at Gettysburg&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
A person who never made a mistake never tried anything new.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Albert Einstein
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A person who never made a mistake never tried anything new.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you don&amp;#8217;t know where you are going, any road will get you there.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Charles Lutwidge Dodgson&lt;br&gt;
&lt;cite&gt;Mathematician and author, also known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Lewis_Carroll&quot;&gt;Lewis Carroll&lt;/a&gt;&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;AsciiDoc history&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;AsciiDoc was first released in Nov 2002 by Stuart Rackham.
It was designed from the start to be a shorthand syntax
for producing professional documents like DocBook and LaTeX.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Example 1. Sample document&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a sample AsciiDoc document:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;= Title of Document
Doc Writer
:toc:

This guide provides...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The document header is useful, but not required.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An admonition block may contain complex content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;A list&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;one&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;two&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;three&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another paragraph.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;line of code  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
line of code  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
line of code  &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
line of code  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A callout behind a line comment for C-style languages.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A callout behind a line comment for Ruby, Python, Perl, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A callout behind a line comment for Clojure.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A callout behind a line comment for XML or SGML languages like HTML.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;section&amp;gt;
  &amp;lt;title&amp;gt;Section Title&amp;lt;/title&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&amp;lt;/section&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The section title is required.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;插入视频&quot;&gt;插入视频&lt;/h4&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://player.vimeo.com/video/67480300&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Table Title&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Name of Column 1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Name of Column 2&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Name of Column 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cell in column 1, row 1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cell in column 2, row 1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cell in column 3, row 1&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cell in column 1, row 2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cell in column 2, row 2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cell in column 3, row 2&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Artist&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Track&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Genre&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Baauer&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Harlem Shake&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Hip Hop&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;The Lumineers&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ho Hey&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Folk Rock&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Artist&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Track&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Genre&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Baauer&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Harlem Shake&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Hip Hop&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width: 25%;&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;1&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;5&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-middle&quot; colspan=&quot;2&quot; rowspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;6&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-bottom&quot; rowspan=&quot;3&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;7&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;8&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;9&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot; colspan=&quot;2&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;10&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To save the file, select &lt;span class=&quot;menuseq&quot;&gt;&lt;b class=&quot;menu&quot;&gt;File&lt;/b&gt;&amp;#160;&lt;i class=&quot;fa fa-angle-right caret&quot;&gt;&lt;/i&gt; &lt;b class=&quot;menuitem&quot;&gt;Save&lt;/b&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select &lt;span class=&quot;menuseq&quot;&gt;&lt;b class=&quot;menu&quot;&gt;View&lt;/b&gt;&amp;#160;&lt;i class=&quot;fa fa-angle-right caret&quot;&gt;&lt;/i&gt; &lt;b class=&quot;submenu&quot;&gt;Zoom&lt;/b&gt;&amp;#160;&lt;i class=&quot;fa fa-angle-right caret&quot;&gt;&lt;/i&gt; &lt;b class=&quot;menuitem&quot;&gt;Reset&lt;/b&gt;&lt;/span&gt; to reset the zoom level to the default setting.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Wed, 12 Feb 2020 05:26:00 +0000</pubDate>
        <link>https://zwt.io/2020/02/12/hello-asciidoctor/</link>
        <guid isPermaLink="true">https://zwt.io/2020/02/12/hello-asciidoctor/</guid>
        
        <category>Asciidoc</category>
        
        <category>Notes</category>
        
        
      </item>
    
      <item>
        <title>Java 内部类</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;在这一篇文章，你将会学习到：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;内部类是什么&lt;/li&gt;
    &lt;li&gt;如何声明内部类&lt;/li&gt;
    &lt;li&gt;如何声明成员、局部，以及匿名内部类&lt;/li&gt;
    &lt;li&gt;如何创建内部类的对象&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;什么是内部类&quot;&gt;什么是内部类？&lt;/h3&gt;

&lt;p&gt;我们知道类（class）是包（package）的成员（member）。即顶层类，直接放在包下面的类。例如以下这段代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// TopLevel.java
package io.zwt.innerclasses;

public class TopLevel {
    private int value = 101;
    
    public int getValue() {
        return value;
    }
    
    public void setValue(int value) {
        this.value = value;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的 &lt;code&gt;TopLevel&lt;/code&gt; 类是 &lt;code&gt;io.zwt.innerclasses&lt;/code&gt; 包的成员。 这个里有三个成员：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一个实例变量（instance variable）：&lt;code&gt;value&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;两个方法（method）：&lt;code&gt;getValue()&lt;/code&gt; and &lt;code&gt;setValue()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个类也可以声明在另一个类里面。这种类称为&lt;em&gt;内部类&lt;/em&gt;。如果定义在另一个类中的类显式或隐式被声明为static，则它被称为嵌套类，而不是内部类。包含内部类的类称为&lt;em&gt;外层类&lt;/em&gt;或&lt;em&gt;外部类&lt;/em&gt;。看一下下面的 &lt;code&gt;Outer&lt;/code&gt; 和 &lt;code&gt;Inner&lt;/code&gt; 类声明：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// Outer.java
pakcage io.zwt.innerclasses;

public class Outer {
	public class Inner {
		// 内部类的成员在这里
	}
	// 外部类的其它成员在这里
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个内部类实例只能存在于其外部类实例内。也就是说，你在创建内部类实例之前必须要有一个外部类的实例。这个规则在规范一个对象不能脱离另一个对象而存在这方面很有用。内部类可以完全访问到它的外部类的所有成员，包括私有成员。&lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;使用内部类的好处&quot;&gt;使用内部类的好处&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;可以将一个类定义在它的使用者附近。例如，一个计算机有处理器，所以最好将 &lt;code&gt;Processor&lt;/code&gt; 类定义为 &lt;code&gt;Computer&lt;/code&gt; 类的内部类。&lt;/li&gt;
  &lt;li&gt;它们提供了额外管理类结构的命名空间。例如，在未有内部类之前，一个类只能是包的成员。有了内部类，包含内部类的顶层类，提供了额外的命名空间。&lt;/li&gt;
  &lt;li&gt;某些设计模式用内部类实现更简单。例如，适配器模式，枚举模式，还有状态模式，都可以用内部类轻松实现。&lt;/li&gt;
  &lt;li&gt;用内部类实现回调机制优雅且方便。Java 8 的 Lambda 表达式是一种更好且更简洁的回调实现方式。&lt;/li&gt;
  &lt;li&gt;有助于在 Java 实现闭包。&lt;/li&gt;
  &lt;li&gt;使用内部类你可以体验一种类的多继承。一个内部类可以继承其它类。因此，内部类可以访问它的外部类成员，以及它的超类成员。注意，访问两个以上类的成员是多继承的目标之一，这可以通过使用内部类实现。然而，只是可以访问两个类的成员，并不是真正意义上的多继承。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;内部类的种类&quot;&gt;内部类的种类&lt;/h3&gt;

&lt;p&gt;你可以在类的任意可以写 Java 语句的位置定义一个内部类，有三种内部类。它们的类型取决于声明所在的位置和声明的方式。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;成员内部类&lt;/li&gt;
  &lt;li&gt;局部内部类&lt;/li&gt;
  &lt;li&gt;匿名内部类&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;成员内部类&quot;&gt;成员内部类&lt;/h4&gt;

&lt;p&gt;成员内部类和成员字段或成员方法一样声明在一个类里面。可以声明为 &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt; 或者是包级别访问权限。其实例仅在外部类存在的条件下才存在。&lt;/p&gt;

&lt;h4 id=&quot;局部内部类&quot;&gt;局部内部类&lt;/h4&gt;

&lt;p&gt;局部内部类声明在块内。它的作用范围受限于它声明所在的块。由于它作用范围始终受限于块，它的声明不可以使用任何访问修饰符，例如 &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt; 或 &lt;code&gt;protected&lt;/code&gt;。 通常局部内部类定义在一个方法内。然而，它也可以被定义在静态初始化块，实例初始化块，以及构造器内。当只在块内使用一个类，你可以使用局部内部类。&lt;/p&gt;

&lt;p&gt;要在块外使用局部内部类，它必须符合以下至少一项：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Implement a public interface 实现一个公有接口&lt;/li&gt;
  &lt;li&gt;继承自另一个公有类，并重写它的超类方法。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;匿名内部类&quot;&gt;匿名内部类&lt;/h4&gt;

&lt;p&gt;匿名内部类跟局部内部类同样，除了一个区别：它没有名字。因为它没有名字，所以没有构造器。&lt;/p&gt;

&lt;h3 id=&quot;静态成员类不是内部类&quot;&gt;静态成员类不是内部类&lt;/h3&gt;

&lt;p&gt;在另一个类中定义的成员类可以声明为 &lt;code&gt;static&lt;/code&gt;。 以下代码声明了一个顶层类 &lt;code&gt;A&lt;/code&gt; 和一个静态成员类 &lt;code&gt;B&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package io.zwt.innnerclasses;
public class A {
	// A static member class
	public static class B {
		// The body of class B goes here
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个静态成员类不是内部类。它被看作是顶层类。它亦被称为嵌套顶层类。因为它是一个顶层类，你不需要它的外层类的实例去创建它的对象。一个类 A 的实例和类 B 的实例可以独立地存在，因为它们都是顶层类。一个静态成员类可以声明为 &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;，包访问级别，或者是&lt;code&gt; private&lt;/code&gt; 以限制它在外层类之外的访问权限。&lt;/p&gt;

&lt;h3 id=&quot;创建内部类对象&quot;&gt;创建内部类对象&lt;/h3&gt;

&lt;p&gt;创建局部内部类，匿名内部类，和静态成员类是非常直接的。局部内部类的对象在声明所在的内使用 &lt;code&gt;new&lt;/code&gt; 创建对象。匿名内部类的对象在声明时候创建对象。静态成员类是另一类顶层类，其对象创建方式跟顶层类一样。&lt;/p&gt;

&lt;h3 id=&quot;访问外层类的成员&quot;&gt;访问外层类的成员&lt;/h3&gt;

&lt;h3 id=&quot;局部变量访问的限制&quot;&gt;局部变量访问的限制&lt;/h3&gt;

&lt;p&gt;A local inner class is declared inside a block—typically inside a method of a class. A local inner class can access the instance variables of its enclosing class as well as the local variables, which are in scope. The instance of an inner class exists within an instance of its enclosing class. Therefore, accessing the instance variables of the enclosing class inside a local inner class is not a problem because they exist throughout the lifecycle of the instance of the local inner class. However, the local variables in a method exist only during the execution of that method. All local variables become inaccessible when method execution is over. Java makes a copy of the local variables that are used inside a local inner class and stores that copy along with the inner class object. However, to guarantee that the values of the local variables can be reproduced when accessed inside the local inner class code after the method call is over, Java puts a restriction that the local variables must be effectively final. An effectively final variable is a variable whose value does not change after it is initialized. One way to have an effectively final variable is to declare the variable final. Another way is not to change its value after it is initialized. Therefore, a local variable or an argument to a method must be effectively final if it is used inside a local inner class. This restriction also applies to an anonymous inner class declared inside a method.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt; 在 Java 8 以前，如果一个局部变量是被局部内部类，或者匿名内部类访问的，它必须被声明为 &lt;code&gt;final&lt;/code&gt;。 Java 8 更改了这个规则：局部变量不需要被声明为 &lt;code&gt;final&lt;/code&gt;， 但它应该是 effectively final 的。 什么意思呢？就是说，在变量声明前面添加个 &lt;code&gt;final&lt;/code&gt; 修饰符，仍然能够通过编译，相当于 &lt;code&gt;final&lt;/code&gt;，就是所谓的 “effective final” ，就等效于 &lt;code&gt;final&lt;/code&gt; 嘛。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;内部类与继承&quot;&gt;内部类与继承&lt;/h3&gt;

&lt;p&gt;An inner class can inherit from another inner class, a top-level class, or its enclosing class. For example, in the following snippet of code, inner class C inherits from inner class B; inner class D inherits from its enclosing top-level class A, and inner class F inherits from inner class A.B:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class A {
    public class B {
    }
    public class C extends B {
    }
    public class D extends A {
    }
}

public class E extends A {
    public class F extends B {
        
    }
}

public class G extends A.B {
    // This code won't compile
    // 这段代码不能通过编译！
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;内部类中不能有静态成员除非是编译时常量&quot;&gt;内部类中不能有静态成员（除非是编译时常量）&lt;/h3&gt;

&lt;p&gt;Java 里面的 &lt;code&gt;static&lt;/code&gt; 关键字使得一个结构变成顶层结构。因此，你不能在一个内部类里边定义任何静态成员（字段、方法或者是初始化语句块）。以下代码不能通过编译，因为内部类 &lt;code&gt;B&lt;/code&gt; 声明了一个静态字段 &lt;code&gt;DAYS_IN_A_WEEK&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class A {
    public class B {
        // Cannot have the following declaration
        public static int DAYS_IN_A_WEEK = 7; // A compile-time error
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然而，内部类里面可以有性质为编译时常量的静态字段。什么意思？请看以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class A {
    public class B {
        // Can have a compile-time static constant field
        public final static int DAYS_IN_A_WEEK = 7; // OK

        // Cannot have the following declaration, because it is not
        // a compile-time constant, even though it is final
        public final static String str = new String(&quot;Hello&quot;);
		// 可以用 public final static String str = &quot;Hello&quot;; 是常量
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意 成员接口和成员枚举是隐式 static 的，因此不能声明在内部类里。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;内部类和编译器的魔法&quot;&gt;内部类和编译器的魔法&lt;/h3&gt;

&lt;p&gt;成员内部类和嵌套内部类：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;outer-class-name&amp;gt;$&amp;lt;member-or-nested-class-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;局部内部类：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;outer-class-name&amp;gt;$&amp;lt;a-number&amp;gt;&amp;lt;local-inner-class-name&amp;gt;&lt;/code&gt;
匿名内部类：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;outer-class-name&amp;gt;$&amp;lt;a-number&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;闭包与回调&quot;&gt;闭包与回调&lt;/h3&gt;

&lt;p&gt;In functional programming, a higher order function is an anonymous function that can be treated as a data object. That is, it can be stored in a variable and passed around from one context to another.  It might be invoked in a context that did not necessarily define it. Note that a higher order function is an anonymous function, so the invoking context does not have to know its name. A closure is a higher order function packaged with its defining environment. A closure carries with it the variables in scope when it was defined, and it can access those variables even when it is invoked in a context other than the context in which it was defined.&lt;/p&gt;

&lt;h3 id=&quot;在静态上下文定义内部类&quot;&gt;在静态上下文定义内部类&lt;/h3&gt;

&lt;p&gt;很少有用到，发现 static {} 里面可以放 {} 这样&lt;/p&gt;

</description>
        <pubDate>Tue, 04 Feb 2020 22:34:00 +0000</pubDate>
        <link>https://zwt.io/2020/02/04/inner-class/</link>
        <guid isPermaLink="true">https://zwt.io/2020/02/04/inner-class/</guid>
        
        <category>Java</category>
        
        <category>语言特性</category>
        
        
      </item>
    
  </channel>
</rss>
