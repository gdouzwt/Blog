I" V<blockquote>
  <p>原文由 Trisha Gee 在当地时间2019年12月9日发布在 <a href="https://blog.jetbrains.com/idea/2019/12/tutorial-reactive-spring-boot-kotlin-rsocket-server/">INTELLIJ IDEA BLOG</a></p>
</blockquote>

<p>在这一节，我们将给Kotlin后端添加一个新的服务，这次是通过RSocket，一种为响应式数据流而生的协议，发送价格数据。</p>

<p>目前为止，我们以及成功地创建了一个端到端的应用程序，从Kotlin Spring Boot后端发送价格数据，并且将它们展示到一个JavaFX折线图上。那用的是HTTP的服务器发送事件。 但是，既然我们这个是响应式应用程序，我们可能想要选择一种更加适合流式数据的协议。</p>

<p>在这一步，我们要创建一个通过RSocket协议发送价格数据的服务</p>

<!--more-->

<h3 id="创建一个rsocket控制器">创建一个RSocket控制器</h3>

<p>我们要对在本教程第一部分当中创建的Kotlin Spring Boot应用程序做一些更改，我们的 StockServiceApplication.kt文件。我们已存在的服务有一个REST控制器，我们将为RSocket创建一个类似的类。</p>

<ol>
  <li>在StockServiceApplication.kt内，创建一个新的类<code class="highlighter-rouge">RSocketController</code>。</li>
  <li>将其注解为Spring的Controller。</li>
  <li>创建一个新的需要一个参数的Kotlin函数。</li>
  <li>（提示：我们可以使用 fun1 Live模板去让 IntelliJ IDEA给我们创建这个函数的轮廓）。</li>
  <li>将这个函数命名为<code class="highlighter-rouge">prices</code>就跟RestController函数里的一样。 它需要一个String类型的参数symbol并且返回一个<code class="highlighter-rouge">Flux</code>的<code class="highlighter-rouge">StockPrice</code>。</li>
</ol>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="kd">class</span> <span class="nc">StockServiceApplication</span>
 
<span class="c1">// main 函数在这里...</span>
 
<span class="nd">@RestController</span>
<span class="kd">class</span> <span class="nc">RestController</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 控制器主体在这里...</span>
<span class="p">}</span>
 
<span class="nd">@Controller</span>
<span class="kd">class</span> <span class="nc">RSocketController</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">prices</span><span class="p">(</span><span class="n">symbol</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">Flux</span><span class="p">&lt;</span><span class="nc">StockPrice</span><span class="p">&gt;</span> <span class="p">{</span>
        
    <span class="p">}</span>
<span class="p">}</span>
 
<span class="c1">// 这里是StockPrice数据类</span>
</code></pre></div></div>

<p>（注意：这些代码还未能通过编译，函数需要返回某些东西）。</p>

<h3 id="引入价格服务">引入价格服务</h3>

<p>这里的<code class="highlighter-rouge">prices</code>函数看起来会跟<code class="highlighter-rouge">RestController</code>里面的<code class="highlighter-rouge">prices</code>函数非常像，因为它们实际上是干同样的事情。唯一不同之处是它们以不同的方式发布价格数据。为了减少冗余，让我们引入一个价格服务包含它们共享的逻辑。</p>

<ol>
  <li>添加一个类型为<code class="highlighter-rouge">PriceService</code>的构造函数参数<code class="highlighter-rouge">priceService</code>。</li>
  <li>（提示：如果我们在<code class="highlighter-rouge">prices</code>方法体输入<code class="highlighter-rouge">priceService</code>，我们可以在红色的文字按下Alt+Enter，让IntelliJ IDEA 为构造函数参数创建属性<code class="highlighter-rouge">priceService</code>)。</li>
  <li>在同一个文件中创建一个<code class="highlighter-rouge">PriceService</code>类。</li>
  <li>（提示：在StockServiceApplication.kt文件，我们可以在构造函数里面红色的<code class="highlighter-rouge">PriceService</code>按下Alt+Eneter，然后让 IntelliJ IDEA 创建类<code class="highlighter-rouge">PriceService</code>）。</li>
  <li>用<code class="highlighter-rouge">@Service</code>将<code class="highlighter-rouge">PriceService</code>注解。</li>
</ol>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="kd">class</span> <span class="nc">StockServiceApplication</span>
 
<span class="c1">// main函数在这里</span>
 
<span class="c1">// @RestController在这里</span>
 
<span class="nd">@Controller</span>
<span class="kd">class</span> <span class="nc">RSocketController</span><span class="p">(</span><span class="kd">val</span> <span class="py">priceService</span><span class="p">:</span> <span class="nc">PriceService</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">prices</span><span class="p">(</span><span class="n">symbol</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">Flux</span><span class="p">&lt;</span><span class="nc">StockPrice</span><span class="p">&gt;</span> <span class="p">{</span>
        
    <span class="p">}</span>
<span class="p">}</span>
 
<span class="nd">@Service</span>
<span class="kd">class</span> <span class="nc">PriceService</span> <span class="p">{</span>
 
<span class="p">}</span>
 
<span class="c1">// StockPrice数据类在这里</span>
</code></pre></div></div>

<h3 id="将共享代码移入-priceservice">将共享代码移入 PriceService</h3>

<ol>
  <li>在<code class="highlighter-rouge">service</code>类创建一个函数<code class="highlighter-rouge">generatePrices</code>。</li>
  <li>（提示：如果我们在<code class="highlighter-rouge">RSocketController</code>的prices函数内调用 <code class="highlighter-rouge">pricesService.generatePrices</code> ，我们可以在红色的函数上按 Alt + Enter ，让IntelliJ IDEA为我们生成函数）。</li>
  <li>这个函数需要一个类型为<code class="highlighter-rouge">String</code>的股票代号（symbol)，并返回一个<code class="highlighter-rouge">StockPrice</code>的<code class="highlighter-rouge">Flux</code>，跟我们的<code class="highlighter-rouge">prices</code>函数一样。</li>
  <li>这样的逻辑以及存在于<code class="highlighter-rouge">RestController.prices</code>，所以将那个函数体复制到新的<code class="highlighter-rouge">generatePrices</code> 函数里。</li>
  <li>这也需要<code class="highlighter-rouge">randomStockPrice</code>函数，所以从<code class="highlighter-rouge">RestController</code>复制这个到<code class="highlighter-rouge">PriceService</code>。</li>
  <li>确保<code class="highlighter-rouge">RSocketController</code>里面的<code class="highlighter-rouge">prices</code>方法调用<code class="highlighter-rouge">generatePrices</code>并返回结果。</li>
</ol>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="kd">class</span> <span class="nc">StockServiceApplication</span>
 
<span class="c1">// main函数在这里...</span>
 
<span class="c1">// @RestController在这里</span>
 
<span class="nd">@Controller</span>
<span class="kd">class</span> <span class="nc">RSocketController</span><span class="p">(</span><span class="kd">val</span> <span class="py">priceService</span><span class="p">:</span> <span class="nc">PriceService</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">prices</span><span class="p">(</span><span class="n">symbol</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">Flux</span><span class="p">&lt;</span><span class="nc">StockPrice</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">priceService</span><span class="p">.</span><span class="nf">generatePrices</span><span class="p">(</span><span class="n">symbol</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
 
<span class="nd">@Service</span>
<span class="kd">class</span> <span class="nc">PriceService</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">generatePrices</span><span class="p">(</span><span class="n">symbol</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">Flux</span><span class="p">&lt;</span><span class="nc">StockPrice</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nc">Flux</span>
            <span class="p">.</span><span class="nf">interval</span><span class="p">(</span><span class="nc">Duration</span><span class="p">.</span><span class="nf">ofSeconds</span><span class="p">(</span><span class="m">1</span><span class="p">))</span>
            <span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="nc">StockPrice</span><span class="p">(</span><span class="n">symbol</span><span class="p">,</span> <span class="nf">randomStockPrice</span><span class="p">(),</span> <span class="nf">now</span><span class="p">())</span> <span class="p">}</span>
    <span class="p">}</span>
 
    <span class="k">private</span> <span class="k">fun</span> <span class="nf">randomStockPrice</span><span class="p">():</span> <span class="nc">Double</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nc">ThreadLocalRandom</span><span class="p">.</span><span class="nf">current</span><span class="p">().</span><span class="nf">nextDouble</span><span class="p">(</span><span class="m">100.0</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
 
<span class="c1">// StockPrice数据类在这里</span>
</code></pre></div></div>

<h3 id="减少重复代码">减少重复代码</h3>

<p>现在这里所有东西都能通过编译，我们可以从<code class="highlighter-rouge">RestController</code>里移除冗余的代码。</p>

<ol>
  <li>在<code class="highlighter-rouge">RestController</code>的构造函数参数引入<code class="highlighter-rouge">priceService</code>。</li>
  <li>从<code class="highlighter-rouge">RestController.prices</code>里面调用<code class="highlighter-rouge">generatePrices</code>而不是在那里调用。</li>
  <li>移除<code class="highlighter-rouge">RestController</code>里面的<code class="highlighter-rouge">randomStockPrice</code>函数，因为没有用到。</li>
  <li>（提示：我们可以在灰色的<code class="highlighter-rouge">randomStockPrices</code>函数名上按下Alt+Enter，并选择Safe delete去将它移除。 或者我们可以函数名上使用 Alt + Delete/⌘⌦）。</li>
</ol>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="kd">class</span> <span class="nc">RestController</span><span class="p">(</span><span class="kd">val</span> <span class="py">priceService</span><span class="p">:</span> <span class="nc">PriceService</span><span class="p">)</span> <span class="p">{</span>
    <span class="nd">@GetMapping</span><span class="p">(</span><span class="n">value</span> <span class="p">=</span> <span class="p">[</span><span class="s">"/stocks/{symbol}"</span><span class="p">],</span>
                <span class="n">produces</span> <span class="p">=</span> <span class="p">[</span><span class="nc">MediaType</span><span class="p">.</span><span class="nc">TEXT_EVENT_STREAM_VALUE</span><span class="p">])</span>
    <span class="k">fun</span> <span class="nf">prices</span><span class="p">(</span><span class="nd">@PathVariable</span> <span class="n">symbol</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">Flux</span><span class="p">&lt;</span><span class="nc">StockPrice</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">priceService</span><span class="p">.</span><span class="nf">generatePrices</span><span class="p">(</span><span class="n">symbol</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
 
<span class="nd">@Controller</span>
<span class="kd">class</span> <span class="nc">RSocketController</span><span class="p">(</span><span class="kd">val</span> <span class="py">priceService</span><span class="p">:</span> <span class="nc">PriceService</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">prices</span><span class="p">(</span><span class="n">symbol</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">Flux</span><span class="p">&lt;</span><span class="nc">StockPrice</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">priceService</span><span class="p">.</span><span class="nf">generatePrices</span><span class="p">(</span><span class="n">symbol</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
 
<span class="nd">@Service</span>
<span class="kd">class</span> <span class="nc">PriceService</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">generatePrices</span><span class="p">(</span><span class="n">symbol</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">Flux</span><span class="p">&lt;</span><span class="nc">StockPrice</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nc">Flux</span>
            <span class="p">.</span><span class="nf">interval</span><span class="p">(</span><span class="nc">Duration</span><span class="p">.</span><span class="nf">ofSeconds</span><span class="p">(</span><span class="m">1</span><span class="p">))</span>
            <span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="nc">StockPrice</span><span class="p">(</span><span class="n">symbol</span><span class="p">,</span> <span class="nf">randomStockPrice</span><span class="p">(),</span> <span class="nf">now</span><span class="p">())</span> <span class="p">}</span>
    <span class="p">}</span>
 
    <span class="k">private</span> <span class="k">fun</span> <span class="nf">randomStockPrice</span><span class="p">():</span> <span class="nc">Double</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nc">ThreadLocalRandom</span><span class="p">.</span><span class="nf">current</span><span class="p">().</span><span class="nf">nextDouble</span><span class="p">(</span><span class="m">100.0</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="重构减少模板代码">重构减少模板代码</h3>

<p>在<code class="highlighter-rouge">RestController</code>和<code class="highlighter-rouge">RSocketController</code>上的<code class="highlighter-rouge">prices</code>函数现在都只是直接调用<code class="highlighter-rouge">PriceService</code>所有所有通用的代码都在要给地方了。Kotlin让我们可以进一步简化代码。</p>

<ol>
  <li>将<code class="highlighter-rouge">prices</code>函数转化为一个表达式体（expression body），并移除声明的返回值类型。</li>
  <li>（提示：如果我们在函数的花括号上按下 Alt + Enter，IntelliJ IDEA 会提供选项”Convert to expression body” 完成这个操作之后，返回值类型会被高亮，然后我们可以轻松将它删除）。</li>
  <li>对<code class="highlighter-rouge">prices</code>函数进行这样的操作。</li>
</ol>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="kd">class</span> <span class="nc">RestController</span><span class="p">(</span><span class="kd">val</span> <span class="py">priceService</span><span class="p">:</span> <span class="nc">PriceService</span><span class="p">)</span> <span class="p">{</span>
    <span class="nd">@GetMapping</span><span class="p">(</span><span class="n">value</span> <span class="p">=</span> <span class="p">[</span><span class="s">"/stocks/{symbol}"</span><span class="p">],</span>
                <span class="n">produces</span> <span class="p">=</span> <span class="p">[</span><span class="nc">MediaType</span><span class="p">.</span><span class="nc">TEXT_EVENT_STREAM_VALUE</span><span class="p">])</span>
    <span class="k">fun</span> <span class="nf">prices</span><span class="p">(</span><span class="nd">@PathVariable</span> <span class="n">symbol</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">=</span> <span class="n">priceService</span><span class="p">.</span><span class="nf">generatePrices</span><span class="p">(</span><span class="n">symbol</span><span class="p">)</span>
 
<span class="p">}</span>
 
<span class="nd">@Controller</span>
<span class="kd">class</span> <span class="nc">RSocketController</span><span class="p">(</span><span class="kd">val</span> <span class="py">priceService</span><span class="p">:</span> <span class="nc">PriceService</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">prices</span><span class="p">(</span><span class="n">symbol</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">=</span> <span class="n">priceService</span><span class="p">.</span><span class="nf">generatePrices</span><span class="p">(</span><span class="n">symbol</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Because this function is a simple delegation, this might be a more useful, and certainly shorter, way to write it. 因为这个函数是一个简单的委派，这可能更有用，肯定是更加简短，便于编写。</p>

<h3 id="设置好消息映射">设置好消息映射</h3>

<p>那个<code class="highlighter-rouge">RestController</code>是用<code class="highlighter-rouge">@GetMapping</code>注解的，用于设置客户端连接到价格数据流的URL。 对于 <code class="highlighter-rouge">RSocketController</code>函数我们也需要类型的东西。</p>

<ol>
  <li>给<code class="highlighter-rouge">RSocketController.prices</code>添加一个<code class="highlighter-rouge">@MessageMapping</code>注解。</li>
  <li>添加spring-boot-starter-rsocket依赖到pom.xml文件。</li>
  <li>（提示：IntelliJ IDEA能帮我们在pom.xml里面进行代码补全，或者生成一个依赖）。</li>
</ol>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-rsocket<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<ol>
  <li>回到我们的StockServiceApplication文件，我们可以为<code class="highlighter-rouge">@MessageMapping</code>添加一个导入。</li>
  <li>给<code class="highlighter-rouge">@MassageMapping</code>注解添加一个字符串路由，以便客户端能够连接。</li>
</ol>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">class</span> <span class="nc">RSocketController</span><span class="p">(</span><span class="kd">val</span> <span class="py">priceService</span><span class="p">:</span> <span class="nc">PriceService</span><span class="p">)</span> <span class="p">{</span>
    <span class="nd">@MessageMapping</span><span class="p">(</span><span class="s">"stockPrices"</span><span class="p">)</span>
    <span class="k">fun</span> <span class="nf">prices</span><span class="p">(</span><span class="n">symbol</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">=</span> <span class="n">priceService</span><span class="p">.</span><span class="nf">generatePrices</span><span class="p">(</span><span class="n">symbol</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="设置好一个-rsocket-服务器">设置好一个 RSocket 服务器</h3>

<p>现在如果我们启动应用程序，我们可以看到哪个服务器已经被启动。目前，我们应该只能看到8080端口的 Netty。我们想RSocket服务器也启动。</p>

<p>去到application.properties文件并定义一个RSocket服务端口为 7000</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">spring.rsocket.server.port</span><span class="p">=</span><span class="s">7000</span>
</code></pre></div></div>

<p>只需要在这里定义端口就足以让Spring Boot为我们启动一个RSocket服务器，因此我们只需要重启应用程序，我们会看到一个Netty RSocket服务器启动在7000端口（例子可以看配套视频的最后）。</p>

<p>现在我们在7000端口有了一个价格服务准备好给客户端通过RSocket去连接获取价格数据了。下一节，我们将连接到这个服务器，并消费价格数据。</p>

<p><a href="https://github.com/zwt-io/rsb/">全部代码在 GitHub</a>：https://github.com/zwt-io/rsb/</p>

:ET