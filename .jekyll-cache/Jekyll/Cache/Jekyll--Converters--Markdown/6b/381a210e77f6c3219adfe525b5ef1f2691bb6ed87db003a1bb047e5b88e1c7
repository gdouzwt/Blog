I"n\<h3 id="多选一选择题和编程题">多选一选择题和编程题</h3>

<h4 id="javacore---14题">JavaCore - 14题</h4>

<ol>
  <li>
    <p>下述哪些说法是正确的？（）</p>

    <blockquote>
      <p>A. 实例变量是用static关键字声明的</p>

      <p>B. 方法变量在方法执行时创建</p>

      <p>C. 实例变量是类的成员变量</p>

      <p>D. 方法变量在使用之前必须初始化</p>
    </blockquote>

    <p>这个题有点怀疑它的准确性，单选题又问“哪些说法是正确的”……<!--more--></p>
  </li>
  <li>
    <p>在设计接口定义时，不用声明可能抛出的异常，可以把它放在具体实现类里处理。（）</p>

    <blockquote>
      <p>A. 错</p>

      <p>B. 对</p>
    </blockquote>

    <p>A 错的</p>
  </li>
  <li>
    <p>定义一个接口使用的关键字是（）</p>

    <blockquote>
      <p>A. interface</p>

      <p>B. class</p>

      <p>C. extends</p>

      <p>D. implements</p>
    </blockquote>

    <p>A</p>
  </li>
  <li>
    <p>在hibernate的多对多关系中，对inverse属性描述正确的是（）</p>

    <blockquote>
      <p>A. 关系双方都在<code class="highlighter-rouge">&lt;set&gt;</code>节点中设置inverse=”true”属性</p>

      <p>B. 一方在<code class="highlighter-rouge">&lt;set&gt;</code>节点中设置inverse=”false”属性，另一方不设置</p>

      <p>C. 关系双方都在<code class="highlighter-rouge">&lt;set&gt;</code>节点中设置inverse=”false”属性</p>

      <p>D. 关系双方都在<code class="highlighter-rouge">&lt;set&gt;</code>节点中去掉inverse属性</p>
    </blockquote>

    <p>很少直接用 hibernate 用Spring Data JPA，还要查一下文档。</p>
  </li>
  <li>
    <p>下列代码的输出是什么？</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kt">int</span><span class="o">[]</span> <span class="n">xxx</span> <span class="o">=</span> <span class="o">{</span><span class="mi">10</span><span class="o">,</span><span class="mi">20</span><span class="o">};</span>
 <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;(</span><span class="mi">10</span><span class="o">);</span>
 <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"01"</span><span class="o">);</span>
 <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"02"</span><span class="o">);</span>
 <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">xxx</span><span class="o">.</span><span class="na">length</span> <span class="o">+</span> <span class="s">","</span> <span class="o">+</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</code></pre></div>    </div>

    <blockquote>
      <p>A. 2,2</p>

      <p>B. 10,2</p>

      <p>C. 2,10</p>

      <p>D. 1,2</p>

      <p>E. 编译错误</p>
    </blockquote>

    <p>A</p>
  </li>
  <li>
    <p>在spring中， applicationContext.xml如下：</p>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"chinese1"</span> <span class="na">class=</span><span class="s">"test1.Chinese"</span> <span class="nt">&gt;</span>
    <span class="c">&lt;!--设置注入：主要方式--&gt;</span>
    <span class="nt">&lt;constructor-arg&gt;</span>
        <span class="nt">&lt;ref</span> <span class="na">local=</span><span class="s">"steelAxe"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/constructor-arg&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"stoneAxe"</span> <span class="na">class=</span><span class="s">"test1.StoneAxe"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"steelAxe"</span> <span class="na">class=</span><span class="s">"test1.SteelAxe"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div>    </div>

    <p>Beantest.java如下：</p>

    <p><code class="highlighter-rouge">ApplicationContext ctx=new ClassPathxmlApplicationContext("applicationContext.xml");</code></p>

    <p>以下说法错误的是（）</p>

    <blockquote>
      <p>A. ApplicationContext实例化时，将所有对象都实例化了</p>

      <p>B. ApplicationContext实例化时，没有实例化Chinese对象</p>

      <p>C. 所有类都只能生成一个对象（即支持单例模式）</p>

      <p>D. 当前的依赖注入方式时构造方法注入</p>
    </blockquote>

    <p>spring 的 xml 配置方式也要熟悉啊，虽然现在基本用 Spring Boot，而且多采用 Java 配置。</p>
  </li>
  <li>
    <p>JDBC中，一条SQL语句的执行结果存放在一个类的对象中，这个类时（）</p>

    <blockquote>
      <p>A. ResultSetMetaData</p>

      <p>B. Driver</p>

      <p>C. DatabaseMetaData</p>

      <p>D. ResultSet</p>
    </blockquote>
  </li>
  <li>
    <p>关于持久化状态的说法正确的是（）</p>

    <blockquote>
      <p>A. 持久化状态只能由load方法转换过来；</p>

      <p>B. 持久化状态和游离状态的区别在于游离态没有对应的数据库记录；</p>

      <p>C. 持久化状态不能改变；</p>

      <p>D. 调用session的save方法可以改变变成持久化状态</p>
    </blockquote>
  </li>
  <li>
    <p>JDBC中向MySQL发送并执行一个静态sql语句，应创建SQL语句对象的类是（）</p>

    <blockquote>
      <p>A. Statement</p>

      <p>B. ResultSet</p>

      <p>C. Connection</p>

      <p>D. Driver</p>
    </blockquote>
  </li>
  <li>
    <p>下列说法中错误的是：</p>

    <blockquote>
      <p>A. 没有在方法定义中指明throws的方法，不可能抛出checked异常</p>

      <p>B.程序不应该尝试捕捉处理Error</p>

      <p>C. 任何情况下，catch块都不应该将捕获的异常重新抛出</p>

      <p>D. 异常的逃逸可能会导致线程的终止</p>
    </blockquote>
  </li>
  <li>
    <p>System.out.println(Math.floor(-2.1));</p>

    <p>打印的结果为：</p>

    <blockquote>
      <p>A. 2.0</p>

      <p>B. -2.0</p>

      <p>C. -3.0</p>
    </blockquote>
  </li>
  <li>
    <p>以下声明中，错误的是？</p>

    <blockquote>
      <p>A. float f = 1;</p>

      <p>B. float f = 1.2;</p>

      <p>C. float f = (float)1.2;</p>

      <p>D. float f = 12.f;</p>
    </blockquote>
  </li>
  <li>
    <p>设数组Array由以下语句定义int Array = new int[10];则数组的第一个元素的正确引用方法为：</p>

    <blockquote>
      <p>A. Array[]</p>

      <p>B. Array</p>

      <p>C. Array[0]</p>

      <p>D. Array[1]</p>
    </blockquote>
  </li>
  <li>
    <p>try {}里有一个return语句，那么紧跟在这个try后的finally {}里的code会不会被执行？</p>

    <blockquote>
      <p>A. 会执行，在return前执行。</p>

      <p>B. 会执行，在return后执行。</p>

      <p>C. 其余三种说法全错</p>

      <p>D. 不会执行。</p>
    </blockquote>
  </li>
</ol>

<h4 id="jsp---4题">JSP - 4题</h4>

<ol>
  <li>
    <p>要设置某个JSP页面为错误处理页面，以下page指令正确的是</p>

    <blockquote>
      <p>A. <code class="highlighter-rouge">%@ page extends="javax.servlet.jsp.JspErrorPage"%</code></p>

      <p>B. <code class="highlighter-rouge">%@ page isErrorPage="true"%</code></p>

      <p>C. <code class="highlighter-rouge">%@ page info="error"%</code></p>

      <p>D. <code class="highlighter-rouge">%@ page errorPage="true"%</code></p>
    </blockquote>
  </li>
  <li>
    <p>在J2EE中，${2 + “4”}将输出（）</p>

    <blockquote>
      <p>A. 2 + 4</p>

      <p>B. 6</p>

      <p>C. 不会输出，因为表达式是错误的</p>

      <p>D. 24</p>
    </blockquote>
  </li>
  <li>
    <p>servlet的声明周期由一系列事件组成，把这些事件按照先后顺序排序，以下正确的是（）</p>

    <blockquote>
      <p>A. 实例化，加载类，初始化，请求处理，销毁</p>

      <p>B. 加载类，实例化，初始化，请求处理，销毁</p>

      <p>C. 加载类，实例化，请求处理，初始化，销毁</p>

      <p>D. 加载类，初始化，实例化，请求处理，销毁</p>
    </blockquote>
  </li>
  <li>
    <p>在JSP中，只有一行代码：<code class="highlighter-rouge">&lt;%=' A' + ' B' %&gt;</code>，运行将输出（）</p>

    <blockquote>
      <p>A. 131</p>

      <p>B. AB</p>

      <p>C. A+B</p>

      <p>D. 错误信息，因为表式是错误</p>
    </blockquote>
  </li>
</ol>

<h4 id="数据库---6题">数据库 - 6题</h4>

<h5 id="oracle">Oracle</h5>

<ol>
  <li>
    <p>如下语句：</p>

    <pre><code class="language-plsql">if v_num&gt;5 then
	v_example: =1:
elsif v_num&gt;10 then
	v_example: =2:
elsif v_hum&lt;20 then
	v_example: =3:
elsif v_num&lt;39 then
	v_example: =4:
else
	v_example: =5:
</code></pre>

    <p>如果v_num=37, 则v_example的值是多少？</p>

    <blockquote>
      <p>A. 4</p>

      <p>B. 5</p>

      <p>C. 1</p>

      <p>D. 3</p>

      <p>E. 2</p>
    </blockquote>
  </li>
</ol>

<h5 id="mysql">MySQL</h5>

<ol>
  <li>
    <p>数据库恢复的重要依据是什么？</p>

    <blockquote>
      <p>A. DD</p>

      <p>B. 文档</p>

      <p>C. DBA</p>

      <p>D. 事务日志</p>
    </blockquote>
  </li>
  <li>
    <p>用户经常查询雇员工资增长12%的情况，为提高性能需要建立一个索引，下列那条语句比较合适？</p>

    <blockquote>
      <p>A. create bitmap index my_idx_1 on employee (salary)</p>

      <p>B. create unique index my_idex_1 on employee (salary)</p>

      <p>C. create index my_idx_1 on employee (salary * 1.12)</p>

      <p>D. create index my_idx_1 on employee (salary) reverse</p>
    </blockquote>
  </li>
  <li>
    <p>在创建触发器时，哪一个语句决定了触发器是针对每一行执行一次，还是针对每个语句执行一次？</p>

    <blockquote>
      <p>A. REFERENCING</p>

      <p>B. FOR EACH</p>

      <p>C. NEW</p>

      <p>D. ON</p>
    </blockquote>
  </li>
  <li>
    <p>MySQL的数值处理函数不包含（）。</p>

    <blockquote>
      <p>A. Exp()</p>

      <p>B. Cot()</p>

      <p>C. Cos()</p>

      <p>D. Tan()</p>
    </blockquote>
  </li>
  <li>
    <p>MySQL中，以下哪个函数可以计算出日期之差？</p>

    <blockquote>
      <p>A. DateDiff()</p>

      <p>B. DateSub()</p>

      <p>C. SubDate()</p>

      <p>D. DiffDate()</p>
    </blockquote>

    <p>这题选 <strong>A</strong> 测试过了。<code class="highlighter-rouge">SELECT DateDiff('2019-10-25', now())</code> 现在到 2019 年 10 月 25 日还有几天？</p>
  </li>
</ol>

<h4 id="web基础---6题">Web基础 - 6题</h4>

<ol>
  <li>
    <p>假设有以下的web.xml设定档：  —- 多选题</p>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;security-constraint&gt;</span>
    <span class="nt">&lt;web-resource-collection&gt;</span>
        <span class="nt">&lt;web-resource-name&gt;</span>Login Required<span class="nt">&lt;/web-resource-name&gt;</span>
        <span class="nt">&lt;url-pattern&gt;</span>/delete.jsp<span class="nt">&lt;/url-pattern&gt;</span>
        <span class="nt">&lt;url-pattern&gt;</span>/delete.do<span class="nt">&lt;/url-pattern&gt;</span>
        <span class="nt">&lt;http-method&gt;</span>GET<span class="nt">&lt;/http-method&gt;</span>
        <span class="nt">&lt;http-method&gt;</span>POST<span class="nt">&lt;/http-method&gt;</span>
    <span class="nt">&lt;/web-resource-collection&gt;</span>
    <span class="nt">&lt;auth-constraint&gt;</span>
        <span class="nt">&lt;role-name&gt;</span>admin<span class="nt">&lt;/role-name&gt;</span>
    <span class="nt">&lt;/auth-constraint&gt;</span>
<span class="nt">&lt;/security-constraint&gt;</span>
</code></pre></div>    </div>

    <p>以下描述何者正确？</p>

    <blockquote>
      <ul class="task-list">
        <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />A. 其他角色可以使用GET、POST以外的HTTP方法存取</li>
        <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />B. GET与POST方法只允许admin使用</li>
        <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />C. admin角色只允许使用GET和POST方法</li>
        <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />D. 只有admin角色才可以存取/delete.jsp与/delete.do</li>
      </ul>
    </blockquote>
  </li>
</ol>

<h4 id="html">HTML</h4>

<ol>
  <li>
    <p>HTML中，target属性等于什么值，浏览器才会在一个新的、未命名的窗口中加载文档？</p>

    <blockquote>
      <p>A. _blank</p>

      <p>B. _top</p>

      <p>C. _self</p>

      <p>D. _parent</p>
    </blockquote>
  </li>
  <li>
    <p>在HTML页面中，CSS样式的属性名为background-image对应的style对象的属性名是</p>

    <blockquote>
      <p>A. back-ground</p>

      <p>B. background</p>

      <p>C. image</p>

      <p>D. backgroundImage</p>
    </blockquote>
  </li>
  <li>
    <p>表示放在每个定义术语词之前的HTML代码是？</p>

    <blockquote>
      <p>A. <code class="highlighter-rouge">&lt;dt&gt;</code></p>

      <p>B. <code class="highlighter-rouge">&lt;dl&gt;&lt;/dl&gt;</code></p>

      <p>C. <code class="highlighter-rouge">&lt;dd&gt;</code></p>
    </blockquote>
  </li>
  <li>
    <p>哪个HTML标签用来包含外部的样式表？</p>

    <blockquote>
      <p>A. <code class="highlighter-rouge">&lt;STYLE&gt;</code></p>

      <p>B. <code class="highlighter-rouge">&lt;INCLUDE&gt;</code></p>

      <p>C. <code class="highlighter-rouge">&lt;LINK&gt;</code></p>

      <p>D. <code class="highlighter-rouge">&lt;CSS&gt;</code></p>
    </blockquote>
  </li>
  <li>
    <p>下列关于绝对路径的说法正确的一项是</p>

    <blockquote>
      <p>A. 创建外部链接时，必须使用绝对路径</p>

      <p>B. 使用绝对路径需要考虑源文件的位置</p>

      <p>C. 在绝对路径中，如果目标文件被移动，则链接同时可用</p>

      <p>D. 绝对路径时被链接文档的完整URL，不包含使用的传输协议</p>
    </blockquote>
  </li>
</ol>

<h4 id="软件工程和计算机基础">软件工程和计算机基础</h4>

<h5 id="软件工程">软件工程</h5>

<ol>
  <li>
    <p>程序的三种基本控制结构的共同特点是（）。</p>

    <blockquote>
      <p>A. 不能嵌套使用</p>

      <p>B. 仅用于自动控制系统</p>

      <p>C. 只能用来描述简单程序</p>

      <p>D. 单入口，单出口</p>
    </blockquote>
  </li>
</ol>

<h5 id="计算机基础">计算机基础</h5>

<ol>
  <li>
    <p>32位处理器的最大虚拟地址空间为</p>

    <blockquote>
      <p>A. 16GB</p>

      <p>B. 2GB</p>

      <p>C. 8GB</p>

      <p>D. 4GB</p>
    </blockquote>
  </li>
</ol>

<h4 id="linux">Linux</h4>

<ol>
  <li>
    <p>/dev/hdd3分区表示（）</p>

    <blockquote>
      <p>A. 第4块IDE硬盘的第3个分区，是扩展区</p>

      <p>B. 第3块IDE硬盘的第3个分区，是主分区</p>

      <p>C. 第1块IDE硬盘的第3个分区，是逻辑分区</p>

      <p>D. 第4块IDE硬盘的第3个分区，是主分区或扩展分区</p>
    </blockquote>
  </li>
  <li>
    <p>Linux管道符</p>

    <blockquote>
      <p>A. <code class="highlighter-rouge">&lt;</code></p>

      <p>B. <code class="highlighter-rouge">&gt;</code></p>

      <p>C. <code class="highlighter-rouge">&gt;&gt;</code></p>

      <p>D. <code class="highlighter-rouge">|</code></p>
    </blockquote>
  </li>
</ol>

<h4 id="数据结构与算法">数据结构与算法</h4>

<ol>
  <li>
    <p>设无向图G=(V, E)和G’ =(V’, E’)，如果G’是G的生成树，则下面的说法中错误的是（）</p>

    <blockquote>
      <p>A. G’ 为 G的连通分量</p>

      <p>B. G’ 是 G的一个无环子图</p>

      <p>C. G’ 为 G的子图</p>

      <p>D. G’ 为G的极小连通图且 V = V’</p>
    </blockquote>
  </li>
  <li>
    <p>若长度为 $n$ 的线性表采用顺序存储结构，在其第 $i$ 个位置插入一个新元素的算法的时间复杂度为（）(1&lt;=i&lt;=n+1)。</p>

    <blockquote>
      <p>A. $O(0)$</p>

      <p>B. $O(n)$</p>

      <p>C. $O(1)$</p>

      <p>D. $O(n^2)$</p>
    </blockquote>
  </li>
  <li>
    <p>栈和队列的共同点是</p>

    <blockquote>
      <p>A. 都是先进后出</p>

      <p>B. 没有共同点</p>

      <p>C. 都是先进先出</p>

      <p>D. 只允许在端点处插入和删除元素</p>
    </blockquote>
  </li>
  <li>
    <p>线性表的顺序存储结构和线性表的链式存储结构分别是</p>

    <blockquote>
      <p>A. 顺序存取的存储结构、顺序存取的存储结构</p>

      <p>B. 随机存取的存储结构、随机存取的存储结构</p>

      <p>C. 任意存取的存储结构、任意存取的存储结构</p>

      <p>D. 随机存取的存储结构、顺序存取的存储结构</p>
    </blockquote>
  </li>
</ol>

<h4 id="测试理论-白盒测试">测试理论-&gt;白盒测试</h4>

<ol>
  <li>
    <p>有以下C语言代码段：下列测试用例可以实现条件覆盖的是（）。</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">cal</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">y</span><span class="p">,</span><span class="kt">int</span> <span class="n">z</span><span class="p">){</span>
	<span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="o">&gt;</span><span class="mi">3</span> <span class="o">||</span> <span class="n">y</span><span class="o">&gt;</span><span class="mi">4</span><span class="p">){</span>
        <span class="n">k</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">z</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">){</span>
        <span class="n">k</span> <span class="o">+=</span> <span class="n">z</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">k</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>

    <blockquote>
      <p>A. {x = 4、y = 4、z = 1} {x = 2、y = 5、 z = 3}</p>

      <p>B. {x = 4、y = 4、z = 3} {x = 2、 y = 3、z = 3}</p>

      <p>C. {x = 4、y = 4、z = 1} {x = 2、 y = 5、z = 2}</p>

      <p>D. {x = 4、y = 4、z = 4} {x = 4、 y = 4、z = 3}</p>
    </blockquote>
  </li>
  <li>
    <p>有以下C语言代码段：下列测试用例可以实现判定覆盖的是（）。</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">cal</span><span class="p">(</span><span class="n">intx</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">z</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="o">&gt;</span><span class="mi">3</span><span class="o">&amp;&amp;</span><span class="n">y</span><span class="o">&gt;</span><span class="mi">4</span><span class="p">){</span>
        <span class="n">k</span><span class="o">=</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">((</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">5</span><span class="o">||</span><span class="n">z</span><span class="o">&gt;</span><span class="mi">5</span><span class="p">){</span>
        <span class="n">j</span><span class="o">=</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="o">+</span><span class="n">z</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>

    <blockquote>
      <p>A. {x = 3, y = 5, z = 5} {x = 2, y = 3, z = 5}</p>

      <p>B. {x = 4, y = 5, z = 5} {x = 3, y = 3, z = 5}</p>

      <p>C. {x = 4, y = 5, z = 5} {x = 2, y = 3, z = 5}</p>

      <p>D. {x = 4, y = 5, z = 5} {x = 2, y = 4, z = 5}</p>
    </blockquote>
  </li>
</ol>

<h4 id="编程题">编程题</h4>

<p>按升序顺序输出begin到end闭区间的所有素数（在大于1的自然数中，除了1和它本身以外不再有其他因数）。</p>

<p>无需添加主函数，试题采用 JDK 1.7 编译。</p>

<p>样例一</p>

<blockquote>
  <p>输入</p>

  <p>int begin 1</p>

  <p>int end 10</p>

  <p>输出（int[])</p>

  <p>2，3，5，7</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">baiyi</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestUtils</span> <span class="o">{</span>
    
    <span class="cm">/**
     * 按升序顺序获取闭区间内的素数列表
     *
     * @param begin 开始值
     * @param end 结束值
     * @return 整型数组
     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">getPrimers</span><span class="o">(</span><span class="kt">int</span> <span class="n">begin</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">{</span>
        <span class="c1">// 请在此添加代码</span>
    <span class="o">}</span>
    
    <span class="c1">// 若有需要，请在此处添加辅助变量、方法</span>
<span class="o">}</span>
</code></pre></div></div>

:ET