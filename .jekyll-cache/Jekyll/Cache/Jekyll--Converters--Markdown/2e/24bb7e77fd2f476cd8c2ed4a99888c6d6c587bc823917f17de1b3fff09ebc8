I"†˚<blockquote>
  <p>Enthuware Test Studio Test 2 ÈîôÈ¢òÂõûÈ°æÔºåÈ¢òÁõÆÁºñÂè∑‰∏∫ÊµãËØïÁ≥ªÁªüÁöÑÁºñÂè∑„ÄÇ</p>
</blockquote>

<p><strong>2.</strong>Given:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">loops</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JustLooping</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">j</span><span class="o">;</span>
    <span class="kt">void</span> <span class="nf">showJ</span><span class="o">(){</span>
        <span class="k">while</span><span class="o">(</span><span class="n">j</span><span class="o">&lt;=</span><span class="mi">5</span><span class="o">){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="o">;){</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">j</span><span class="o">+</span><span class="s">" "</span><span class="o">);</span>
                <span class="n">j</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="n">j</span><span class="o">++;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">new</span> <span class="nf">JustLooping</span><span class="o">().</span><span class="na">showJ</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>What is the result?<br />
<strong>You had to select 1 option</strong> <!--more--></p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />It will not compile.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />It will print 1 2 3 4 5 five times.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />It will print 1 3 5 five times.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />It will print 1 2 3 4 5 once.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />It will print 1 2 3 4 5 six times.</li>
</ul>

<h5 id="explanation--2">‚ú®<strong>Explanation</strong>  2</h5>

<p>The point to note here is that the <code class="highlighter-rouge">j</code> in for loop is different from the instance member <code class="highlighter-rouge">j</code>. Therefore, <code class="highlighter-rouge">j++</code> occuring in the <code class="highlighter-rouge">for</code> loop doesn‚Äôt affect the while loop. The <code class="highlighter-rouge">for</code> loop prints 1 2 3 4 5.<br />
The while loop runs <code class="highlighter-rouge">for</code> the values 0 to 5 i.e. 6 iterations. Thus, 1 2 3 4 5 is printed 6 times. Note that after the end of the while loop the value of <code class="highlighter-rouge">j</code> is 6.</p>

<hr />

<p><strong>6.</strong>Given:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//in file Movable.java</span>
<span class="kn">package</span> <span class="n">p1</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Movable</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="n">location</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="kt">void</span> <span class="nf">move</span><span class="o">(</span><span class="kt">int</span> <span class="n">by</span><span class="o">);</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">moveBack</span><span class="o">(</span><span class="kt">int</span> <span class="n">by</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">//in file Donkey.java</span>
<span class="kn">package</span> <span class="n">p2</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">p1.Movable</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Donkey</span> <span class="kd">implements</span> <span class="nc">Movable</span><span class="o">{</span>
    <span class="kt">int</span> <span class="n">location</span> <span class="o">=</span> <span class="mi">200</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">move</span><span class="o">(</span><span class="kt">int</span> <span class="n">by</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">location</span> <span class="o">=</span> <span class="n">location</span><span class="o">+</span><span class="n">by</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">moveBack</span><span class="o">(</span><span class="kt">int</span> <span class="n">by</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">location</span> <span class="o">=</span> <span class="n">location</span><span class="o">-</span><span class="n">by</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">//in file TestClass.java</span>
<span class="kn">package</span> <span class="n">px</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">p1.Movable</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">p2.Donkey</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestClass</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Movable</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Donkey</span><span class="o">();</span>
        <span class="n">m</span><span class="o">.</span><span class="na">move</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
        <span class="n">m</span><span class="o">.</span><span class="na">moveBack</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">location</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Identify the correct statement(s).<br />
<strong>You had to select 1 option</strong></p>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Donkey.java will not compile.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />TestClass.java will not compile.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Movable.java will not compile.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />It will print 190 when TestClass is run.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />It will print 0 when TestClass is run.</li>
</ul>

<h5 id="explanation--6">‚ú®<strong>Explanation</strong>  6</h5>

<p>There is no problem with the code. All variables in an interface are implicitly <code class="highlighter-rouge">public</code>, <code class="highlighter-rouge">static</code>, and <code class="highlighter-rouge">final</code>. All methods in an interface are <code class="highlighter-rouge">public</code>.<br />
There is no need to define them so explicitly. Therefore, the <code class="highlighter-rouge">location</code> variable in <code class="highlighter-rouge">Movable</code> is <code class="highlighter-rouge">public</code> and <code class="highlighter-rouge">static</code> and the <code class="highlighter-rouge">move()</code> method is <code class="highlighter-rouge">public</code>.<br />
Now, when you call <code class="highlighter-rouge">m.move(10)</code> and <code class="highlighter-rouge">m.moveBack(20)</code>, the instance member <code class="highlighter-rouge">location</code> of <code class="highlighter-rouge">Donkey</code> is updated to 190 because¬†¬†the reference <code class="highlighter-rouge">m</code> refers to a <code class="highlighter-rouge">Donkey</code> at run time and so <code class="highlighter-rouge">move</code> and <code class="highlighter-rouge">moveBack</code> methods of <code class="highlighter-rouge">Donkey</code> are invoked at runtime. However, when you print <code class="highlighter-rouge">m.location</code>, it is the Movable‚Äôs <code class="highlighter-rouge">location</code> (which is never updated) that is printed.</p>

<hr />

<p><strong>8.</strong>What will be the result of trying to compile and execute the following program?</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestClass</span><span class="o">{</span>
   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[]</span> <span class="o">){</span>
      <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span>
      <span class="kt">int</span><span class="o">[]</span> <span class="n">iA</span> <span class="o">=</span> <span class="o">{</span><span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">}</span> <span class="o">;</span>
      <span class="n">iA</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">30</span> <span class="o">;</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">+</span> <span class="n">iA</span><span class="o">[</span> <span class="mi">0</span> <span class="o">]</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">iA</span><span class="o">[</span> <span class="mi">1</span> <span class="o">]</span> <span class="o">+</span> <span class="s">"  "</span><span class="o">+</span><span class="n">i</span><span class="o">)</span> <span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><strong>You had to select 1 options</strong></p>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />It will throw <code class="highlighter-rouge">ArrayIndexOutOfBoundsException</code> at Runtime</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Compile time Error.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />It will print 10 20 30</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />It will print 30 20 30</li>
</ul>

<h5 id="explanation--8">‚ú®<strong>Explanation</strong>  8</h5>

<p>The statement <code class="highlighter-rouge">iA[i] = i = 30;</code> will be processed as follows:<br />
<code class="highlighter-rouge">iA[i] = i = 30;</code> üëâ <code class="highlighter-rouge">iA[0] = i = 30;</code>  üëâ  <code class="highlighter-rouge">i = 30; iA[0] = i ;</code> üëâ  <code class="highlighter-rouge">iA[0] = 30;</code></p>

<p>Here is what JLS says on this:<br />
<strong>1</strong> Evaluate Left-Hand Operand First<br />
<strong>2</strong> Evaluate Operands before Operation<br />
<strong>3</strong> Evaluation Respects Parentheses and Precedence<br />
<strong>4</strong> Argument Lists are Evaluated Left-to-Right</p>

<p>For Arrays: First, the dimension expressions are evaluated, left-to-right. If any of the expression evaluations completes abruptly, the expressions to the right of it are not evaluated.</p>

<hr />

<p><strong>11.</strong>Consider the following class :</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span><span class="o">{</span>
   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"open"</span><span class="o">))</span>
         <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="s">"someone"</span><span class="o">))</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello!"</span><span class="o">);</span>
      <span class="k">else</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Go away "</span><span class="o">+</span> <span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Which of the following statements are true if the above program is run with the command line :<br />
<code class="highlighter-rouge">java Test closed</code><br />
<strong>You had to select 1 options</strong></p>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />It will throw <code class="highlighter-rouge">ArrayIndexOutOfBoundsException</code> at runtime.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />It will end without exceptions and will print nothing.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />It will print <code class="highlighter-rouge">Go away</code></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />It will print <code class="highlighter-rouge">Go away</code> and then will throw <code class="highlighter-rouge">ArrayIndexOutOfBoundsException</code>.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />None of the above.</li>
</ul>

<h5 id="explanation--11">‚ú®<strong>Explanation</strong>  11</h5>

<p>As in C and C++, the Java <code class="highlighter-rouge">if</code> statement suffers from the so-called ‚Äúdangling <code class="highlighter-rouge">else</code> problem,‚Äù The problem is that both the outer <code class="highlighter-rouge">if</code> statement and the inner <code class="highlighter-rouge">if</code> statement might conceivably own the <code class="highlighter-rouge">else</code> clause. In this example, one might be tempted to assume that the programmer intended the <code class="highlighter-rouge">else</code> clause to belong to the outer <code class="highlighter-rouge">if</code> statement.</p>

<p>The Java language, like C and C++ and many languages before them, arbitrarily decree that an <code class="highlighter-rouge">else</code> clause belongs to the innermost <code class="highlighter-rouge">if</code> so as the first <code class="highlighter-rouge">if()</code> condition fails (<code class="highlighter-rouge">args[0]</code> not being ‚Äúopen‚Äù) there is no <code class="highlighter-rouge">else</code> associated to execute. So, the program does nothing. The else actually is associated with the second <code class="highlighter-rouge">if</code>.<br />
So had the command line been :<br />
<code class="highlighter-rouge">java Test open</code>, it would have executed the second <code class="highlighter-rouge">if</code> and thrown <code class="highlighter-rouge">ArrayIndexOutOfBoundsException</code>.<br />
If the command line had been:<br />
<code class="highlighter-rouge">java Test open xyz</code>, it would execute the else part(which is associated with the second <code class="highlighter-rouge">if</code>) and would have printed ‚ÄúGo away xyz‚Äù.</p>

<hr />

<p><strong>14.</strong>Which of the following code snippets will compile without any errors?<br />
(Assume that the statement <code class="highlighter-rouge">int x = 0;</code> exists prior to the statements below.)<br />
<strong>You had to select 3 options</strong></p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /><code class="highlighter-rouge">while (false) { x=3; }</code></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="highlighter-rouge">if (false) { x=3; }</code></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="highlighter-rouge">do{ x = 3; } while(false);</code></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="highlighter-rouge">for( int i = 0; i&lt; 0; i++) x = 3;</code></li>
</ul>

<h5 id="explanation--14">‚ú®<strong>Explanation</strong>  14</h5>

<p><code class="highlighter-rouge">while (false) { x=3; }</code> is a compile-time error because the statement <code class="highlighter-rouge">x=3;</code> is not reachable;<br />
Similarly, <code class="highlighter-rouge">for( int i = 0; false; i++) x = 3;</code> is also a compile time error because <code class="highlighter-rouge">x = 3;</code> is unreachable.</p>

<p>In <code class="highlighter-rouge">if(false){ x=3; }</code>, although the body of the condition is unreachable, this is not an error because the JLS explicitly defines this as an exception to the rule. It allows this construct to support optimizations through the conditional compilation. For example,<br />
<code class="highlighter-rouge">if(DEBUG){ System.out.println("beginning task 1"); }</code><br />
Here, the <code class="highlighter-rouge">DEBUG</code> variable can be set to false in the code while generating the production version of the class file, which will allow the compiler to optimize the code by removing the whole if statement entirely from the class file.</p>

<hr />

<p><strong>20.</strong>Given the following code, which of these statements are true?</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">TestClass</span><span class="o">{</span>
   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[]){</span>
      <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
      <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
      <span class="k">for</span> <span class="o">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
         <span class="n">k</span><span class="o">++;</span>
         <span class="k">if</span> <span class="o">(</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">2</span><span class="o">){</span>
            <span class="c1">// line 1</span>
         <span class="o">}</span>
         <span class="n">m</span><span class="o">++;</span>
      <span class="o">}</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="n">k</span> <span class="o">+</span> <span class="s">", "</span> <span class="o">+</span> <span class="n">m</span> <span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><strong>You had to select 3 options</strong></p>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />It will print 3, 2 when line 1 is replaced by <code class="highlighter-rouge">break;</code></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />It will print 3, 2 when line 1 is replaced by <code class="highlighter-rouge">continue</code>.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />It will print 4, 3 when line 1 is replaced by <code class="highlighter-rouge">continue</code>.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />It will print 4, 4 when line 1 is replaced by <code class="highlighter-rouge">i = m++;</code></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />It will print 3, 3 when line 1 is replaced by <code class="highlighter-rouge">i = 4;</code></li>
</ul>

<h5 id="explanation--20">‚ú®<strong>Explanation</strong>  20</h5>

<p>This is a simple loop. All you need to do is execute each statement in your head. For example, if line 1 is replaced by <code class="highlighter-rouge">break</code>:</p>

<blockquote>
  <p>‚ë† k=0, m=0<br />
‚ë° iteration 1: i=0<br />
   ‚á® k = 1<br />
   ‚á® i == 2 is false<br />
   ‚á® m = 1<br />
‚ë¢ iteration 2: i = 1<br />
   ‚á® k=2<br />
   ‚á® i==2 is false<br />
   ‚á® m = 2<br />
‚ë£ iteration 3: i = 2<br />
   ‚á® k=3<br />
   ‚á® i==2 is true<br />
   ‚á® break<br />
‚ë§ print 3, 2</p>
</blockquote>

<hr />

<p><strong>25.</strong>Which of these statements are true?<br />
<strong>You had to select 2 options</strong></p>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />A static method can call other non-static methods in the same class by using the ‚Äòthis‚Äô keyword.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />A calss may contain both static and non-static variables and both static and non-static methods.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Each object of a class has its own copy of each non-static member variable.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Instance methods of a class has it own copy of each non-static member variable.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Instance methods may access local variables of static methods.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />All methods in a class are implicitly passed a ‚Äòthis‚Äô parameter when called.</li>
</ul>

<h5 id="explanation--25">‚ú®<strong>Explanation</strong>  25</h5>

<p>‚Äòthis‚Äô is assigned a reference to the current object automatically by the JVM. Thus, within an instance method <code class="highlighter-rouge">foo</code>, calling <code class="highlighter-rouge">this.foo();</code> is same as calling <code class="highlighter-rouge">foo();</code><br />
Since there is no current object available for a static method, ‚Äòthis‚Äô reference is not available in static methods and therefore it can only be used within instance methods. For the same reason, static methods cannot access non static fields or methods of that class directly i.e. without a reference to an instance of that class.<br />
Note : you can‚Äôt reassign ‚Äòthis‚Äô like this: <code class="highlighter-rouge">this = new Object();</code></p>

<hr />

<p><strong>28.</strong>Which of the following comparisons will yield false?<br />
<strong>You had to select 3 options</strong></p>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /><code class="highlighter-rouge">Boolean.parseBoolean("true") == true</code></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="highlighter-rouge">Boolean.parseBoolean("TrUe") == new Boolean(null);</code></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="highlighter-rouge">new Boolean("TrUe") == new Boolean(true);</code></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /><code class="highlighter-rouge">new Boolean() == false;</code></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /><code class="highlighter-rouge">new Boolean("true") == Boolean.TRUE</code></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="highlighter-rouge">new Boolean("no") == false;</code></li>
</ul>

<h5 id="explanation--28">‚ú®<strong>Explanation</strong>  28</h5>

<p><strong>You need to remember the following points about <code class="highlighter-rouge">Boolean</code>:</strong><br />
<strong>1.</strong> <code class="highlighter-rouge">Boolean</code> class has two constructors - <code class="highlighter-rouge">Boolean(String)</code> and <code class="highlighter-rouge">Boolean(boolean)</code> The <code class="highlighter-rouge">String</code> constructor allocates a <code class="highlighter-rouge">Boolean</code> object representing the value <code class="highlighter-rouge">true</code> if the string argument is not <code class="highlighter-rouge">null</code> and is equal, ignoring case, to the string ‚Äútrue‚Äù. Otherwise, allocate a <code class="highlighter-rouge">Boolean</code> object representing the value <code class="highlighter-rouge">false</code>. Examples: <code class="highlighter-rouge">new Boolean("True")</code> produces a <code class="highlighter-rouge">Boolean</code> object that represents <code class="highlighter-rouge">true</code>. <code class="highlighter-rouge">new Boolean("yes")</code> produces a <code class="highlighter-rouge">Boolean</code> object that represents <code class="highlighter-rouge">false</code>.
The <code class="highlighter-rouge">boolean</code> constructor is self explanatory.<br />
<strong>2.</strong> <code class="highlighter-rouge">Boolean</code> class has two static helper methods for creating booleans - <code class="highlighter-rouge">parseBoolean</code> and <code class="highlighter-rouge">valueOf</code>. <code class="highlighter-rouge">Boolean.parseBoolean(String )</code> method returns a primitive <code class="highlighter-rouge">boolean</code> and not a <code class="highlighter-rouge">Boolean</code> object (Note - Same is with the case with other parseXXX methods such as <code class="highlighter-rouge">Integer.parseInt</code> - they return primitives and not objects). The <code class="highlighter-rouge">boolean</code> returned represents the value <code class="highlighter-rouge">true</code> if the string argument is not null and is equal, ignoring case, to the string ‚Äútrue‚Äù.<br />
<code class="highlighter-rouge">Boolean.valueOf(String )</code> and its overloaded <code class="highlighter-rouge">Boolean.valueOf(boolean )</code> version, on the other hand, work similarly but return a reference to either <code class="highlighter-rouge">Boolean.TRUE</code> or <code class="highlighter-rouge">Boolean.FALSE</code> wrapper objects. Observe that they dont create a new <code class="highlighter-rouge">Boolean</code> object but just return the static constants <code class="highlighter-rouge">TRUE</code> or <code class="highlighter-rouge">FALSE</code> defined in <code class="highlighter-rouge">Boolean</code> class.<br />
<strong>3.</strong> When you use the equality operator ( <code class="highlighter-rouge">==</code> ) with booleans, if exactly one of the operands is a <code class="highlighter-rouge">Boolean</code> wrapper, it is first unboxed into a <code class="highlighter-rouge">boolean</code> primitive and then the two are compared (JLS 15.21.2). If both are <code class="highlighter-rouge">Boolean</code> wrappers, then their references are compared just like in the case of other objects. Thus, <code class="highlighter-rouge">new Boolean("true") == new Boolean("true")</code> is <code class="highlighter-rouge">false</code>, but <code class="highlighter-rouge">new Boolean("true") == Boolean.parseBoolean("true")</code> is true.</p>

<hr />

<p><strong>29.</strong>Identify the valid for loop constructs assuming the following declarations:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Object</span> <span class="n">o</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="nc">Collection</span> <span class="n">c</span> <span class="o">=</span> <span class="c1">//valid collection object.</span>
<span class="kt">int</span><span class="o">[][]</span> <span class="n">ia</span> <span class="o">=</span> <span class="c1">//valid array</span>
</code></pre></div></div>
<p><strong>You had to select 2 options</strong></p>
<ul class="task-list">
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /><code class="highlighter-rouge">for(o : c){ }</code></p>

    <blockquote>
      <p>Cannot use an existing/predefined variable in the variable declaration part.</p>
    </blockquote>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="highlighter-rouge">for(final Object o2 :c){ }</code></p>

    <blockquote>
      <p>final is the only modifier (excluding annotations) that is allowed here.</p>
    </blockquote>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /><code class="highlighter-rouge">for(int i : ia) { }</code></p>

    <blockquote>
      <p>Each element of ia is itself an array. Thus, they cannot be assigned to an <code class="highlighter-rouge">int</code>.</p>
    </blockquote>
  </li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /><code class="highlighter-rouge">for(Iterator it : c.iterator()){ }</code>
    <blockquote>
      <p><code class="highlighter-rouge">c.iterator()</code> does not return any Collection. Note that the following would have been valid:<br />
<code class="highlighter-rouge">Collection&lt;Iterator&gt; c</code> = //some collection that contains Iterator objects<br />
<code class="highlighter-rouge">for(Iterator it : c){ }</code></p>
    </blockquote>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="highlighter-rouge">for(int i : ia[0]){ }</code></p>

    <blockquote>
      <p>Since <code class="highlighter-rouge">ia[0]</code> is an array of ints, this is valid. (It may throw a <code class="highlighter-rouge">NullPointerException</code> or <code class="highlighter-rouge">ArrayIndexOutOfBoundsException</code> at runtime if <code class="highlighter-rouge">ia</code> is not appropriately initialized.)</p>
    </blockquote>
  </li>
</ul>

<h5 id="explanation--29">‚ú®<strong>Explanation</strong>  29</h5>
<p>see above üëÜ</p>

<hr />

<p><strong>33.</strong>Which of these assignments are valid?<br />
<strong>You had to select 3 options</strong></p>
<ul class="task-list">
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="highlighter-rouge">short s = 12;</code></p>

    <blockquote>
      <p>This is valid since 12 can fit into a short and an implicit narrowing conversion can occur.</p>
    </blockquote>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="highlighter-rouge">long g = 012;</code></p>

    <blockquote>
      <p>012 is a valid octal number.</p>
    </blockquote>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /><code class="highlighter-rouge">int i = (int) false;</code></p>

    <blockquote>
      <p>Values of type boolean cannot be converted to any other types.</p>
    </blockquote>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="highlighter-rouge">float f = -123;</code></p>

    <blockquote>
      <p>Implicit widening conversion will occur in this case.</p>
    </blockquote>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /><code class="highlighter-rouge">float d = 0 * 1.5;</code></p>

    <blockquote>
      <p>double cannot be implicitly narrowed to a float even though the value is representable by a float.</p>
    </blockquote>
  </li>
</ul>

<h5 id="explanation--33">‚ú®<strong>Explanation</strong>  33</h5>
<p>Note that<br />
<code class="highlighter-rouge">float d = 0 * 1.5f;</code> and <code class="highlighter-rouge">float d = 0 * (float)1.5;</code> are OK<br />
An implicit narrowing primitive conversion may be used if all of the following conditions are satisfied:<br />
<strong>1.</strong> The expression is a compile time constant expression of type <code class="highlighter-rouge">byte</code>, <code class="highlighter-rouge">char</code>, <code class="highlighter-rouge">short</code>, or <code class="highlighter-rouge">int</code>.<br />
<strong>2.</strong> The type of the variable is <code class="highlighter-rouge">byte</code>, <code class="highlighter-rouge">short</code>, or <code class="highlighter-rouge">char</code>.<br />
<strong>3.</strong> The value of the expression (which is known at compile time, because it is a constant expression) is representable in the type of the variable.<br />
Note that implicit narrowing conversion does not apply to <code class="highlighter-rouge">long</code> or <code class="highlighter-rouge">double</code>. So, <code class="highlighter-rouge">char ch = 30L;</code> will fail even though 30 is representable in <code class="highlighter-rouge">char</code>.</p>

<hr />

<p><strong>44.</strong>What will the following code print?</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestClass</span><span class="o">{</span>
        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
        <span class="kt">int</span> <span class="nf">getX</span><span class="o">(){</span> <span class="k">return</span> <span class="n">x</span><span class="o">;</span> <span class="o">}</span>

        <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">{</span>
            <span class="nc">TestClass</span> <span class="n">tc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TestClass</span><span class="o">();</span>
            <span class="n">tc</span><span class="o">.</span><span class="na">looper</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">tc</span><span class="o">.</span><span class="na">x</span><span class="o">);</span>
        <span class="o">}</span>
        
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">looper</span><span class="o">(){</span>
            <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">while</span><span class="o">(</span> <span class="o">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">getX</span><span class="o">())</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">){</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span> <span class="n">m</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">;</span> <span class="n">m</span><span class="o">--){</span>
                    <span class="n">x</span> <span class="o">=</span> <span class="n">m</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            
       <span class="o">}</span>     
<span class="o">}</span>
</code></pre></div></div>
<p><strong>You had to select 1 option</strong></p>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />It will not compile.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />It will throw an exception at runtime.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />It will print 0.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />It will print 5.</li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />None of these.</p>

    <blockquote>
      <p>This program will compile and run but will never terminate.</p>
    </blockquote>
  </li>
</ul>

<h5 id="explanation--44">‚ú®<strong>Explanation</strong>  44</h5>
<p>Note that <code class="highlighter-rouge">looper()</code> declares an automatic variable <code class="highlighter-rouge">x</code>, which <strong>shadows</strong> the instance variable <code class="highlighter-rouge">x</code>. So when <code class="highlighter-rouge">x = m;</code> is executed, it is the local variable <code class="highlighter-rouge">x</code> that is changed not the instance field <code class="highlighter-rouge">x</code>. So <code class="highlighter-rouge">getX()</code> never returns 0. If you remove <code class="highlighter-rouge">int x = 0;</code> from <code class="highlighter-rouge">looper()</code>, it will print 0 and end.</p>

<hr />

<p><strong>48.</strong>What will the following program print?</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Test</span><span class="o">{</span>
   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[]){</span>
      <span class="kt">int</span> <span class="kt">var</span> <span class="o">=</span> <span class="mi">20</span><span class="o">,</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
      <span class="k">do</span><span class="o">{</span>
         <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
         <span class="k">if</span><span class="o">(</span> <span class="n">i</span><span class="o">++</span> <span class="o">&gt;</span> <span class="kt">var</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
         <span class="o">}</span>
      <span class="o">}</span><span class="k">while</span><span class="o">(</span><span class="n">i</span><span class="o">&lt;</span><span class="kt">var</span><span class="o">--);</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="kt">var</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><strong>You had to select 1 option</strong></p>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />19</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />20</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />21</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />22</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />It will enter an infinite loop.</li>
</ul>

<h5 id="explanation--48">‚ú®<strong>Explanation</strong>  48</h5>
<p>When the first iteration of outer do-while loop starts, <code class="highlighter-rouge">var</code> is 20. Now, the inner loop executes till <code class="highlighter-rouge">i</code> becomes 21.
Now, the condition for outer do-while is checked, <code class="highlighter-rouge">while( 22 &lt; 20 )</code>, [<code class="highlighter-rouge">i</code> is 22 because of the last <code class="highlighter-rouge">i++&gt;var</code> check], thereby making <code class="highlighter-rouge">var</code> 19. And as the condition is <code class="highlighter-rouge">false</code>, the outer loop also ends.
So, 19 is printed.</p>

<hr />

<p><strong>56.</strong>Consider the following code:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
   <span class="no">A</span><span class="o">()</span> <span class="o">{</span>  <span class="n">print</span><span class="o">();</span>   <span class="o">}</span>
   <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"A"</span><span class="o">);</span> <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">B</span> <span class="kd">extends</span> <span class="no">A</span><span class="o">{</span>
   <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span>   <span class="mi">4</span><span class="o">;</span>
   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
      <span class="no">A</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="no">B</span><span class="o">();</span>
      <span class="n">a</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
   <span class="o">}</span>
   <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>What will be the output when class B is run ?<br />
<strong>You had to select 1 option</strong></p>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />It will print A, 4</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />It will print A, A</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />It will print 0, 4</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />It will print 4, 4</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />None of the above.</li>
</ul>

<h5 id="explanation--56">‚ú®<strong>Explanation</strong>  56</h5>
<p>Note that method <code class="highlighter-rouge">print()</code> is overridden in class <code class="highlighter-rouge">B</code>. Due to polymorphism, the method to be executed is selected depending on the class of the actual object.<br />
Here, when an object of class <code class="highlighter-rouge">B</code> is created, first <code class="highlighter-rouge">B</code>‚Äôs default constructor (which is not visible in the code but is automatically provided by the compiler because <code class="highlighter-rouge">B</code> does not define any constructor explicitly) is called. The first line of this constructor is a call to <code class="highlighter-rouge">super()</code>, which invokes <code class="highlighter-rouge">A</code>‚Äôs constructor. <code class="highlighter-rouge">A</code>‚Äôs constructor in turn calls <code class="highlighter-rouge">print()</code>. Now, print is a non-private instance method and is therefore polymorphic, which means, the selection of the method to be executed depends on the class of actual object on which it is invoked. Here, since the class of actual object is <code class="highlighter-rouge">B</code>, <code class="highlighter-rouge">B</code>‚Äôs print is selected instead of <code class="highlighter-rouge">A</code>‚Äôs print. At this point of time, variable <code class="highlighter-rouge">i</code> has not been initialized (because we are still in the middle of initializing <code class="highlighter-rouge">A</code>), so its default value i.e. 0 is printed.<br />
Finally, 4 is printed.</p>

<hr />

<p><strong>58.</strong>What will be the result of attempting to compile and run the following program?</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">TestClass</span><span class="o">{</span>
   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[]){</span>
      <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
      <span class="n">loop</span> <span class="o">:</span>         <span class="c1">// 1</span>
      <span class="o">{</span>
         <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Loop Lable line"</span><span class="o">);</span>
         <span class="k">try</span><span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span>  <span class="o">;</span>  <span class="kc">true</span> <span class="o">;</span>  <span class="n">i</span><span class="o">++</span> <span class="o">){</span>
               <span class="k">if</span><span class="o">(</span> <span class="n">i</span> <span class="o">&gt;</span><span class="mi">5</span><span class="o">)</span> <span class="k">break</span> <span class="n">loop</span><span class="o">;</span>       <span class="c1">// 2</span>
            <span class="o">}</span>
         <span class="o">}</span>
         <span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Exception in loop."</span><span class="o">);</span>
         <span class="o">}</span>
         <span class="k">finally</span><span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"In Finally"</span><span class="o">);</span>      <span class="c1">// 3</span>
         <span class="o">}</span>
      <span class="o">}</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><strong>You had to select 1 option</strong></p>
<ul class="task-list">
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Compilation error at line 1 as this is an invalid syntax for defining a label.</p>

    <blockquote>
      <p>You can apply a label to any code block or a block level statement (such as a for statement) but <strong>not</strong> to declarations. For example: <code class="highlighter-rouge">loopX : int i = 10;</code></p>
    </blockquote>
  </li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Compilation error at line 2 as ‚Äòloop‚Äô is not visible here.</li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />No compilation error and line 3 will be executed.</p>

    <blockquote>
      <p>Even if the <code class="highlighter-rouge">break</code> takes the control out of the block, the <code class="highlighter-rouge">finally</code> clause will be executed.</p>
    </blockquote>
  </li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />No compilation error and line 3 will NOT be executed.</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Only the line with the label loop will be printed.</li>
</ul>

<h5 id="explanation--58">‚ú®<strong>Explanation</strong>  58</h5>
<p>A <code class="highlighter-rouge">break</code> without a label breaks the current loop (i.e. no iterations any more) and a <code class="highlighter-rouge">break</code> with a label tries to pass the control to the given label. ‚ÄòTries to‚Äô means that if the <code class="highlighter-rouge">break</code> is in a <code class="highlighter-rouge">try</code> block and the <code class="highlighter-rouge">try</code> block has a <code class="highlighter-rouge">finally</code> clause associated with it then it will be executed.</p>

<hr />

<p><strong>65.</strong>Consider the following code snippet:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">XXXX</span> <span class="n">m</span> <span class="o">;</span>
<span class="c1">//other code</span>
  <span class="k">switch</span><span class="o">(</span> <span class="n">m</span> <span class="o">){</span>
     <span class="k">case</span> <span class="mi">32</span>  <span class="o">:</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"32"</span><span class="o">);</span>   <span class="k">break</span><span class="o">;</span>
     <span class="k">case</span> <span class="mi">64</span>  <span class="o">:</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"64"</span><span class="o">);</span>   <span class="k">break</span><span class="o">;</span>
     <span class="k">case</span> <span class="mi">128</span> <span class="o">:</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"128"</span><span class="o">);</span>  <span class="k">break</span><span class="o">;</span>
  <span class="o">}</span>
</code></pre></div></div>
<p>What type can ‚Äòm‚Äô be of so that the above code compiles and runs as expected ?<br />
<strong>You had to select 3 options</strong></p>
<ul class="task-list">
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="highlighter-rouge">int m;</code></p>

    <blockquote>
      <p><code class="highlighter-rouge">m</code> can hold all the case values.</p>
    </blockquote>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /><code class="highlighter-rouge">long m;</code></p>

    <blockquote>
      <p>long, <code class="highlighter-rouge">float</code>, <code class="highlighter-rouge">double</code>, and <code class="highlighter-rouge">boolean</code> can never be used as a <code class="highlighter-rouge">switch</code> variable.</p>
    </blockquote>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="highlighter-rouge">char m;</code></p>

    <blockquote>
      <p><code class="highlighter-rouge">m</code> can hold all the case values.</p>
    </blockquote>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /><code class="highlighter-rouge">byte m;</code></p>

    <blockquote>
      <p><code class="highlighter-rouge">m</code> will not be able to hold 128. a <code class="highlighter-rouge">byte</code>‚Äôs range is -128 to 127.</p>
    </blockquote>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="highlighter-rouge">short m;</code></p>

    <blockquote>
      <p><code class="highlighter-rouge">m</code> can hold all the case values.</p>
    </blockquote>
  </li>
</ul>

<h5 id="explanation--65">‚ú®<strong>Explanation</strong>  65</h5>
<p><strong>Here are the rules for a switch statement:</strong><br />
<strong>1.</strong> Only <code class="highlighter-rouge">String</code>, <code class="highlighter-rouge">byte</code>, <code class="highlighter-rouge">char</code>, <code class="highlighter-rouge">short</code>, <code class="highlighter-rouge">int</code>, (and their wrapper classes <code class="highlighter-rouge">Byte</code>, <code class="highlighter-rouge">Character</code>, <code class="highlighter-rouge">Short</code>, and <code class="highlighter-rouge">Integer</code>), and <em>enums</em> can be used as types of a <code class="highlighter-rouge">switch</code> variable. (<code class="highlighter-rouge">String</code> is allowed only since Java 7).<br />
<strong>2.</strong> The case constants must be assignable to the <code class="highlighter-rouge">switch</code> variable. For example, if your <code class="highlighter-rouge">switch</code> variable is of class <code class="highlighter-rouge">String</code>, your case labels must use Strings as well.<br />
<strong>3.</strong> The <code class="highlighter-rouge">switch</code> variable must be <strong>big enough</strong> to hold all the case constants. For example, if the <code class="highlighter-rouge">switch</code> variable is of type <code class="highlighter-rouge">char</code>, then none of the case constants can be greater than 65535 because a <code class="highlighter-rouge">char</code>‚Äôs range is from 0 to 65535.<br />
<strong>4.</strong>  All case labels should be <strong>COMPILE TIME CONSTANTS</strong>.<br />
<strong>5.</strong> No two of the case constant expressions associated with a <code class="highlighter-rouge">switch</code> statement may have the same value.<br />
<strong>6.</strong> At most one <code class="highlighter-rouge">default</code> label may be associated with the same <code class="highlighter-rouge">switch</code> statement.</p>

<hr />
<p><strong>69.</strong>Consider the following code:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Flyer</span><span class="o">{</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">();</span> <span class="o">}</span>

<span class="kd">class</span> <span class="nc">Bird</span> <span class="kd">implements</span> <span class="nc">Flyer</span><span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Bird</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">(){</span> <span class="k">return</span> <span class="n">name</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Eagle</span> <span class="kd">extends</span> <span class="nc">Bird</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">Eagle</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestClass</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">Flyer</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Eagle</span><span class="o">(</span><span class="s">"American Bald Eagle"</span><span class="o">);</span>
        <span class="c1">//PRINT NAME HERE</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Which of the following lines of code will print the name of the Eagle object?<br />
<strong>You had to select 3 options</strong></p>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /><code class="highlighter-rouge">System.out.println(f.name);</code></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="highlighter-rouge">System.out.println(f.getName());</code></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="highlighter-rouge">System.out.println(((Eagle)f).name);</code></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="highlighter-rouge">System.out.println(((Bird)f).getName());</code></li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /><code class="highlighter-rouge">System.out.println(Eagle.name);</code></p>

    <blockquote>
      <p><code class="highlighter-rouge">name</code> is not a <code class="highlighter-rouge">static</code> field in class <code class="highlighter-rouge">Eagle</code>.</p>
    </blockquote>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /><code class="highlighter-rouge">System.out.println(Eagle.getName(f));</code></p>

    <blockquote>
      <p>This option doesn‚Äôt make any sense.</p>
    </blockquote>
  </li>
</ul>

<h5 id="explanation--69">‚ú®<strong>Explanation</strong>  69</h5>
<p>While accessing a method or variable, the compiler will only allow you to access a method or variable that is visible through the class of the reference.<br />
When you try to use <code class="highlighter-rouge">f.name</code>, the class of the reference <code class="highlighter-rouge">f</code> is <code class="highlighter-rouge">Flyer</code> and <code class="highlighter-rouge">Flyer</code> has no field named ‚Äú<code class="highlighter-rouge">name</code>‚Äù, thus, it will not compile. But when you cast <code class="highlighter-rouge">f</code> to <code class="highlighter-rouge">Bird</code> (or <code class="highlighter-rouge">Eagle</code>), the compiler sees that the class <code class="highlighter-rouge">Bird</code> (or <code class="highlighter-rouge">Eagle</code>, because <code class="highlighter-rouge">Eagle</code> inherits from <code class="highlighter-rouge">Bird</code>) does have a field named ‚Äú<code class="highlighter-rouge">name</code>‚Äù so <code class="highlighter-rouge">((Eagle)f).name</code> or <code class="highlighter-rouge">((Bird)f).name</code> will work fine.<br />
<code class="highlighter-rouge">f.getName()</code> will work because <code class="highlighter-rouge">Flyer</code> does have a <code class="highlighter-rouge">getName()</code> method.</p>

<p>üîö</p>
:ET