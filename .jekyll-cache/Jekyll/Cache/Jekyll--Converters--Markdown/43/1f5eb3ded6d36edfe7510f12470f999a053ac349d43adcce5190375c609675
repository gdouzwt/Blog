I"´<h3 id="inner-class">Inner Class</h3>

<p>A class can also be declared within another class. This type of class is called an <em>inner</em> class. If the class declared within another class is explicitly or implicitly declared static, it is called a nested class, not an inner class. The class that contains the inner class is called an <em>enclosing</em> class or an <em>outer</em> class. Consider the following declaration of the <code class="highlighter-rouge">Outer</code> and <code class="highlighter-rouge">Inner</code> classes:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Outer.java</span>
<span class="n">pakcage</span> <span class="n">com</span><span class="o">.</span><span class="na">jdojo</span><span class="o">.</span><span class="na">innerclasses</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Outer</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Inner</span> <span class="o">{</span>
		<span class="c1">// Members of the Inner class go here</span>
	<span class="o">}</span>
	<span class="c1">// Other members of the Outer class go here</span>
<span class="o">}</span>
</code></pre></div></div>

<p>An instance of an inner class can only exist within an instance of its enclosing class. That is, you must have an instance of the enclosing class before you can create an instance of an inner class. This is useful in enforcing the rule that one object cannot exist without the other.</p>

<p>An inner class has full access to all the members, including private members, of its enclosing class.</p>
:ET