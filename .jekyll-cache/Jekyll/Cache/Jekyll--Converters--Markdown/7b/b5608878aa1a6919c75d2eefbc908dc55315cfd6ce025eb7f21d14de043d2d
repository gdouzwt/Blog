I"8<h3 id="前言">前言</h3>

<p>那是经历的第一次面试，绿米联创 HR 面，2019 年 9 月 20 日下午 3 点，在华南理工大学（大学城校区）的图书馆底下的 O’Clock Coffee 咖啡厅。本来此前一天（2019 年 9 月 19 日）晚上 7 点参加了绿米联创的宣讲会，紧接着是 8 点多左右进行线下笔试，笔试时间为一个小时。题目难度中等，其中有“关灯开灯”问题（同 TCL 第 21 题），然后又有经典的输入网站按下回车键到浏览器显示网页经过了什么过程。还有一题是两个人轮流取硬币，最先取完的为胜…… 这类型题目，以前在看 BBC 一个关于算法的纪录片（Algorithms - The Secret Rules of Modern Living - BBC documentary）时候有看到，但是没有记住其中道理，因为到时已经有人翻译制作了中文字幕，所以我就没有翻译了，结果就是印象不够深刻。<!--more--></p>

<p>那晚宣讲会加线下笔试，错过了腾讯的在线笔试，在一个没什么灯光的路边阶梯坐下，抱着笔记本，摄像头监考，光线不好，操作不了，而且后台综合的试题全部是编程题，在剩余的不到 20 分钟内根本就不可能完成，直接提交了空白卷，连自信心被打击的机会都没有了，题目印象也没有，因为根本看不见什么，早知道找个光线好的教室坐着什么的，但是第一次去到华工校园，不熟悉环境。</p>

<p>原本约的下午 3 点开始的面试，提前了十多分钟开始，持续了大概半小时。不过面试结束之后我赶紧拿出笔记本，坐到旁边的桌开始做网易的在线笔试题，这也是下午 3 点开始的。被面试占用了一些时间，后面就不够时间做在线笔试题了，最后十几分钟电池没电直接关机（因为调成高性能状态，且不设置电量少提示）。奇怪我也没有直接放弃，虽然知道最后也是么有办法做完和有机会通过笔试，但还是想办法继续完成考试。当时就走进咖啡厅里面询问是否有插座可以接电，还好有个位置可以充电接着完成考试。</p>

<p>下午 5 点结束了网易笔试，为了节省时间就没去食堂吃饭，在咖啡厅吃个三明治算了，因为接下来 7 点还有商汤科技的在线笔试。商汤的笔试就比较针对 Java 了，有选择题、填空题和简答题。这次也是使用牛客网的考试系统，但是监考过程比腾讯和网易的多了一个手机小程序监控的步骤，还要录屏的。商汤试题刚开始的选择题涉及比较多数据结构的内容，二叉树什么的，填空题有涉及看代码写输出结果的。最后简答题好像有 9 个题，比较多 x 与 y 的区别之类的问题，例如 session 与 cookie 的区别，<code class="highlighter-rouge">ArrayList</code> 与 <code class="highlighter-rouge">LinkedList</code> 的区别，手写单例设计模式，常见的设计模式，Java 的原子类作用和原理， 还有关于 Java 虚拟机内存模型的， <code class="highlighter-rouge">volatile</code> 关键字的作用，后面的没时间，没有写完，中间网络出现点问题，中断一会。但也尽力做，开始有点感觉了，继续加油。</p>

<h3 id="题目回顾">题目回顾</h3>

<p>回顾一些错题，包括日常练习和在线笔试的。</p>

<h4 id="日常练习">日常练习</h4>

<ul>
  <li>一个以”.java”为后缀的源文件：
    <blockquote>
      <p>只能有一个与文件名相同的 <code class="highlighter-rouge">public</code> 类，可以包含其他非 <code class="highlighter-rouge">public</code> 类（不考虑内部类）。</p>
    </blockquote>
  </li>
</ul>

<p>基础概念要清晰。</p>

<ul>
  <li>关于 <code class="highlighter-rouge">equals()</code> 和 <code class="highlighter-rouge">hashcode()</code> 的，对象属性之类的东西。</li>
</ul>

<p>下面论述正确的是（）？</p>
<blockquote>
  <p>A. 如果两个对象的 hashcode 相同，那么它们作为同一个<code class="highlighter-rouge"> HashMap</code> 的 key 时，必然返回同样的值</p>

  <p>B. 如果 a, b 的 hashcode 相同，那么 <code class="highlighter-rouge">a.equals(b)</code> 必须返回 <code class="highlighter-rouge">true</code></p>

  <p>C. 对于一个类，其所有对象的 hashcode 必须不同</p>

  <p>D. 如果 <code class="highlighter-rouge">a.equals(b)</code> 返回 <code class="highlighter-rouge">true</code>，那么 <code class="highlighter-rouge">a,b</code> 两个对象的 hashcode 必须相同</p>
</blockquote>

<p>答案是 <strong>D</strong> 解释如下：</p>

<p>如果两个对象的 hashcode 相同，那么它们作为同一个 <code class="highlighter-rouge">HashMap</code> 的 key 时，必然返回同样的值。如果 a, b 的 hashcode 相同，那么 <code class="highlighter-rouge">a.equals(b)</code> 必须返回 <code class="highlighter-rouge">true</code>，对于一个类，其所有对象的 hashcode 必须不同，如果 <code class="highlighter-rouge">a.equals(b)</code> 返回 <code class="highlighter-rouge">true</code>，那么 <code class="highlighter-rouge">a,b</code> 两个对象的 hashcode 必须相同。</p>

<ul>
  <li>关于计算机网络</li>
</ul>

<p>如果在一个建立了 TCP 连接的 socket 上调用 <code class="highlighter-rouge">recv</code> 函数，返回值为 0，则表示（）</p>

<blockquote>
  <p>A. 对端发送了一段长度为 0 的数据</p>

  <p>B. 对端关闭了连接</p>

  <p>C. 还没有收到对端数据</p>

  <p>D. 连接发生错误</p>
</blockquote>

<p>基础，对于 <strong>TCP</strong> 协议的认识，解阻塞与非阻塞 <code class="highlighter-rouge">recv</code> 返回值没有区分，都是</p>
<blockquote>
  <p>&lt; 0 出错</p>

  <p>= 0 连接关闭</p>

  <p>&lt; 0 接收到数据太小</p>
</blockquote>

<ul>
  <li>关于 JavaBean 的，还有一些 JSP，旧的技术还没有完全淘汰，有时候有必要了解一下。</li>
</ul>

<h4 id="笔试回顾">笔试回顾</h4>

<p>题目原表述和空间要求等已经记不清，凭回忆和草稿恢复题目如下：</p>

<p>输入 $T$ 组数，格式为第 1 行是组数 $T$ ，余下每行 1 个数 $x$ ，对每个 $x$ 求输出对应的 $n$ ，满足 $x \leq S(n)$  的最小值。其中 $S(n)$ 表示 $n$ 的十进制各位之和， $1 \leq T \leq 10$, $1 \leq x \leq 10^5$。</p>

<p>示例输入</p>
<blockquote>
  <p>2</p>

  <p>13</p>

  <p>18</p>
</blockquote>

<p>示例输出</p>
<blockquote>
  <p>49</p>

  <p>99</p>
</blockquote>

<h5 id="java实现">Java实现</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Exam1</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">Scanner</span> <span class="n">stdIn</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span> <span class="no">T</span><span class="o">;</span> <span class="c1">// 组数</span>

        <span class="k">do</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"请输入数据组数T(1 &lt;= T &lt;= 10)："</span><span class="o">);</span>
            <span class="no">T</span> <span class="o">=</span> <span class="n">stdIn</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="no">T</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="no">T</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="o">);</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">x</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">T</span><span class="o">];</span> <span class="c1">// 输入的x</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">T</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">do</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"请输入第%2d 组的 x(1 &lt;= x &lt;= 100000)："</span><span class="o">,</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">));</span>
                <span class="n">x</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">stdIn</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">x</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">x</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="mi">100000</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">number</span> <span class="o">:</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">((</span><span class="n">number</span> <span class="o">%</span> <span class="mi">9</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">?</span> <span class="s">""</span> <span class="o">:</span> <span class="o">(</span><span class="n">number</span> <span class="o">%</span> <span class="mi">9</span><span class="o">));</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">number</span> <span class="o">/</span> <span class="mi">9</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="mi">9</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="思考过程">思考过程</h5>

<p>考试的时候初步想法，输入数据组数 $T$ ，接下来每组的数保存在长度为 $T$ 的整型数组里面。 这只是输入数据的保存，接着就是核心算法部分，思考这个算法要做什么，要寻找什么规律，最终达到题目要求。</p>

<p>我是这样想的，首先实现对于每个 $x$ 可以找到满足条件的 $n$ ，接着再考虑怎么知道这个 $n$ 是最小的，判断的依据是什么？功能实现完善了，再考虑优化时间复杂度或空间复杂度。</p>

<p>初步来看，随着 $x$ 增大，符合条件的 $n$ 将会是一个很大的数，位数肯定超过 Java 支持的数据类型上限，这就是要考虑到的问题。 但可以先从小数入手，先实现在 $x$ 较小的情况下可以运行的程序，接着优化，添加可以处理大数的操作，使得在题目要求的数值范围内可以有效运行。最后才是细化优化。</p>

<p>后来观察了一下这些数字，发现规律很明显，不用很复杂的算法就可以实现了。首先题目要求对于给定的 $x$ 要找到满足 $x \leq S(n)$ 的 $n$ 的最小值，所以最小就是 $x = S(n)$ 的情形。列出一些 $x$ 和 对应的 $n$ 如下：</p>

<blockquote>
  <p>1	…	8	9	10	11	12	…	28</p>

  <p>1	…	8	9	19	29	39	…	1999</p>
</blockquote>

<p>发现满足要求的都是最高位是 1~8 其余位数全部是 9 的数字（不然不可能最小）。所以问题就转化成求 $n$ 的最高位是什么，余下位数共有多少个 9 ，即最高位是 $n$ % 9, 余下有 $n$ / 9 个 9。 因为 $x = 10^5$ 的时候，满足条件的 $n$ 长度是 “最高位的 1 ” + “ 后面11111 个 9 ”， 长度达到 11112 位。 因此用打印字符串作为结果输出。时间复杂度$O(n)$。</p>

<h5 id="总结">总结</h5>

<p>这题和轮流取硬币的那题都涉及到余数相关的性质，感觉有趣，平时解题思维锻炼得少，有时候会将简单问题复杂化，要多练习，希望有提高。</p>

<h3 id="最后">最后</h3>

<p>今天应该报名 Oracle 的 Oracle Certified Java Programmer（1Z0 - 808）, 然后预约 2019 年 10 月 25 日上午 9 点的考试。今天开始到 2019 年底，还有 100 天，开始百日刷题计划。</p>
:ET