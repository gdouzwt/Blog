I"c#<blockquote>
  <p>原文由 Trisha Gee 在当地时间2019年11月25日发布在 <a href="https://blog.jetbrains.com/idea/2019/11/tutorial-reactive-spring-boot-auto-configuration-for-shared-beans/">INTELLIJ IDEA BLOG</a></p>
</blockquote>

<p>这一节我们看一下如何在一个模块中使用另一个不同的模块中的Spring Beans，通过使用自动装配。</p>

<p>在上一节 ，我们创建了一个JavaFX Spring Boot应用程序显示一个空的折线图。在这篇文章，我们要看一下如何为 Spring Beans设置自动装配，以便我们可以在stock-ui模块里面使用在stock-client定义的Beans。</p>

<!--more-->

<h3 id="添加另一个模块的依赖">添加另一个模块的依赖</h3>

<ol>
  <li>打开我们在上一节创建的<code class="highlighter-rouge">ChartController</code>类。这个类将会负责在折线图上更新和显示数据。</li>
  <li>我们的<code class="highlighter-rouge">ChartController</code>需要使用在第二节的<code class="highlighter-rouge">WebClientStockClient</code>，它将使用这个连接到股票价格服务。为客户端创建一个新字段并确保这个类已经导入。</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChartController</span> <span class="o">{</span>
    <span class="nd">@FXML</span>
    <span class="kd">public</span> <span class="nc">LineChart</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Double</span><span class="o">&gt;</span> <span class="n">chart</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">WebClientStockClient</span> <span class="n">webClientStockClient</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ol>
  <li>我们需要给stock-ui模块添加一个对stock-client模块的依赖。</li>
  <li>（提示：我们可以通过在红色的字段上按下Alt+Enter，并选择”Add maven dependency”去让IntelliJ IDEA为我们添加这依赖。它会在Maven的 pom.xml文件添加依赖，所以这个依赖是由构建文件而不是IDE管理的）。</li>
</ol>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.mechanitis<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>stock-client<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;scope&gt;</span>compile<span class="nt">&lt;/scope&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<ol>
  <li>Add a constructor parameter so it gets wired in. 添加到构造函数参数使之注入。</li>
  <li>（提示：如果你在灰色的字段名按下Alt+Enter，IntelliJ IDEA会让你添加构造函数参数，或者我们可以生成构造函数）。</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChartController</span> <span class="o">{</span>
    <span class="nd">@FXML</span>
    <span class="kd">public</span> <span class="nc">LineChart</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Double</span><span class="o">&gt;</span> <span class="n">chart</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">WebClientStockClient</span> <span class="n">webClientStockClient</span><span class="o">;</span>
 
    <span class="kd">public</span> <span class="nf">ChartController</span><span class="o">(</span><span class="nc">WebClientStockClient</span> <span class="n">webClientStockClient</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">webClientStockClient</span> <span class="o">=</span> <span class="n">webClientStockClient</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="创建-webclientstockclient-bean">创建 WebClientStockClient bean</h3>

<p>IntelliJ IDEA 通过告知我们找不到类型为<code class="highlighter-rouge">WebClientStockClient</code>去帮助我们发现<code class="highlighter-rouge">ChartController</code>存在的问题。让我们修复它。</p>

<ol>
  <li>在stock-client模块，我们需要创建一个新的Java类，<code class="highlighter-rouge">ClientConfiguration</code>，并为其添加<code class="highlighter-rouge">@Configuration</code>注解。我们会在这里定义我们的Beans。</li>
  <li>创建一个由<code class="highlighter-rouge">@Bean</code>注解的方法，并且返回值类型为<code class="highlighter-rouge">WebClientStockClient</code>. 为了创建一个这样的东西，我们需要传入一个<code class="highlighter-rouge">webClient</code>参数。</li>
  <li>（提示：我们可以通过在红色的<code class="highlighter-rouge">webClient</code>变量上按下Alt+Enter并选择”create parameter”去让IntelliJ IDEA为这个传进一个参数）。</li>
  <li>定义另一个<code class="highlighter-rouge">@Bean</code>方法，这个返回值类型为<code class="highlighter-rouge">WebClient</code>。我们可以使用WebClient Builder默认设置去创建一个新的实例。</li>
  <li>我们也可以用<code class="highlighter-rouge">@ConditionalOnMissingBean</code>去注解这个方法，表示仅当不存在<code class="highlighter-rouge">WebClient</code>实例时才去创建Bean。我们在这里使用它，因为其它用到这部分代码的地方可能也创建了<code class="highlighter-rouge">WebClient</code>。</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClientConfiguration</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">WebClientStockClient</span> <span class="nf">webClientStockClient</span><span class="o">(</span><span class="nc">WebClient</span> <span class="n">webClient</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">WebClientStockClient</span><span class="o">(</span><span class="n">webClient</span><span class="o">);</span>
    <span class="o">}</span>
 
    <span class="nd">@Bean</span>
    <span class="nd">@ConditionalOnMissingBean</span>
    <span class="kd">public</span> <span class="nc">WebClient</span> <span class="nf">webClient</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">WebClient</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="启用自动装配">启用自动装配</h3>

<p>回到stock-ui模块，IntelliJ IDEA告知我们还找不到这个Bean因为它是定义在不同的模块里并且这个模块不能看到定义在那里的Bean。我们要使用Spring Boot 的自动装配来帮助解决这个问题。</p>

<ol>
  <li>在stock-client的src/main/resources里创建一个META-INF目录。</li>
  <li>在里边创建一个名为spring.factories的文件。</li>
  <li>在spring.properties，将<code class="highlighter-rouge">EnableAutoConfiguration</code>属性的值指向我们的<code class="highlighter-rouge">ClientConfiguration</code>类，这能够让其它使用这个模块的模块能够访问到定义在<code class="highlighter-rouge">ClientConfiguration</code>里面的Bean。</li>
</ol>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="p">=</span><span class="s">com.mechanitis.demo.stockclient.ClientConfiguration</span>
</code></pre></div></div>

<p>现在当我们回到<code class="highlighter-rouge">ChartController</code>类，它知道去哪里找<code class="highlighter-rouge">webClientStockClient</code> Bean了。</p>

<h3 id="总结">总结</h3>

<p>这是本教程的一个小步骤，但这一步让我们可以创建可以被不同的Spring Boot应用程序重用的模块。现在这一步完成了，我们可以<code class="highlighter-rouge">ChartController</code>里面的客户端连接到价格服务，并开始在折线图上实时地显示价格数据。</p>

<p><a href="https://github.com/zwt-io/rsb/">全部代码在 GitHub</a>：https://github.com/zwt-io/rsb/</p>
:ET