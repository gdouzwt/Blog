I"Ö<h2 id="ÂçáÁ∫ßÂà∞-java-se-11-ÂºÄÂèëËÄÖËÄÉËØïÂ§ßÁ∫≤">ÂçáÁ∫ßÂà∞ Java SE 11 ÂºÄÂèëËÄÖËÄÉËØïÂ§ßÁ∫≤</h2>

<h4 id="understanding-modules">Understanding Modules</h4>

<ul>
  <li>Describe the Modular JDK</li>
  <li>Declare modules and enable access between modules</li>
  <li>Describe how a modular project is compiled and run<!--more--></li>
</ul>

<h4 id="migration-to-a-modular-application">Migration to a Modular Application</h4>

<ul>
  <li>Migrate the application developed using a Java version prior to SE 9 to SE 11 including top-down and bottom-up migration, splitting a Java SE 8 application into modules for migration</li>
  <li>Use jdeps to determine dependencies and identify way to address the cyclic dependencies</li>
</ul>

<h4 id="services-in-a-modular-application">Services in a Modular Application</h4>

<ul>
  <li>Describe the components of Services including directives</li>
  <li>Design a service type, load the services using ServiceLoader, check for dependencies of the services including consumer module and provider module</li>
</ul>

<h4 id="local-variable-type-inference">Local-Variable Type Inference</h4>

<ul>
  <li>Use local-variable type inference</li>
  <li>Create and use lambda expressions with local-variable type inferred parameters</li>
</ul>

<h4 id="java-interfaces">Java Interfaces</h4>

<ul>
  <li>Create and use methods in interfaces</li>
  <li>Define and write functional interfaces</li>
</ul>

<h4 id="lambda-expressions">Lambda Expressions</h4>

<ul>
  <li>Create and use lambda expressions</li>
  <li>Use lambda expressions and method references</li>
  <li>Use built-in functional interfaces including Predicate, Consumer, Function, and Supplier</li>
  <li>Use primitive and binary variations of base interfaces of java.util.function package</li>
</ul>

<h4 id="lambda-operations-on-streams">Lambda Operations on Streams</h4>

<ul>
  <li>Extract stream data using map, peek and flatMap methods</li>
  <li>Search stream data using search findFirst, findAny, anyMatch, allMatch and noneMatch methods</li>
  <li>Use the Optional class</li>
  <li>Perform calculations using count, max, min, average and sum stream operations</li>
  <li>Sort a collection using lambda expressions</li>
  <li>Use Collectors with streams, including the groupingBy and partitioningBy operation</li>
</ul>

<h4 id="parallel-streams">Parallel Streams</h4>

<ul>
  <li>Develop the code that use parallel streams</li>
  <li>Implement decomposition and reduction with streams</li>
</ul>

<h4 id="java-file-io-nio2">Java File I/O (NIO.2)</h4>

<ul>
  <li>Use Path interface to operate on file and directory paths</li>
  <li>Use Files class to check, delete, copy or move a file or directory</li>
  <li>Use Stream API with Files</li>
</ul>

<h4 id="language-enhancements">Language Enhancements</h4>

<ul>
  <li>Use try-with-resources construct</li>
  <li>Develop code that handles multiple Exception types in a single catch block</li>
</ul>
:ET