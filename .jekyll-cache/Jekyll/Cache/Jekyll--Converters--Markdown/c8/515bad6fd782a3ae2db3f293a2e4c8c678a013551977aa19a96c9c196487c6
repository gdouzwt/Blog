I"è(<h2 id="exam-objectives">Exam Objectives</h2>

<p>ËÄÉÁÇπÂÜÖÂÆπËßÅ<a href="https://education.oracle.com/java-se-8-programmer-ii/pexam_1Z0-809">Ëøô‰∏™ÈìæÊé•</a></p>

<h4 id="java-class-design">Java Class Design</h4>

<ul>
  <li>Implement encapsulation</li>
  <li>Implement inheritance including visibility modifiers and composition</li>
  <li>Implement polymorphism</li>
  <li>Override <code class="highlighter-rouge">hashCode</code>, <code class="highlighter-rouge">equals</code>, and <code class="highlighter-rouge">toString</code> methods from <code class="highlighter-rouge">Object</code> class</li>
  <li>Create and use singleton classes and immutable classes</li>
  <li>Develop code that uses <code class="highlighter-rouge">static</code> keyword on initialize blocks, variables, methods, and classes<!--more--></li>
</ul>

<h4 id="advanced-java-class-design">Advanced Java Class Design</h4>

<ul>
  <li>Develop code that uses <code class="highlighter-rouge">abstract</code> classes and methods</li>
  <li>Develop code that uses the <code class="highlighter-rouge">final</code> keyword</li>
  <li>Create inner classes including static inner class, local class, nested class, and anonymous inner class</li>
  <li>Use enumerated types including methods, and constructors in an <code class="highlighter-rouge">enum</code> type</li>
  <li>Develop code that declares, implements and/or extends interfaces and use the <code class="highlighter-rouge">@Override</code> annotation.</li>
  <li>Create and use Lambda expressions</li>
</ul>

<h4 id="generics-and-collections">Generics and Collections</h4>

<ul>
  <li>Create and use a generic class</li>
  <li>Create and use <code class="highlighter-rouge">ArrayList</code>, <code class="highlighter-rouge">TreeSet</code>, <code class="highlighter-rouge">TreeMap</code>, and <code class="highlighter-rouge">ArrayDeque</code> objects</li>
  <li>Use <code class="highlighter-rouge">java.util.Comparator</code> and <code class="highlighter-rouge">java.lang.Comparable</code> interfaces</li>
  <li>Collections Streams and Filters</li>
  <li>Iterate using <code class="highlighter-rouge">forEach</code> methods of Streams and List</li>
  <li>Describe Stream interface and Stream pipeline</li>
  <li>Filter a collection by using lambda expressions</li>
  <li>Use method references with Streams</li>
</ul>

<h4 id="lambda-built-in-functional-interfaces">Lambda Built-in Functional Interfaces</h4>

<ul>
  <li>Use the built-in interfaces included in the <code class="highlighter-rouge">java.util.function</code> package such as <code class="highlighter-rouge">Predicate</code>, <code class="highlighter-rouge">Consumer</code>, <code class="highlighter-rouge">Function</code>, and <code class="highlighter-rouge">Supplier</code></li>
  <li>Develop code that uses primitive versions of functional interfaces</li>
  <li>Develop code that uses binary versions of functional interfaces</li>
  <li>Develop code that uses the <code class="highlighter-rouge">UnaryOperator</code> interface</li>
</ul>

<h4 id="java-stream-api">Java Stream API</h4>

<ul>
  <li>Develop code to extract data from an object using <code class="highlighter-rouge">peek()</code> and <code class="highlighter-rouge">map()</code> methods including primitive versions of the <code class="highlighter-rouge">map()</code> method</li>
  <li>Search for data by using search methods of the Stream classes including <code class="highlighter-rouge">findFirst</code>, <code class="highlighter-rouge">findAny</code>, <code class="highlighter-rouge">anyMatch</code>, <code class="highlighter-rouge">allMatch</code>, <code class="highlighter-rouge">noneMatch</code></li>
  <li>Develop code that uses the <code class="highlighter-rouge">Optional</code> class</li>
  <li>Develop code that uses Stream data methods and calculation methods</li>
  <li>Sort a collection using Stream API</li>
  <li>Save results to a collection using the collect method and group/partition data using the Collectors class</li>
  <li>Use <code class="highlighter-rouge">flatMap()</code> methods in the Stream API</li>
</ul>

<h4 id="exceptions-and-assertions">Exceptions and Assertions</h4>

<ul>
  <li>Use try-catch and throw statements</li>
  <li>Use catch, multi-catch, and finally clauses</li>
  <li>Use Autoclose resources with a try-with-resources statement</li>
  <li>Create custom exceptions and Auto-closeable resources</li>
  <li>Test invariants by using assertions</li>
</ul>

<h4 id="use-java-se-8-datetime-api">Use Java SE 8 Date/Time API</h4>

<ul>
  <li>Create and manage date-based and time-based events including a combination of date and time into a single object using <code class="highlighter-rouge">LocalDate</code>, <code class="highlighter-rouge">LocalTime</code>, <code class="highlighter-rouge">LocalDateTime</code>, <code class="highlighter-rouge">Instant</code>, <code class="highlighter-rouge">Period</code>, and <code class="highlighter-rouge">Duration</code></li>
  <li>Work with dates and times across timezones and manage changes resulting from daylight savings including Format date and times values</li>
  <li>Define and create and manage date-based and time-based events using <code class="highlighter-rouge">Instant</code>, <code class="highlighter-rouge">Period</code>, <code class="highlighter-rouge">Duration</code>, and <code class="highlighter-rouge">TemporalUnit</code></li>
</ul>

<h4 id="java-io-fundamentals">Java I/O Fundamentals</h4>

<ul>
  <li>Read and write data from the console</li>
  <li>Use <code class="highlighter-rouge">BufferedReader</code>, <code class="highlighter-rouge">BufferedWriter</code>, <code class="highlighter-rouge">File</code>, <code class="highlighter-rouge">FileReader</code>, <code class="highlighter-rouge">FileWriter</code>, <code class="highlighter-rouge">FileInputStream</code>, <code class="highlighter-rouge">FileOutputStream</code>, <code class="highlighter-rouge">ObjectOutputStream</code>, <code class="highlighter-rouge">ObjectInputStream</code>, and <code class="highlighter-rouge">PrintWriter</code> in the <code class="highlighter-rouge">java.io package</code>.</li>
</ul>

<h4 id="java-file-io-nio2">Java File I/O (NIO.2)</h4>

<ul>
  <li>Use <code class="highlighter-rouge">Path</code> interface to operate on file and directory paths</li>
  <li>Use <code class="highlighter-rouge">Files</code> class to check, read, delete, copy, move, manage metadata of a file or directory</li>
  <li>Use Stream API with NIO.2</li>
</ul>

<h4 id="java-concurrency">Java Concurrency</h4>

<ul>
  <li>Create worker threads using <code class="highlighter-rouge">Runnable</code>, <code class="highlighter-rouge">Callable</code> and use an <code class="highlighter-rouge">ExecutorService</code> to concurrently execute tasks</li>
  <li>Identify potential threading problems among deadlock, starvation, livelock, and race conditions</li>
  <li>Use synchronized keyword and <code class="highlighter-rouge">java.util.concurrent.atomic</code> package to control the order of thread execution</li>
  <li>Use <code class="highlighter-rouge">java.util.concurrent</code> collections and classes including <code class="highlighter-rouge">CyclicBarrier</code> and <code class="highlighter-rouge">CopyOnWriteArrayList</code></li>
  <li>Use parallel Fork/Join Framework</li>
  <li>Use parallel Streams including reduction, decomposition, merging processes, pipelines and performance.</li>
</ul>

<h4 id="building-database-applications-with-jdbc">Building Database Applications with JDBC</h4>

<ul>
  <li>Describe the interfaces that make up the core of the JDBC API including the <code class="highlighter-rouge">Driver</code>, <code class="highlighter-rouge">Connection</code>, <code class="highlighter-rouge">Statement</code>, and <code class="highlighter-rouge">ResultSet</code> interfaces and their relationship to provider implementations</li>
  <li>Identify the components required to connect to a database using the <code class="highlighter-rouge">DriverManager</code> class including the JDBC URL</li>
  <li>Submit queries and read results from the database including creating statements, returning result sets, iterating through the results, and properly closing result sets, statements, and connections</li>
</ul>

<h4 id="localization">Localization</h4>

<ul>
  <li>Read and set the locale by using the <code class="highlighter-rouge">Locale</code> object</li>
  <li>Create and read a Properties file</li>
  <li>Build a resource bundle for each locale and load a resource bundle in an application</li>
</ul>

<h4 id="assume-the-following">Assume the following:</h4>

<ul>
  <li>
    <p><strong>Missing package and import statements</strong>: If sample code do not include package or import statements, and the question does not explicitly refer to these missing statements, then assume that all sample code is in the same package, or import statements exist to support them.</p>
  </li>
  <li>
    <dl>
      <dt>No file or directory path names for classes</dt>
      <dd>
        <p>If a question does not state the file names or directory locations of classes, then assume one of the following, whichever will enable the code to compile and run:</p>
      </dd>
    </dl>

    <ul>
      <li>All classes are in one file</li>
      <li>Each class is contained in a separate file, and all files are in one directory</li>
    </ul>
  </li>
  <li>
    <p><strong>Unintended line breaks</strong>: Sample code might have unintended line breaks. If you see a line of code that looks like it has wrapped, and this creates a situation where the wrapping is significant (for example, a quoted String literal has wrapped), assume that the wrapping is an extension of the same line, and the line does not contain a hard carriage return that would cause a compilation failure.</p>
  </li>
  <li>
    <p><strong>Code fragments</strong>: A code fragment is a small section of source code that is presented without its context. Assume that all necessary supporting code exists and that the supporting environment fully supports the correct compilation and execution of the code shown and its omitted environment.</p>
  </li>
  <li><strong>Descriptive comments</strong>: Take descriptive comments, such as ‚Äúsetter and getters go here,‚Äù at face value. Assume that correct code exists, compiles, and runs successfully to create the described effect.</li>
</ul>

:ET