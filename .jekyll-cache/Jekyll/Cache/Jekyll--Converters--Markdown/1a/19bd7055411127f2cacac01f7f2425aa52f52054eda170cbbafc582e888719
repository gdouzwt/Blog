I""<h3 id="多线程编程">多线程编程</h3>

<h4 id="java-的线程模型">Java 的线程模型</h4>

<h5 id="线程的优先级">线程的优先级</h5>

<h5 id="线程同步问题">线程同步问题</h5>

<h5 id="线程的消息机制">线程的消息机制</h5>

<h5 id="thread-类-和-runnable-接口">Thread 类 和 Runnable 接口<!--more--></h5>

<h4 id="主线程">主线程</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Controlling the main Thread.</span>
<span class="kd">class</span> <span class="nc">CurrentThreadDemo</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
    <span class="nc">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">();</span>

    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Current thread: "</span> <span class="o">+</span> <span class="n">t</span><span class="o">);</span>

    <span class="c1">// change the name of the thread</span>
    <span class="n">t</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"My Thread"</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"After name change: "</span> <span class="o">+</span> <span class="n">t</span><span class="o">);</span>

    <span class="k">try</span> <span class="o">{</span>
      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">n</span><span class="o">--)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Main thread interrupted"</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="创建一个线程">创建一个线程</h5>

<h5 id="实现-runnable-接口">实现 Runnable 接口</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create a second thread.</span>
<span class="kd">class</span> <span class="nc">NewThread</span> <span class="kd">implements</span> <span class="nc">Runnable</span> <span class="o">{</span>
  <span class="nc">Thread</span> <span class="n">t</span><span class="o">;</span>

  <span class="nc">NewThread</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// Create a new, second thread</span>
    <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">"Demo Thread"</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Child thread: "</span> <span class="o">+</span> <span class="n">t</span><span class="o">);</span>
    <span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> <span class="c1">// Start the thread</span>
  <span class="o">}</span>

  <span class="c1">// This is the entry point for the second thread.</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Child Thread: "</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Child interrupted."</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Exiting child thread."</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ThreadDemo</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
    <span class="k">new</span> <span class="nf">NewThread</span><span class="o">();</span> <span class="c1">// create a new thread</span>

    <span class="k">try</span> <span class="o">{</span>
      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Main Thread: "</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Main thread interrupted."</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Main thread exiting."</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="继承-thread-类">继承 Thread 类</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create a second thread by extending Thread</span>
<span class="kd">class</span> <span class="nc">NewThread</span> <span class="kd">extends</span> <span class="nc">Thread</span> <span class="o">{</span>

  <span class="nc">NewThread</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// Create a new, second thread</span>
    <span class="kd">super</span><span class="o">(</span><span class="s">"Demo Thread"</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Child thread: "</span> <span class="o">+</span> <span class="k">this</span><span class="o">);</span>
    <span class="n">start</span><span class="o">();</span> <span class="c1">// Start the thread</span>
  <span class="o">}</span>

  <span class="c1">// This is the entry point for the second thread.</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Child Thread: "</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Child interrupted."</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Exiting child thread."</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ExtendThread</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
    <span class="k">new</span> <span class="nf">NewThread</span><span class="o">();</span> <span class="c1">// create a new thread</span>

    <span class="k">try</span> <span class="o">{</span>
      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Main Thread: "</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Main thread interrupted."</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Main thread exiting."</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="该用哪种方式">该用哪种方式？</h5>

<h4 id="创建多个线程">创建多个线程</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create multiple threads.</span>
<span class="kd">class</span> <span class="nc">NewThread</span> <span class="kd">implements</span> <span class="nc">Runnable</span> <span class="o">{</span>
  <span class="nc">String</span> <span class="n">name</span><span class="o">;</span> <span class="c1">// name of thread</span>
  <span class="nc">Thread</span> <span class="n">t</span><span class="o">;</span>

  <span class="nc">NewThread</span><span class="o">(</span><span class="nc">String</span> <span class="n">threadname</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">threadname</span><span class="o">;</span>
    <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"New thread: "</span> <span class="o">+</span> <span class="n">t</span><span class="o">);</span>
    <span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> <span class="c1">// Start the thread</span>
  <span class="o">}</span>

  <span class="c1">// This is the entry point for thread.</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">"Interrupted"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">" exiting."</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">MultiThreadDemo</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
    <span class="k">new</span> <span class="nf">NewThread</span><span class="o">(</span><span class="s">"One"</span><span class="o">);</span> <span class="c1">// start threads</span>
    <span class="k">new</span> <span class="nf">NewThread</span><span class="o">(</span><span class="s">"Two"</span><span class="o">);</span>
    <span class="k">new</span> <span class="nf">NewThread</span><span class="o">(</span><span class="s">"Three"</span><span class="o">);</span>

    <span class="k">try</span> <span class="o">{</span>
      <span class="c1">// wait for other threads to end</span>
      <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">10000</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Main thread Interrupted"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Main thread exiting."</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="使用-isalive-和-join">使用 <code class="highlighter-rouge">isAlive()</code> 和 <code class="highlighter-rouge">join()</code></h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Using join() to wait for threads to finish.</span>
<span class="kd">class</span> <span class="nc">NewThread</span> <span class="kd">implements</span> <span class="nc">Runnable</span> <span class="o">{</span>
  <span class="nc">String</span> <span class="n">name</span><span class="o">;</span> <span class="c1">// name of thread</span>
  <span class="nc">Thread</span> <span class="n">t</span><span class="o">;</span>

  <span class="nc">NewThread</span><span class="o">(</span><span class="nc">String</span> <span class="n">threadname</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">threadname</span><span class="o">;</span>
    <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"New thread: "</span> <span class="o">+</span> <span class="n">t</span><span class="o">);</span>
    <span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> <span class="c1">// Start the thread</span>
  <span class="o">}</span>

  <span class="c1">// This is the entry point for thread.</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">" interrupted."</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">" exiting."</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">DemoJoin</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
    <span class="nc">NewThread</span> <span class="n">ob1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NewThread</span><span class="o">(</span><span class="s">"One"</span><span class="o">);</span>
    <span class="nc">NewThread</span> <span class="n">ob2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NewThread</span><span class="o">(</span><span class="s">"Two"</span><span class="o">);</span>
    <span class="nc">NewThread</span> <span class="n">ob3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NewThread</span><span class="o">(</span><span class="s">"Three"</span><span class="o">);</span>

    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Thread One is alive: "</span>
                        <span class="o">+</span> <span class="n">ob1</span><span class="o">.</span><span class="na">t</span><span class="o">.</span><span class="na">isAlive</span><span class="o">());</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Thread Two is alive: "</span>
                        <span class="o">+</span> <span class="n">ob2</span><span class="o">.</span><span class="na">t</span><span class="o">.</span><span class="na">isAlive</span><span class="o">());</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Thread Three is alive: "</span>
                        <span class="o">+</span> <span class="n">ob3</span><span class="o">.</span><span class="na">t</span><span class="o">.</span><span class="na">isAlive</span><span class="o">());</span>
    <span class="c1">// wait for threads to finish</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Waiting for threads to finish."</span><span class="o">);</span>
      <span class="n">ob1</span><span class="o">.</span><span class="na">t</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
      <span class="n">ob2</span><span class="o">.</span><span class="na">t</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
      <span class="n">ob3</span><span class="o">.</span><span class="na">t</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Main thread Interrupted"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Thread One is alive: "</span>
                        <span class="o">+</span> <span class="n">ob1</span><span class="o">.</span><span class="na">t</span><span class="o">.</span><span class="na">isAlive</span><span class="o">());</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Thread Two is alive: "</span>
                        <span class="o">+</span> <span class="n">ob2</span><span class="o">.</span><span class="na">t</span><span class="o">.</span><span class="na">isAlive</span><span class="o">());</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Thread Three is alive: "</span>
                        <span class="o">+</span> <span class="n">ob3</span><span class="o">.</span><span class="na">t</span><span class="o">.</span><span class="na">isAlive</span><span class="o">());</span>

    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Main thread exiting."</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="线程优先级">线程优先级</h4>

<h4 id="线程同步">线程同步</h4>

<h5 id="使用同步的方法">使用同步的方法</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This program is not synchronized.</span>
<span class="kd">class</span> <span class="nc">Callme</span> <span class="o">{</span>
  <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="nc">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"["</span> <span class="o">+</span> <span class="n">msg</span><span class="o">);</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Interrupted"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"]"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Caller</span> <span class="kd">implements</span> <span class="nc">Runnable</span> <span class="o">{</span>
  <span class="nc">String</span> <span class="n">msg</span><span class="o">;</span>
  <span class="nc">Callme</span> <span class="n">target</span><span class="o">;</span>
  <span class="nc">Thread</span> <span class="n">t</span><span class="o">;</span>

  <span class="kd">public</span> <span class="nf">Caller</span><span class="o">(</span><span class="nc">Callme</span> <span class="n">targ</span><span class="o">,</span> <span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">target</span> <span class="o">=</span> <span class="n">targ</span><span class="o">;</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>
    <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">target</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Synch</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
    <span class="nc">Callme</span> <span class="n">target</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Callme</span><span class="o">();</span>
    <span class="nc">Caller</span> <span class="n">ob1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Caller</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="s">"Hello"</span><span class="o">);</span>
    <span class="nc">Caller</span> <span class="n">ob2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Caller</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="s">"Synchronized"</span><span class="o">);</span>
   <span class="nc">Caller</span> <span class="n">ob3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Caller</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="s">"World"</span><span class="o">);</span>

    <span class="c1">// wait for threads to end</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="n">ob1</span><span class="o">.</span><span class="na">t</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
      <span class="n">ob2</span><span class="o">.</span><span class="na">t</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
      <span class="n">ob3</span><span class="o">.</span><span class="na">t</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Interrupted"</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="同步语句">同步语句</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This program uses a synchronized block.</span>
<span class="kd">class</span> <span class="nc">Callme</span> <span class="o">{</span>
  <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="nc">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"["</span> <span class="o">+</span> <span class="n">msg</span><span class="o">);</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Interrupted"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"]"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Caller</span> <span class="kd">implements</span> <span class="nc">Runnable</span> <span class="o">{</span>
  <span class="nc">String</span> <span class="n">msg</span><span class="o">;</span>
  <span class="nc">Callme</span> <span class="n">target</span><span class="o">;</span>
  <span class="nc">Thread</span> <span class="n">t</span><span class="o">;</span>

  <span class="kd">public</span> <span class="nf">Caller</span><span class="o">(</span><span class="nc">Callme</span> <span class="n">targ</span><span class="o">,</span> <span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">target</span> <span class="o">=</span> <span class="n">targ</span><span class="o">;</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>
    <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="c1">// synchronize calls to call()</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
    <span class="kd">synchronized</span><span class="o">(</span><span class="n">target</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// synchronized block</span>
      <span class="n">target</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Synch1</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
    <span class="nc">Callme</span> <span class="n">target</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Callme</span><span class="o">();</span>
    <span class="nc">Caller</span> <span class="n">ob1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Caller</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="s">"Hello"</span><span class="o">);</span>
    <span class="nc">Caller</span> <span class="n">ob2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Caller</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="s">"Synchronized"</span><span class="o">);</span>
    <span class="nc">Caller</span> <span class="n">ob3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Caller</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="s">"World"</span><span class="o">);</span>

    <span class="c1">// wait for threads to end</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="n">ob1</span><span class="o">.</span><span class="na">t</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
      <span class="n">ob2</span><span class="o">.</span><span class="na">t</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
      <span class="n">ob3</span><span class="o">.</span><span class="na">t</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Interrupted"</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="线程间通信">线程间通信</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// An incorrect implementation of a producer and consumer.</span>
<span class="kd">class</span> <span class="nc">Q</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>

  <span class="kd">synchronized</span> <span class="kt">int</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Got: "</span> <span class="o">+</span> <span class="n">n</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Put: "</span> <span class="o">+</span> <span class="n">n</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Producer</span> <span class="kd">implements</span> <span class="nc">Runnable</span> <span class="o">{</span>
  <span class="no">Q</span> <span class="n">q</span><span class="o">;</span>

  <span class="nc">Producer</span><span class="o">(</span><span class="no">Q</span> <span class="n">q</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">q</span> <span class="o">=</span> <span class="n">q</span><span class="o">;</span>
    <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">"Producer"</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">q</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">i</span><span class="o">++);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Consumer</span> <span class="kd">implements</span> <span class="nc">Runnable</span> <span class="o">{</span>
  <span class="no">Q</span> <span class="n">q</span><span class="o">;</span>

  <span class="nc">Consumer</span><span class="o">(</span><span class="no">Q</span> <span class="n">q</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">q</span> <span class="o">=</span> <span class="n">q</span><span class="o">;</span>
    <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">"Consumer"</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">q</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">PC</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
    <span class="no">Q</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="no">Q</span><span class="o">();</span>
    <span class="k">new</span> <span class="nf">Producer</span><span class="o">(</span><span class="n">q</span><span class="o">);</span>
    <span class="k">new</span> <span class="nf">Consumer</span><span class="o">(</span><span class="n">q</span><span class="o">);</span>

    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Press Control-C to stop."</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>生产者与消费者的正确玩法</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// A correct implementation of a producer and consumer.</span>
<span class="kd">class</span> <span class="nc">Q</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
  <span class="kt">boolean</span> <span class="n">valueSet</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

  <span class="kd">synchronized</span> <span class="kt">int</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">while</span><span class="o">(!</span><span class="n">valueSet</span><span class="o">)</span>
      <span class="k">try</span> <span class="o">{</span>
        <span class="n">wait</span><span class="o">();</span>

      <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"InterruptedException caught"</span><span class="o">);</span>
      <span class="o">}</span>

      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Got: "</span> <span class="o">+</span> <span class="n">n</span><span class="o">);</span>
      <span class="n">valueSet</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
      <span class="n">notify</span><span class="o">();</span>
      <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">while</span><span class="o">(</span><span class="n">valueSet</span><span class="o">)</span>
      <span class="k">try</span> <span class="o">{</span>
        <span class="n">wait</span><span class="o">();</span>
      <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"InterruptedException caught"</span><span class="o">);</span>
      <span class="o">}</span>

      <span class="k">this</span><span class="o">.</span><span class="na">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
      <span class="n">valueSet</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Put: "</span> <span class="o">+</span> <span class="n">n</span><span class="o">);</span>
      <span class="n">notify</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Producer</span> <span class="kd">implements</span> <span class="nc">Runnable</span> <span class="o">{</span>
  <span class="no">Q</span> <span class="n">q</span><span class="o">;</span>

  <span class="nc">Producer</span><span class="o">(</span><span class="no">Q</span> <span class="n">q</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">q</span> <span class="o">=</span> <span class="n">q</span><span class="o">;</span>
    <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">"Producer"</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">q</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">i</span><span class="o">++);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Consumer</span> <span class="kd">implements</span> <span class="nc">Runnable</span> <span class="o">{</span>
  <span class="no">Q</span> <span class="n">q</span><span class="o">;</span>

  <span class="nc">Consumer</span><span class="o">(</span><span class="no">Q</span> <span class="n">q</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">q</span> <span class="o">=</span> <span class="n">q</span><span class="o">;</span>
    <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">"Consumer"</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">q</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">PCFixed</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
    <span class="no">Q</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="no">Q</span><span class="o">();</span>
    <span class="k">new</span> <span class="nf">Producer</span><span class="o">(</span><span class="n">q</span><span class="o">);</span>
    <span class="k">new</span> <span class="nf">Consumer</span><span class="o">(</span><span class="n">q</span><span class="o">);</span>

    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Press Control-C to stop."</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="死锁">死锁</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// An example of deadlock.</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
  <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">foo</span><span class="o">(</span><span class="no">B</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">();</span>

    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">" entered A.foo"</span><span class="o">);</span>

    <span class="k">try</span> <span class="o">{</span>
      <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"A Interrupted"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">" trying to call B.last()"</span><span class="o">);</span>
    <span class="n">b</span><span class="o">.</span><span class="na">last</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">last</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Inside A.last"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">B</span> <span class="o">{</span>
  <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">bar</span><span class="o">(</span><span class="no">A</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">();</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">" entered B.bar"</span><span class="o">);</span>

    <span class="k">try</span> <span class="o">{</span>
      <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"B Interrupted"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">" trying to call A.last()"</span><span class="o">);</span>
    <span class="n">a</span><span class="o">.</span><span class="na">last</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">last</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Inside A.last"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Deadlock</span> <span class="kd">implements</span> <span class="nc">Runnable</span> <span class="o">{</span>
  <span class="no">A</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="no">A</span><span class="o">();</span>
  <span class="no">B</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="no">B</span><span class="o">();</span>

  <span class="nc">Deadlock</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">setName</span><span class="o">(</span><span class="s">"MainThread"</span><span class="o">);</span>
    <span class="nc">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">"RacingThread"</span><span class="o">);</span>
    <span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>

    <span class="n">a</span><span class="o">.</span><span class="na">foo</span><span class="o">(</span><span class="n">b</span><span class="o">);</span> <span class="c1">// get lock on a in this thread.</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Back in main thread"</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">b</span><span class="o">.</span><span class="na">bar</span><span class="o">(</span><span class="n">a</span><span class="o">);</span> <span class="c1">// get lock on b in other thread.</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Back in other thread"</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
    <span class="k">new</span> <span class="nf">Deadlock</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="线程的挂起恢复和停止">线程的挂起，恢复和停止</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Suspending and resuming a thread for Java 2</span>
<span class="kd">class</span> <span class="nc">NewThread</span> <span class="kd">implements</span> <span class="nc">Runnable</span> <span class="o">{</span>
  <span class="nc">String</span> <span class="n">name</span><span class="o">;</span> <span class="c1">// name of thread</span>
  <span class="nc">Thread</span> <span class="n">t</span><span class="o">;</span>
  <span class="kt">boolean</span> <span class="n">suspendFlag</span><span class="o">;</span>
  
  <span class="nc">NewThread</span><span class="o">(</span><span class="nc">String</span> <span class="n">threadname</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">threadname</span><span class="o">;</span>
    <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"New thread: "</span> <span class="o">+</span> <span class="n">t</span><span class="o">);</span>
    <span class="n">suspendFlag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> <span class="c1">// Start the thread</span>
  <span class="o">}</span>

  <span class="c1">// This is the entry point for thread.</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">15</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>
        <span class="kd">synchronized</span><span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">while</span><span class="o">(</span><span class="n">suspendFlag</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">wait</span><span class="o">();</span>
          <span class="o">}</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">" interrupted."</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">" exiting."</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">mysuspend</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">suspendFlag</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">myresume</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">suspendFlag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="n">notify</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SuspendResume</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
    <span class="nc">NewThread</span> <span class="n">ob1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NewThread</span><span class="o">(</span><span class="s">"One"</span><span class="o">);</span>
    <span class="nc">NewThread</span> <span class="n">ob2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NewThread</span><span class="o">(</span><span class="s">"Two"</span><span class="o">);</span>

    <span class="k">try</span> <span class="o">{</span>
      <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
      <span class="n">ob1</span><span class="o">.</span><span class="na">mysuspend</span><span class="o">();</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Suspending thread One"</span><span class="o">);</span>
      <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
      <span class="n">ob1</span><span class="o">.</span><span class="na">myresume</span><span class="o">();</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Resuming thread One"</span><span class="o">);</span>
      <span class="n">ob2</span><span class="o">.</span><span class="na">mysuspend</span><span class="o">();</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Suspending thread Two"</span><span class="o">);</span>
      <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
      <span class="n">ob2</span><span class="o">.</span><span class="na">myresume</span><span class="o">();</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Resuming thread Two"</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Main thread Interrupted"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// wait for threads to finish</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Waiting for threads to finish."</span><span class="o">);</span>
      <span class="n">ob1</span><span class="o">.</span><span class="na">t</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
      <span class="n">ob2</span><span class="o">.</span><span class="na">t</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Main thread Interrupted"</span><span class="o">);</span>
    <span class="o">}</span>
 
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Main thread exiting."</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="获取一个线程的状态">获取一个线程的状态</h4>

<h4 id="使用多线程编程">使用多线程编程</h4>
:ET