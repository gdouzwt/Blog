I"t`<blockquote>
  <p>原文由 Trisha Gee 在当地时间2019年12月2日发布在 <a href="https://blog.jetbrains.com/idea/2019/12/tutorial-reactive-spring-boot-subscribing-multiple-consumers/">INTELLIJ IDEA BLOG</a></p>
</blockquote>

<p>在这一节，我们更新实时更新图表显示多于一种股票价格，也就意味着订阅多于一个消费者到我们的响应式价格数据流。</p>

<p>在上一步，我们让JavaFX折线图订阅到来自响应式Spring Boot的服务，并实时显示它们。在这一步，我们要更新图表，让它能多次订阅并在同一个图表显示多组数据。</p>

<!--more-->

<h3 id="引入价格订阅器">引入价格订阅器</h3>

<p>那个<code class="highlighter-rouge">ChartController</code>负责管理数据如何显示的，包含了一个将<code class="highlighter-rouge">ChartController</code>自身订阅到客户端的调用，那个客户端监听股票价格服务（请看前面的文章了解<code class="highlighter-rouge">ChartController</code>的初始状态）我们要修改这个，所以我们有不止一个订阅者。</p>

<ol>
  <li>在<code class="highlighter-rouge">ChartController</code>内的订阅者调用，替换<code class="highlighter-rouge">this</code>为一个新的类型的构造函数，<code class="highlighter-rouge">PriceSubscriber</code>. 这个类会负责管理从客户端消费价格数据。</li>
  <li>将<code class="highlighter-rouge">PriceSubscriber</code>作为内部类，它需要实现<code class="highlighter-rouge">Consumer</code>并消费<code class="highlighter-rouge">StockPrice</code>。</li>
  <li>（提示：IntelliJ IDEA能够为我们自动创建这个，如果我们在<code class="highlighter-rouge">PriceSubscriber</code>名称初次敲入时按下Alt+Enter）。</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// 其它代码...</span>
 
    <span class="n">webClientStockClient</span><span class="o">.</span><span class="na">pricesFor</span><span class="o">(</span><span class="n">symbol</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="k">new</span> <span class="nc">PriceSubscriber</span><span class="o">());</span>
<span class="o">}</span>
 
<span class="kd">private</span> <span class="kd">class</span> <span class="nc">PriceSubscriber</span> <span class="kd">implements</span> <span class="nc">Consumer</span><span class="o">&lt;</span><span class="nc">StockPrice</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="将职责移到pricesubscriber">将职责移到PriceSubscriber</h3>

<ol>
  <li>将<code class="highlighter-rouge">accept</code>方法从<code class="highlighter-rouge">ChartController</code>移到<code class="highlighter-rouge">PriceSubscriber</code>。</li>
  <li>从<code class="highlighter-rouge">ChartController</code>当中移除 “implements Consumer”声明。</li>
  <li>将<code class="highlighter-rouge">seriesData</code>从<code class="highlighter-rouge">ChartController</code>移入到<code class="highlighter-rouge">PriceSubscriber</code>。</li>
  <li>以symbol做参数调用<code class="highlighter-rouge">PriceSubscriber</code>构造函数，并更新<code class="highlighter-rouge">PriceSubscriber</code>去接受<code class="highlighter-rouge">this</code>作为构造函数参数。</li>
  <li>（提示：我们可以让 IntelliJ IDEA去创建适当的构造函数，如果我们传入symbol，按下Alt+Enter并选择“Create constructor”)。</li>
  <li>将创建Series操作移入到<code class="highlighter-rouge">PriceSubscriber</code>的构造函数并将series存为字段。</li>
  <li>为series添加getter，因为<code class="highlighter-rouge">ChartController</code>需要获取这个series并添加到图表。</li>
  <li>（提示：IntelliJ IDEA可以由字段生成getters）。</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">class</span> <span class="nc">PriceSubscriber</span> <span class="kd">implements</span> <span class="nc">Consumer</span><span class="o">&lt;</span><span class="nc">StockPrice</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Series</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Double</span><span class="o">&gt;</span> <span class="n">series</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">ObservableList</span><span class="o">&lt;</span><span class="nc">Data</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Double</span><span class="o">&gt;&gt;</span> <span class="n">seriesData</span> <span class="o">=</span> <span class="n">observableArrayList</span><span class="o">();</span>
 
    <span class="kd">private</span> <span class="nf">PriceSubscriber</span><span class="o">(</span><span class="nc">String</span> <span class="n">symbol</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">series</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Series</span><span class="o">&lt;&gt;(</span><span class="n">symbol</span><span class="o">,</span> <span class="n">seriesData</span><span class="o">);</span>
    <span class="o">}</span>
 
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="nc">StockPrice</span> <span class="n">stockPrice</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Platform</span><span class="o">.</span><span class="na">runLater</span><span class="o">(()</span> <span class="o">-&gt;</span>
            <span class="n">seriesData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Data</span><span class="o">&lt;&gt;(</span><span class="n">valueOf</span><span class="o">(</span><span class="n">stockPrice</span><span class="o">.</span><span class="na">getTime</span><span class="o">().</span><span class="na">getSecond</span><span class="o">()),</span>
                                      <span class="n">stockPrice</span><span class="o">.</span><span class="na">getPrice</span><span class="o">()))</span>
        <span class="o">);</span>
    <span class="o">}</span>
 
    <span class="kd">public</span> <span class="nc">Series</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Double</span><span class="o">&gt;</span> <span class="nf">getSeries</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">series</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>让我们修复<code class="highlighter-rouge">ChartController</code>的初始化方法</p>

<ol>
  <li>将新的<code class="highlighter-rouge">PriceSubscriber</code>提取到一个本地变量，我们要在方法的别处使用这个。</li>
  <li>将这个<code class="highlighter-rouge">priceSubscriber</code>移动靠近方法顶部，然后在<code class="highlighter-rouge">data.add</code>里面调用getter。</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChartController</span> <span class="o">{</span>
    <span class="nd">@FXML</span>
    <span class="kd">private</span> <span class="nc">LineChart</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Double</span><span class="o">&gt;</span> <span class="n">chart</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">WebClientStockClient</span> <span class="n">webClientStockClient</span><span class="o">;</span>
 
    <span class="kd">public</span> <span class="nf">ChartController</span><span class="o">(</span><span class="nc">WebClientStockClient</span> <span class="n">webClientStockClient</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">webClientStockClient</span> <span class="o">=</span> <span class="n">webClientStockClient</span><span class="o">;</span>
    <span class="o">}</span>
 
    <span class="nd">@FXML</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">symbol</span> <span class="o">=</span> <span class="s">"SYMBOL"</span><span class="o">;</span>
        <span class="nc">PriceSubscriber</span> <span class="n">priceSubscriber</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriceSubscriber</span><span class="o">(</span><span class="n">symbol</span><span class="o">);</span>
        
        <span class="nc">ObservableList</span><span class="o">&lt;</span><span class="nc">Series</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Double</span><span class="o">&gt;&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="n">observableArrayList</span><span class="o">();</span>
        <span class="n">data</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">priceSubscriber</span><span class="o">.</span><span class="na">getSeries</span><span class="o">());</span>
        <span class="n">chart</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
 
        <span class="n">webClientStockClient</span><span class="o">.</span><span class="na">pricesFor</span><span class="o">(</span><span class="n">symbol</span><span class="o">)</span>
                            <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">priceSubscriber</span><span class="o">);</span>
    <span class="o">}</span>
 
    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">PriceSubscriber</span> <span class="kd">implements</span> <span class="nc">Consumer</span><span class="o">&lt;</span><span class="nc">StockPrice</span><span class="o">&gt;</span> <span class="o">{</span>
        <span class="c1">// 之前代码的细节</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果我们重新运行应用程序，这图表应该像之前那样运行（假设后端服务也在运行），因为我们并没有改变行为，只是重构了订阅。</p>

<h3 id="添加第二个订阅者">添加第二个订阅者</h3>

<ol>
  <li>将<code class="highlighter-rouge">symbol</code>重命名为<code class="highlighter-rouge">symbol1</code>，因为我们要有另一个这东西，重命名symbol本身，然后让我们也重命名<code class="highlighter-rouge">priceSubscriber</code>。</li>
  <li>（提示：使用 rename refactoring，Shift + F6，实现这操作，这样确保所有代码仍能通过编译。）</li>
  <li>重复这些行，并将变量名改为<code class="highlighter-rouge">symbol2</code>和<code class="highlighter-rouge">priceSubscribe2</code>。</li>
  <li>（提示：重复行的键盘快捷键是Ctrl+D/⌘D）。</li>
  <li>添加第二个系列数据到图表显示第二组价格数据。</li>
  <li>重复订阅者代码并传入第二个股票代码和第二个订阅者</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">symbol1</span> <span class="o">=</span> <span class="s">"SYMBOL1"</span><span class="o">;</span>
    <span class="nc">PriceSubscriber</span> <span class="n">priceSubscriber1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriceSubscriber</span><span class="o">(</span><span class="n">symbol1</span><span class="o">);</span>
    <span class="nc">String</span> <span class="n">symbol2</span> <span class="o">=</span> <span class="s">"SYMBOL2"</span><span class="o">;</span>
    <span class="nc">PriceSubscriber</span> <span class="n">priceSubscriber2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriceSubscriber</span><span class="o">(</span><span class="n">symbol2</span><span class="o">);</span>
 
    <span class="nc">ObservableList</span><span class="o">&lt;</span><span class="nc">Series</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Double</span><span class="o">&gt;&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="n">observableArrayList</span><span class="o">();</span>
    <span class="n">data</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">priceSubscriber1</span><span class="o">.</span><span class="na">getSeries</span><span class="o">());</span>
    <span class="n">data</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">priceSubscriber2</span><span class="o">.</span><span class="na">getSeries</span><span class="o">());</span>
    <span class="n">chart</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
 
    <span class="n">webClientStockClient</span><span class="o">.</span><span class="na">pricesFor</span><span class="o">(</span><span class="n">symbol1</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">priceSubscriber1</span><span class="o">);</span>
    <span class="n">webClientStockClient</span><span class="o">.</span><span class="na">pricesFor</span><span class="o">(</span><span class="n">symbol2</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">priceSubscriber2</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>现在当我们重新运行应用程序，我们可以看到两个不同的系列在图表上追踪两个不同的股票价格，正如在视频的3:30看到的那样。</p>

<h3 id="整理代码">整理代码</h3>

<p>现在我们的应用程序按预期运行，我们可以重构一下代码如果我们想的话。</p>

<ol>
  <li>我们可以将对订阅者的调用移到接近我们创建订阅者的上方。</li>
  <li>我们可以清楚任意警告，例如让内部类改为静态。</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">symbol1</span> <span class="o">=</span> <span class="s">"SYMBOL1"</span><span class="o">;</span>
    <span class="nc">PriceSubscriber</span> <span class="n">priceSubscriber1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriceSubscriber</span><span class="o">(</span><span class="n">symbol1</span><span class="o">);</span>
    <span class="n">webClientStockClient</span><span class="o">.</span><span class="na">pricesFor</span><span class="o">(</span><span class="n">symbol1</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">priceSubscriber1</span><span class="o">);</span>
 
    <span class="nc">String</span> <span class="n">symbol2</span> <span class="o">=</span> <span class="s">"SYMBOL2"</span><span class="o">;</span>
    <span class="nc">PriceSubscriber</span> <span class="n">priceSubscriber2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriceSubscriber</span><span class="o">(</span><span class="n">symbol2</span><span class="o">);</span>
    <span class="n">webClientStockClient</span><span class="o">.</span><span class="na">pricesFor</span><span class="o">(</span><span class="n">symbol2</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">priceSubscriber2</span><span class="o">);</span>
 
    <span class="nc">ObservableList</span><span class="o">&lt;</span><span class="nc">Series</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Double</span><span class="o">&gt;&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="n">observableArrayList</span><span class="o">();</span>
    <span class="n">data</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">priceSubscriber1</span><span class="o">.</span><span class="na">getSeries</span><span class="o">());</span>
    <span class="n">data</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">priceSubscriber2</span><span class="o">.</span><span class="na">getSeries</span><span class="o">());</span>
    <span class="n">chart</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="额外的重构不在视频中">额外的重构（不在视频中）</h3>

<p>有很多种方式可以进一步重构这些代码使之更容易阅读，减少冗余，或者按职责区别对待。例如，我们可以将对订阅的调用移入到<code class="highlighter-rouge">PriceSubscriber</code>以减少重复。我们甚至可以使用<code class="highlighter-rouge">var</code>如果我们的Java版本支持的话。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChartController</span> <span class="o">{</span>
 
    <span class="c1">// ... fields and constructor ...</span>
 
    <span class="nd">@FXML</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">priceSubscriber1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriceSubscriber</span><span class="o">(</span><span class="s">"SYMBOL1"</span><span class="o">,</span> <span class="n">webClientStockClient</span><span class="o">);</span>
        <span class="kt">var</span> <span class="n">priceSubscriber2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriceSubscriber</span><span class="o">(</span><span class="s">"SYMBOL2"</span><span class="o">,</span> <span class="n">webClientStockClient</span><span class="o">);</span>
 
        <span class="nc">ObservableList</span><span class="o">&lt;</span><span class="nc">Series</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Double</span><span class="o">&gt;&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="n">observableArrayList</span><span class="o">();</span>
        <span class="n">data</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">priceSubscriber1</span><span class="o">.</span><span class="na">getSeries</span><span class="o">());</span>
        <span class="n">data</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">priceSubscriber2</span><span class="o">.</span><span class="na">getSeries</span><span class="o">());</span>
        <span class="n">chart</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
    <span class="o">}</span>
 
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">PriceSubscriber</span> <span class="kd">implements</span> <span class="nc">Consumer</span><span class="o">&lt;</span><span class="nc">StockPrice</span><span class="o">&gt;</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="nc">Series</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Double</span><span class="o">&gt;</span> <span class="n">series</span><span class="o">;</span>
        <span class="kd">private</span> <span class="nc">ObservableList</span><span class="o">&lt;</span><span class="nc">Data</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Double</span><span class="o">&gt;&gt;</span> <span class="n">seriesData</span> <span class="o">=</span> <span class="n">observableArrayList</span><span class="o">();</span>
 
        <span class="kd">private</span> <span class="nf">PriceSubscriber</span><span class="o">(</span><span class="nc">String</span> <span class="n">symbol</span><span class="o">,</span> <span class="nc">WebClientStockClient</span> <span class="n">stockClient</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">series</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Series</span><span class="o">&lt;&gt;(</span><span class="n">symbol</span><span class="o">,</span> <span class="n">seriesData</span><span class="o">);</span>
            <span class="n">stockClient</span><span class="o">.</span><span class="na">pricesFor</span><span class="o">(</span><span class="n">symbol</span><span class="o">)</span>
                       <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="o">}</span>
 
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="nc">StockPrice</span> <span class="n">stockPrice</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Platform</span><span class="o">.</span><span class="na">runLater</span><span class="o">(()</span> <span class="o">-&gt;</span>
              <span class="n">seriesData</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Data</span><span class="o">&lt;&gt;(</span><span class="n">valueOf</span><span class="o">(</span><span class="n">stockPrice</span><span class="o">.</span><span class="na">getTime</span><span class="o">().</span><span class="na">getSecond</span><span class="o">()),</span>
                                        <span class="n">stockPrice</span><span class="o">.</span><span class="na">getPrice</span><span class="o">()))</span>
            <span class="o">);</span>
        <span class="o">}</span>
 
        <span class="kd">private</span> <span class="nc">Series</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Double</span><span class="o">&gt;</span> <span class="nf">getSeries</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">series</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="总结">总结</h3>

<p>所以现在我们有一个JavaFX应用程序，它能从Spring Boot服务订阅不止一种股票价格，而且能作折线图上一多个系列实时显示每组价格数据。</p>

<p><a href="https://github.com/zwt-io/rsb/">全部代码在 GitHub</a>：https://github.com/zwt-io/rsb/</p>
:ET