I"&Š<h2 id="oca-è‡ªæµ‹é¢˜å›žé¡¾">OCA è‡ªæµ‹é¢˜å›žé¡¾</h2>

<ol>
  <li>What is the output of the following code? (Choose all that apply)
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">HasTail</span> <span class="o">{</span> <span class="kt">int</span> <span class="nf">getTailLength</span><span class="o">();</span> <span class="o">}</span> 
<span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Puma</span> <span class="kd">implements</span> <span class="nc">HasTail</span> <span class="o">{</span> 
    <span class="kd">protected</span> <span class="kt">int</span> <span class="nf">getTailLength</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="mi">4</span><span class="o">;}</span> 
<span class="o">}</span> 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Cougar</span> <span class="kd">extends</span> <span class="nc">Puma</span> <span class="o">{</span> 
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span> 
        <span class="nc">Puma</span> <span class="n">puma</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Puma</span><span class="o">();</span> 
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">puma</span><span class="o">.</span><span class="na">getTailLength</span><span class="o">());</span> 
 <span class="o">}</span> 
       
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getTailLength</span><span class="o">(</span><span class="kt">int</span> <span class="n">length</span><span class="o">)</span> <span class="o">{</span><span class="k">return</span> <span class="mi">2</span><span class="o">;}</span> 
<span class="o">}</span> 
</code></pre></div>    </div>
    <blockquote>
      <p><strong>A.</strong> 2</p>

      <p><strong>B.</strong> 4</p>

      <p><strong>C.</strong> The code will not compile because of line 3.</p>

      <p><strong>D.</strong> The code will not compile because of line 5.</p>

      <p><strong>E.</strong> The code will not compile because of line 7.</p>

      <p><strong>F.</strong> The output cannot be determined from the code provided. <!--more--></p>
    </blockquote>

    <p><strong>ç­”æ¡ˆæ˜¯ï¼š</strong> <strong>C</strong>, <strong>D</strong>, <strong>E</strong>. First, the method <code class="highlighter-rouge">getTailLength()</code> in the interface <code class="highlighter-rouge">HasTail</code> is assumed to be <code class="highlighter-rouge">public</code>, since it is part of an interface. The implementation of the method on line 3 is therefore an invalid override, as <code class="highlighter-rouge">protected</code> is a more restrictive access modifier than <code class="highlighter-rouge">public</code>, so option <strong>C</strong> is correct. Next, the class <code class="highlighter-rouge">Cougar</code> implements an overloaded version
of <code class="highlighter-rouge">getTailLength()</code>, but since the declaration in the parent class <code class="highlighter-rouge">Puma</code> is invalid, it needs to implement a <code class="highlighter-rouge">public</code> version of the method. Since it does not, the declaration of <code class="highlighter-rouge">Cougar</code> is invalid, so option <strong>D</strong> is correct. Option <strong>E</strong> is correct, since <code class="highlighter-rouge">Puma</code> is marked <code class="highlighter-rouge">abstract</code> and cannot be instantiated. The overloaded method on line 11 is declared correctly, so option <strong>F</strong> is not correct. Finally, as the code has multiple compiler errors, options <strong>A</strong>, <strong>B</strong>, and <strong>G</strong> can be eliminated.</p>
  </li>
  <li>What is the result of the following program?
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MathFunctions</span> <span class="o">{</span> 
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">addToInt</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">amountToAdd</span><span class="o">)</span> <span class="o">{</span> 
        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">amountToAdd</span><span class="o">;</span> 
    <span class="o">}</span> 
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span> 
        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">15</span><span class="o">;</span> 
        <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span> 
        <span class="nc">MathFunctions</span><span class="o">.</span><span class="na">addToInt</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span> 
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span> <span class="o">}</span> <span class="o">}</span> 
</code></pre></div>    </div>

    <blockquote>
      <p><strong>A.</strong> 10</p>

      <p><strong>B.</strong> 15</p>

      <p><strong>C.</strong> 25</p>

      <p><strong>D.</strong> Compiler error on line 3.</p>

      <p><strong>E.</strong> Compiler error on line 8.</p>

      <p><strong>F.</strong> None of the above.</p>
    </blockquote>

    <p><strong>ç­”æ¡ˆæ˜¯ï¼š</strong> <strong>B.</strong> The code compiles successfully, so options <strong>D</strong> and <strong>E</strong> are incorrect. The value of a cannot be changed by the <code class="highlighter-rouge">addToInt</code> method, no matter what the method does, because only a copy of the variable is passed into the parameter <code class="highlighter-rouge">x</code>. Therefore, a does not change and the output on line 9 is 15.</p>
  </li>
  <li>
    <p>What is the result of the following code?</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="o">{</span><span class="mi">6</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">8</span><span class="o">};</span> 
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span> 
<span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span> 
<span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="mi">2</span><span class="o">]);</span> 
<span class="n">list</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">array</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span> 
<span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> 
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span> 
</code></pre></div>    </div>

    <blockquote>
      <p><strong>A.</strong> [8]</p>

      <p><strong>B.</strong> [9]</p>

      <p><strong>C.</strong> Something like [Ljava.lang.String;@160bc7c0</p>

      <p><strong>D.</strong> An exception is thrown.</p>

      <p><strong>E.</strong> The code does not compile.</p>
    </blockquote>

    <p><strong>ç­”æ¡ˆæ˜¯ï¼š B.</strong> The array is allowed to use an anonymous initializer because it is in the same line as the declaration. The <code class="highlighter-rouge">ArrayList</code> uses the diamond operator allowed since Java 7. This specifies the type matches the one on the left without having to re-type it. After adding the two elements, list contains [6, 8]. We then replace the element at index 1 with 9, resulting in [6, 9]. Finally, we remove the element at index 0, leaving [9]. Option <strong>C</strong> is incorrect because arrays output something like that rather than an <code class="highlighter-rouge">ArrayList</code>.</p>
  </li>
  <li>
    <p>What is the output of the following code?</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Deer</span> <span class="o">{</span> 
    <span class="kd">public</span> <span class="nf">Deer</span><span class="o">()</span> <span class="o">{</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Deer"</span><span class="o">);</span> <span class="o">}</span> 
    <span class="kd">public</span> <span class="nf">Deer</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"DeerAge"</span><span class="o">);</span> <span class="o">}</span> 
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">hasHorns</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span> <span class="o">}</span> 
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span> 
        <span class="nc">Deer</span> <span class="n">deer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Reindeer</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span> 
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">","</span><span class="o">+</span><span class="n">deer</span><span class="o">.</span><span class="na">hasHorns</span><span class="o">());</span> 
    <span class="o">}</span> 
<span class="o">}</span> 
<span class="kd">class</span> <span class="nc">Reindeer</span> <span class="kd">extends</span> <span class="nc">Deer</span> <span class="o">{</span> 
    <span class="kd">public</span> <span class="nf">Reindeer</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Reindeer"</span><span class="o">);</span> <span class="o">}</span> 
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasHorns</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> <span class="o">}</span> 
<span class="o">}</span> 
</code></pre></div>    </div>

    <blockquote>
      <p><strong>A.</strong> DeerReindeer,false</p>

      <p><strong>B.</strong> DeerReindeer,true</p>

      <p><strong>C.</strong> ReindeerDeer,false</p>

      <p><strong>D.</strong> ReindeerDeer,true</p>

      <p><strong>E.</strong> DeerAgeReindeer,false</p>

      <p><strong>F.</strong> DeerAgeReindeer,true</p>

      <p><strong>G.</strong> The code will not compile because of line 7.</p>

      <p><strong>H.</strong> The code will not compile because of line 12.</p>
    </blockquote>

    <p><strong>ç­”æ¡ˆæ˜¯ï¼šA.</strong> The code compiles and runs without issue, so options <strong>G</strong> and <strong>H</strong> are incorrect. First, the <code class="highlighter-rouge">Reindeer</code> object is instantiated using the constructor that takes an <code class="highlighter-rouge">int</code> value. Since there is no explicit call to the parent constructor, the default no-argument <code class="highlighter-rouge">super()</code> is inserted as the first line of the constructor. The output is then <code class="highlighter-rouge">Deer</code>, followed by <code class="highlighter-rouge">Reindeer</code> in the child constructor, so only options <strong>A</strong> and <strong>B</strong> can be correct. Next, the method <code class="highlighter-rouge">hasHorns()</code> looks like an overridden method, but it is actually a <em>hidden method</em> since it is declared <code class="highlighter-rouge">private</code> in the parent class. Because the hidden method is referenced in the parent class, the parent version is used, so the code outputs <code class="highlighter-rouge">false</code>, and option <strong>A</strong> is the correct answer.</p>
  </li>
  <li>
    <p>Which of the following statements are true? (Choose all that apply)</p>

    <blockquote>
      <p><strong>A.</strong> Checked exceptions are intended to be thrown by the JVM (and not the programmer).</p>

      <p><strong>B.</strong> Checked exceptions are required to be caught or declared.</p>

      <p><strong>C.</strong> Errors are intended to be thrown by the JVM (and not the programmer).</p>

      <p><strong>D.</strong> Errors are required to be caught or declared.</p>

      <p><strong>E.</strong> Runtime exceptions are intended to be thrown by the JVM (and not the programmer).</p>

      <p><strong>F.</strong> Runtime exceptions are required to be caught or declared.</p>
    </blockquote>

    <p><strong>ç­”æ¡ˆæ˜¯ï¼šB, C.</strong> Only checked exceptions are required to be handled (caught) or declared. Runtime exceptions are commonly thrown by both the JVM and programmer code. Checked exceptions are usually thrown by programmer code. Errors are intended to be thrown by the JVM. While a programmer could throw one, this would be a <strong>horrible</strong> practice.</p>
  </li>
  <li>
    <p>Which are true of the following code? (Choose all that apply)</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span> 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Grasshopper</span> <span class="o">{</span> 
    <span class="kd">public</span> <span class="nf">Grasshopper</span><span class="o">(</span><span class="nc">String</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span> 
    <span class="n">name</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span> 
<span class="o">}</span> 
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span> 
    <span class="nc">Grasshopper</span> <span class="n">one</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Grasshopper</span><span class="o">(</span><span class="s">"g1"</span><span class="o">);</span> 
    <span class="nc">Grasshopper</span> <span class="n">two</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Grasshopper</span><span class="o">(</span><span class="s">"g2"</span><span class="o">);</span> 
    <span class="n">one</span> <span class="o">=</span> <span class="n">two</span><span class="o">;</span> 
    <span class="n">two</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> 
    <span class="n">one</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> 
<span class="o">}</span> 
<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span> <span class="o">}</span> 
</code></pre></div>    </div>

    <blockquote>
      <p><strong>A.</strong> Immediately after line 9, no grasshopper objects are eligible for garbage collection.</p>

      <p><strong>B.</strong> Immediately after line 10, no grasshopper objects are eligible for garbage collection.</p>

      <p><strong>C.</strong> Immediately after line 9, only one grasshopper object is eligible for garbage collection.</p>

      <p><strong>D.</strong> Immediately after line 10, only one grasshopper object is eligible for garbage collection.</p>

      <p><strong>E.</strong> Immediately after line 11, only one grasshopper object is eligible for garbage collection.</p>

      <p><strong>F.</strong> The code compiles.</p>

      <p><strong>G.</strong> The code does not compile.</p>
    </blockquote>

    <p><strong>ç­”æ¡ˆæ˜¯ï¼šC, D, F.</strong> Immediately after line 9, only <code class="highlighter-rouge">Grasshopper</code> <code class="highlighter-rouge">g1</code> is eligible for garbage collection since both <code class="highlighter-rouge">one</code> and <code class="highlighter-rouge">two</code> point to <code class="highlighter-rouge">Grasshopper</code> <code class="highlighter-rouge">g2</code>. Immediately after line 10, we still only have <code class="highlighter-rouge">Grasshopper</code> <code class="highlighter-rouge">g1</code> eligible for garbage collection. Reference <code class="highlighter-rouge">two</code> points to <code class="highlighter-rouge">g2</code> and reference <code class="highlighter-rouge">two</code> is <code class="highlighter-rouge">null</code>. Immediately after line 11, both <code class="highlighter-rouge">Grasshopper</code> objects are eligible for garbage collection since both <code class="highlighter-rouge">one</code> and <code class="highlighter-rouge">two</code> point to <code class="highlighter-rouge">null</code>. The code does compile. Although it is traditional to declare instance variables early in the class, you donâ€™t have to.</p>
  </li>
  <li>
    <p>What is the output of the following program?</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeedingSchedule</span> <span class="o">{</span> 
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span> 
	<span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> 
	<span class="nl">OUTER:</span> <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">3</span><span class="o">;</span> <span class="o">)</span> 
		<span class="nl">INNER:</span> <span class="k">do</span> <span class="o">{</span> 
            <span class="n">i</span><span class="o">++;</span> <span class="n">x</span><span class="o">++;</span> 
            <span class="k">if</span><span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="o">)</span> <span class="k">break</span> <span class="no">INNER</span><span class="o">;</span> 
            <span class="n">x</span> <span class="o">+=</span> <span class="mi">4</span><span class="o">;</span> 
            <span class="n">j</span><span class="o">++;</span> 
         <span class="o">}</span> <span class="k">while</span><span class="o">(</span><span class="n">j</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="o">);</span> 
 		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span><span class="o">);</span> 
<span class="o">}</span> <span class="o">}</span> 
</code></pre></div>    </div>

    <blockquote>
      <p><strong>A.</strong> 10</p>

      <p><strong>B.</strong> 12</p>

      <p><strong>C.</strong> 13</p>

      <p><strong>D.</strong> 17</p>

      <p><strong>E.</strong> The code will not compile because of line 4.</p>

      <p><strong>F.</strong> The code will not compile because of line 6.</p>
    </blockquote>

    <p><strong>ç­”æ¡ˆæ˜¯ï¼šB.</strong> The code compiles and runs without issue; therefore, options <strong>E</strong> and <strong>F</strong> are incorrect. This type of problem is best examined one loop iteration at a time:</p>

    <ul>
      <li>On the first iteration of the outer loop <code class="highlighter-rouge">i</code> is 0, so the loop continues.</li>
      <li>On the first iteration of the inner loop, <code class="highlighter-rouge">i</code> is updated to 1 and <code class="highlighter-rouge">x</code> to 6. The <code class="highlighter-rouge">if-then</code> statement branch is not executed, and <code class="highlighter-rouge">x</code> is increased to 10 and <code class="highlighter-rouge">j</code> to 1.</li>
      <li>On the second iteration of the inner loop (since <code class="highlighter-rouge">j = 1</code> and <code class="highlighter-rouge">1 &lt;= 2</code>), <code class="highlighter-rouge">i</code> is updated to 2 and <code class="highlighter-rouge">x</code> to 11. At this point, the <code class="highlighter-rouge">if-then</code> branch will evaluate to <code class="highlighter-rouge">true</code> for the remainder of the program run, which causes the flow to break out of the inner loop each time it is reached.</li>
      <li>On the second iteration of the outer loop (since <code class="highlighter-rouge">i = 2</code>), <code class="highlighter-rouge">i</code> is updated to 3 and <code class="highlighter-rouge">x</code> to 12. As before, the inner loop is broken since <code class="highlighter-rouge">x</code> is still greater than 10.</li>
      <li>On the third iteration of the outer loop, the outer loop is broken, as <code class="highlighter-rouge">i</code> is already not less than 3. The most recent value of <code class="highlighter-rouge">x</code>, 12, is output, so the answer is option <strong>B</strong>.</li>
    </ul>
  </li>
  <li>
    <p>Assuming we have a valid, non-null <code class="highlighter-rouge">HenHouse</code> object whose value is initialized by the blank line shown here, which of the following are possible outputs of this application?(Choose all that apply)</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Chicken</span> <span class="o">{}</span> 
<span class="kd">interface</span> <span class="nc">HenHouse</span> <span class="o">{</span> <span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">List</span><span class="o">&lt;</span><span class="nc">Chicken</span><span class="o">&gt;</span> <span class="nf">getChickens</span><span class="o">();</span> <span class="o">}</span> 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChickenSong</span> <span class="o">{</span> 
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span> 
<span class="nc">HenHouse</span> <span class="n">house</span> <span class="o">=</span> <span class="n">______________</span> 
    <span class="nc">Chicken</span> <span class="n">chicken</span> <span class="o">=</span> <span class="n">house</span><span class="o">.</span><span class="na">getChickens</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> 
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">house</span><span class="o">.</span><span class="na">getChickens</span><span class="o">().</span><span class="na">size</span><span class="o">();</span> 
        <span class="n">chicken</span> <span class="o">=</span> <span class="n">house</span><span class="o">.</span><span class="na">getChickens</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">++))</span> <span class="o">{</span> 
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Cluck"</span><span class="o">);</span> 
<span class="o">}</span> <span class="o">}</span> <span class="o">}</span> 
</code></pre></div>    </div>

    <blockquote>
      <p><strong>A.</strong> The code will not compile because of line 6.</p>

      <p><strong>B.</strong> The code will not compile because of lines 7â€“8.</p>

      <p><strong>C.</strong> The application will compile but not produce any output.</p>

      <p><strong>D.</strong> The application will output Cluck exactly once.</p>

      <p><strong>E.</strong> The application will output Cluck more than once.</p>

      <p><strong>F.</strong> The application will compile but produce an exception at runtime.</p>
    </blockquote>

    <p><strong>ç­”æ¡ˆæ˜¯ï¼šD, E, F.</strong> The code compiles without issue, so options <strong>A</strong> and <strong>B</strong> are incorrect. If <code class="highlighter-rouge">house.getChickens()</code> returns an array of one element, the code will output Cluck once, so option <strong>D</strong> is correct. If <code class="highlighter-rouge">house.getChickens()</code> returns an array of multiple elements, the code will output Cluck once for each element in the array, so option <strong>E</strong> is correct. Alternatively, if <code class="highlighter-rouge">house.getChickens()</code> returns an array of zero elements, then the code will throw an <code class="highlighter-rouge">IndexOutOfBoundsException</code> on the call to <code class="highlighter-rouge">house.getChickens().get(0);</code> therefore, option <strong>C</strong> is not possible and option <strong>F</strong> is correct. The code will also throw an exception if the array returned by <code class="highlighter-rouge">house.getChickens()</code> is <code class="highlighter-rouge">null</code>, so option <strong>F</strong> is possible under multiple circumstances.</p>
  </li>
  <li>
    <p>What individual changes, if any, would allow the following code to compile? (Choose all that apply)</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Animal</span> <span class="o">{</span> <span class="kd">public</span> <span class="k">default</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span> <span class="o">}</span> <span class="o">}</span>
 <span class="kd">interface</span> <span class="nc">Mammal</span> <span class="o">{</span> <span class="kd">public</span> <span class="k">default</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span> <span class="o">}</span> <span class="o">}</span>
 <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Otter</span> <span class="kd">implements</span> <span class="nc">Mammal</span><span class="o">,</span> <span class="nc">Animal</span> <span class="o">{}</span>
</code></pre></div>    </div>

    <blockquote>
      <p><strong>A.</strong> The code compiles without issue.</p>

      <p><strong>B.</strong> Remove the <code class="highlighter-rouge">default</code> method modifier and method implementation on line 1.</p>

      <p><strong>C.</strong> Remove the <code class="highlighter-rouge">default</code> method modifier and method implementation on line 2.</p>

      <p><strong>D.</strong> Remove the <code class="highlighter-rouge">default</code> method modifier and method implementation on lines 1 and 2.</p>

      <p><strong>E.</strong> Change the return value on line 1 from <code class="highlighter-rouge">null</code> to <code class="highlighter-rouge">"Animal"</code>.</p>

      <p><strong>F.</strong> Override the <code class="highlighter-rouge">getName()</code> method with an abstract method in the Otter class.</p>

      <p><strong>G.</strong> Override the <code class="highlighter-rouge">getName()</code> method with a concrete method in the Otter class.</p>
    </blockquote>

    <p><strong>ç­”æ¡ˆæ˜¯ï¼šD, F, G.</strong> The code does not compile, since a class cannot inherit two interfaces that both define default methods with the same signature, unless the class implementing the interfaces overrides it with an abstract or concrete method. Therefore, option <strong>A</strong> is incorrect and options <strong>F</strong> and <strong>G</strong> are correct. The alternate approach is to make the <code class="highlighter-rouge">getName()</code> method <code class="highlighter-rouge">abstract</code> in the interfaces, because a class may inherit two abstract methods with the same signature. The change must be made to both interfaces, though, so options <strong>B</strong> and <strong>C</strong> are incorrect if taken individually, and option <strong>D</strong> is correct since the changes are taken together.</p>
  </li>
  <li>
    <p>Which of the following lines can be inserted at line 11 to print true? (Choose all that apply)</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// INSERT CODE HERE</span>
<span class="o">}</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="nc">Predicate</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">p</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div>    </div>

    <blockquote>
      <p>A. System.out.println(test(i -&gt; i == 5));</p>

      <p>B. System.out.println(test(i -&gt; {i == 5;}));</p>

      <p>C. System.out.println(test((i) -&gt; i == 5));</p>

      <p>D. System.out.println(test((int i) -&gt; i == 5);</p>

      <p>E. System.out.println(test((int i) -&gt; {return i == 5;}));</p>

      <p>F. System.out.println(test((i) -&gt; {return i == 5;}));</p>
    </blockquote>

    <p><strong>ç­”æ¡ˆæ˜¯ï¼šA, C, F.</strong> The only functional programming interface you need to memorize for the exam is <code class="highlighter-rouge">Predicate</code>. It takes a single parameter and returns a <code class="highlighter-rouge">boolean</code>. Lambda expressions with one parameter are allowed to omit the parentheses around the parameter list, making options <strong>A</strong> and <strong>C</strong> correct. The return statement is optional when a single statement is in the body, making option <strong>F</strong> correct. Option <strong>B</strong> is incorrect because a return statement must be used if braces are included around the body. Options <strong>D</strong> and <strong>E</strong> are incorrect because the type is <code class="highlighter-rouge">Integer</code> in the predicate and <code class="highlighter-rouge">int</code> in the lambda. <strong>Autoboxing works for collections not inferring predicates.</strong> If these two were changed to <code class="highlighter-rouge">Integer</code>, they would be correct.</p>
  </li>
  <li>
    <p>Which of the following are checked exceptions? (Choose all that apply)</p>

    <blockquote>
      <p><strong>A.</strong> <code class="highlighter-rouge">Exception</code></p>

      <p><strong>B.</strong> <code class="highlighter-rouge">IllegalArgumentException</code></p>

      <p><strong>C.</strong> <code class="highlighter-rouge">IOException</code></p>

      <p><strong>D.</strong> <code class="highlighter-rouge">NullPointerException</code></p>

      <p><strong>E.</strong> <code class="highlighter-rouge">NumberFormatException</code></p>

      <p><strong>F.</strong> <code class="highlighter-rouge">StackOverflowError</code></p>
    </blockquote>

    <p><strong>ç­”æ¡ˆæ˜¯ï¼šA, C.</strong> Option <strong>A</strong> is the exception base class, which is a checked exception. Options <strong>B, D</strong>, and <strong>E</strong> extend <code class="highlighter-rouge">RuntimeException</code> directly or indirectly and therefore are unchecked exceptions. Option <strong>F</strong> is a <code class="highlighter-rouge">throwable</code> and not an exception, and so should not be caught or declared.</p>
  </li>
</ol>

:ET