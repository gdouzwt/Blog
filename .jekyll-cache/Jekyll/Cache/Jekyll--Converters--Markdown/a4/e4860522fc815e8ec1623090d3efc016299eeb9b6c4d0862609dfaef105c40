I"\<p>Java核心技术，说到底基础还不够硬。今天又没有睡觉，状态太差了，那个时候赶着去坐车不能静心做题，这是个教训了，不可以这样的状态下去做笔试题。</p>

<p>到目前为止，参加了4次在线笔试吧，第一次是TCL，很简单，第二次是步步高很多实战类型，第三次是亚信科技，中等上难度，内容全面，居然还考jsp，第四次是CVTE，这个选择题中等难，最后两道编程题，一道关于系统设计的题。<!--more--></p>

<p>得要做个思维导图啊，而且应该是自己的总结，而不是那别人的总结。现在先回顾考过的题目，分类总结一下。</p>

<h3 id="题型方面">题型方面</h3>

<ul>
  <li>单项选择</li>
  <li>不定项选择</li>
  <li>编程题</li>
  <li>简单题/系统设计题</li>
</ul>

<h3 id="java-core-基础考点">Java Core 基础考点</h3>

<ul>
  <li>
    <p>访问控制符 - 基础中的基础， <code class="highlighter-rouge">public</code>, <code class="highlighter-rouge">protected</code>,<code class="highlighter-rouge">private</code>的作用范围。</p>
  </li>
  <li>
    <p>操作符 - 位运算， 按位取反。</p>
  </li>
  <li>
    <p>基本语法- 关键词声明的顺序，<code class="highlighter-rouge">package</code>,<code class="highlighter-rouge">import</code>,<code class="highlighter-rouge">class</code>。</p>
  </li>
  <li>
    <p>Java基本数据类型 - 8种，<code class="highlighter-rouge">int</code>,  <code class="highlighter-rouge">short</code>, <code class="highlighter-rouge">long</code>, <code class="highlighter-rouge">float</code>, <code class="highlighter-rouge">double</code>, <code class="highlighter-rouge">char</code>, <code class="highlighter-rouge">boolean</code>, <code class="highlighter-rouge">byte</code>。</p>
  </li>
  <li>
    <p>异常处理 - <code class="highlighter-rouge">throw</code>, <code class="highlighter-rouge">throws</code>, <code class="highlighter-rouge">try</code>, <code class="highlighter-rouge">catch</code>基本用法，还有涉及控制流的变化，看代码选结果。</p>
  </li>
  <li>
    <p>表达式，基本数据类型声明变量以及初始化赋值，注意<code class="highlighter-rouge">float</code> 和 <code class="highlighter-rouge">double</code>之类的。</p>
  </li>
  <li>
    <p>面向对象特性，继承，以及带上<code class="highlighter-rouge">static</code>关键字的代码块怎样理解？看代码选运行结果。</p>
  </li>
  <li>
    <p>while循环和do-while循环的区别。</p>
  </li>
  <li>
    <p>关于异常体系，运行时异常的类型，要记住。</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">final</code> 关键字的作用，用途说法。</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">String</code> 类的基本API， 字符串基本操作，应该要熟到烂。</p>
  </li>
  <li>
    <p>关于继承和 <code class="highlighter-rouge">static</code> 关键字，静态代码块访问非静态方法之类的，这些也要很清楚，看题要很快就能够判断出来，选择题要快、准才可以。</p>
  </li>
  <li>
    <p>关于类，<code class="highlighter-rouge">new</code> 关键字一些奇怪用法，还有字符串连接，String对于+操作符重载。</p>
  </li>
  <li>
    <p>关于数组的基本语法，操作，有时候还考查一些奇葩的语法，读代码选择结果。例如以下一段代码：</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Announce</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">__x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">__x</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">;</span> <span class="n">__x</span><span class="o">++)</span> <span class="o">;</span>
      <span class="kt">int</span> <span class="n">b</span><span class="err">$</span> <span class="o">=</span> <span class="mi">7</span><span class="o">;</span>
      <span class="kt">long</span><span class="o">[]</span> <span class="n">x</span><span class="o">;</span>
      <span class="nc">Boolean</span><span class="o">[]</span> <span class="n">ba</span><span class="o">[];</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>    </div>

    <p>其实编译没有问题，不过那个<code class="highlighter-rouge">Boolean[] ba[]</code>语句使用了混合C风格与Java风格的数组声明，其实相当于<code class="highlighter-rouge">Boolean[][] ba</code>， 然后重点是理解数组是一种引用类型，<code class="highlighter-rouge">Boolean</code>也是引用类型。如果初始化，初值是什么呢？ 引用类型初始化默认为<code class="highlighter-rouge">null</code> 引用， 而初始化如果指明数组长度为0，即像这样：<code class="highlighter-rouge">Boolean[][] ba = new Boolean[0][0];</code> 则是空数组，打印输出是<code class="highlighter-rouge">[]</code>，什么都没有，如果多维数组，第一维长度是0，那么后面的维数初始化填什么数字也没影响，根本没有内容在里面（一维都空了，自然不会有引用到其他层次的数组了。）</p>
  </li>
  <li>
    <p>考察基础语法关于继承与类型转换的情况，主要有没有发生<code class="highlighter-rouge">ClassCastException</code>， 读代码选结果。主要考察<code class="highlighter-rouge">is-a</code> 关系，和<code class="highlighter-rouge">narrowing cast</code> &amp; <code class="highlighter-rouge">widening cast</code> 的区别。</p>
  </li>
  <li>
    <p>然后是<code class="highlighter-rouge">java.io</code> 里面的内容，文件操作， 文件输入输出流， <code class="highlighter-rouge">IOException</code> 等内容。下面一题考察到创建文件和往文件写入内容的模式。应该要非常熟悉文件操作API。</p>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"ABCDE"</span><span class="o">;</span>
            <span class="kt">byte</span> <span class="n">b</span><span class="o">[]</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
            <span class="nc">FileOutputStream</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="s">"test.txt"</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
            <span class="n">file</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
            <span class="n">file</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>问，假设程序当前目录下不存在文件test.txt，编译后，运行该程序3次，则文件test.txt的内容是（）</p>

  <p>A. 编译时将产生错误</p>

  <p>B. 运行时发生异常</p>

  <p>C. ABCDE</p>

  <p>D. ABCDEABCDEABCDE</p>
</blockquote>

<p>答案是 D, 因为<code class="highlighter-rouge">FileOutputStream("test.txt", true)</code> 第一个参数是name: 文件名，第二个参数是append: 是否追加内容。所以上面程序第一次运行创建文件并写入字符串，接下来两次运行都是文件已存在，在末尾追加字符串，运行3次结果就是<code class="highlighter-rouge">ABCDEABCDEABCDE</code> 了。</p>

<ul>
  <li>考察长度为0的数组与<code class="highlighter-rouge">null</code> 的区别，以及不常见的new 对象语法，递归调用的时候参数压栈和出栈顺序。这些有时候可以通过IDE的调试功能加深对运行过程的理解，应该熟练掌握常用的调试方法。看以下代码：
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">args</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="k">new</span> <span class="nc">Test</span><span class="o">()</span> <span class="o">{</span>
          <span class="o">{</span>
              <span class="nc">Test</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
          <span class="o">}</span>
      <span class="o">}.</span><span class="na">equals</span><span class="o">(</span><span class="kc">null</span><span class="o">))</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"A"</span><span class="o">);</span>
      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"B"</span><span class="o">);</span>
      <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<blockquote>
  <p>输出：</p>

  <p>A</p>

  <p>B</p>
</blockquote>

<p>在命令行不加参数运行上面的程序，那么<code class="highlighter-rouge">args</code> 字符串数组应该是<code class="highlighter-rouge">{}</code> ，而不是 <code class="highlighter-rouge">null</code> ，这就是要主要区分的长度为0的数组（或集合）与 <code class="highlighter-rouge">null</code> 的区别。 上面代码还涉及到 <code class="highlighter-rouge">||</code> 的短路求值， 第一个条件如果满足了， 就不再对第二个条件的表达式求值了。 刚开始<code class="highlighter-rouge">args == null</code> 不成立， 所以接着执行 <code class="highlighter-rouge">new Test() ...</code> 那部分，这部分代码创建一个 Test 对象， 并以 <code class="highlighter-rouge">null</code> 为参数调用main方法， 这时候应该创建子线程了…… 嗯，发觉关于线程的知识还掌握得不够，甚至说关于操作系统的也有点忘记了，也好，至少现在知道了，查漏补缺！ 第二次调用main方法的时候再到 <code class="highlighter-rouge">if</code> 语句判断那里，第一个条件就成立了，所以略过了第二个条件，打印 “A”，语句执行完之后返回到上一层 <code class="highlighter-rouge">if</code> 语句结果为 <code class="highlighter-rouge">false</code> 的情形， 所以打印 “B”。</p>

<ul>
  <li>关于集合框架(Collections framework)的常识性问题，例如：
哪个类不是继承自Collection接口的是（）
    <blockquote>
      <p>A. ArrayList
B. Set
C. Vector
D. Map</p>
    </blockquote>
  </li>
</ul>

<p>选D，这种题最好就看看集合框架继承关系图，平时多用就差不多了，一定要记清楚的。</p>

<p><img src="https://uploadfiles.nowcoder.com/images/20180227/3472441_1519736375385_5643D19A23970891816A811891CE6DE0" alt="img" /></p>

<ul>
  <li>关于 <code class="highlighter-rouge">String</code>,  <code class="highlighter-rouge">StringBuffer</code>,<code class="highlighter-rouge"> StringBuilder</code> 基本是必考的内容，所以不能错。</li>
</ul>

<p>竟然又有机会继续红牛加三明治的组合了。通宵啊，为了准备明天的笔试，总不能白白浪费了机会，时间也不能浪费！ 搞！搞到尽！</p>

<p>一个关于 <code class="highlighter-rouge">StringBuffer</code> 的题目，如下。</p>

<p>以下代码执行结果为（）</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestRef</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">StringBuffer</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuffer</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span>
        <span class="nc">StringBuffer</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuffer</span><span class="o">(</span><span class="s">"b"</span><span class="o">);</span>
        <span class="n">append</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">toString</span><span class="o">()+</span><span class="s">","</span><span class="o">+</span><span class="n">b</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="n">a</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
        <span class="n">append</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">a</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">toString</span><span class="o">()+</span><span class="s">","</span><span class="o">+</span><span class="n">b</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">append</span><span class="o">(</span><span class="nc">StringBuffer</span> <span class="n">a</span><span class="o">,</span> <span class="nc">StringBuffer</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">a</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>A. a,b b,b</p>

  <p>B. a,b bb,b</p>

  <p>C. ab,b bb,b</p>

  <p>D. ab,b bb,bb</p>
</blockquote>

<p>答案是C（上面选项没有换行，实际运行会换行）</p>

<p>解释：</p>

<h3 id="string-handling字符串处理">String Handling(字符串处理)</h3>

<p><code class="highlighter-rouge">String</code>, <code class="highlighter-rouge">StringBuffer</code>, <code class="highlighter-rouge">StringBuilder</code> 这3个都是<code class="highlighter-rouge">final</code> 修饰的，所以不能被继承。 而且它们都实现了 <code class="highlighter-rouge">CharSequence</code> 接口。</p>

<p><code class="highlighter-rouge">String</code> 的几个构造方法：</p>

<ul>
  <li>
    <p><code class="highlighter-rouge">String s = new String();  // 会创建空的字符串，是没有字符，不是空格</code></p>
  </li>
  <li>
    <p><code class="highlighter-rouge">String(char chars[]) // 由字符数组构建字符串</code></p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">char</span> <span class="n">chars</span><span class="o">[]</span> <span class="o">=</span> <span class="o">{</span><span class="sc">'a'</span><span class="o">,</span> <span class="sc">'b'</span><span class="o">,</span> <span class="sc">'c'</span><span class="o">};</span>
<span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">chars</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="highlighter-rouge">String(char chars[], int startIndex, int numChars)</code></p>
  </li>
  <li>
    <p><code class="highlighter-rouge">String(String strObj)</code> 这里<code class="highlighter-rouge">strObj</code> 是一个 <code class="highlighter-rouge">String</code> 对象。</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">String(byte chrs[])</code></p>
  </li>
  <li>
    <p><code class="highlighter-rouge">String(byte chrs[], int startIndex, int numChars)</code> 字节数组转化为字符串，编码格式使用平台默认的。 Java 的<code class="highlighter-rouge">char</code>是16位的 Unicode， 但是网络上经常使用 8 位的 ASCII， 所以有时候需要转换一下。看下面一个例子：</p>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Construct string from subset of char array.</span>
<span class="kd">class</span> <span class="nc">SubStringCons</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">byte</span> <span class="n">ascii</span><span class="o">[]</span> <span class="o">=</span> <span class="o">{</span><span class="mi">65</span><span class="o">,</span> <span class="mi">66</span><span class="o">,</span> <span class="mi">67</span><span class="o">,</span> <span class="mi">68</span><span class="o">,</span> <span class="mi">69</span><span class="o">,</span> <span class="mi">70</span><span class="o">};</span>
        	
        	<span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">ascii</span><span class="o">);</span>
        	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">);</span>
        
        	<span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">ascii</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
    		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>ABCDEF</p>

  <p>CDE</p>
</blockquote>

<p><strong>注意</strong> 由数组创建的字符串在创建时候复制了值，之后再修改数组的内容对创建的字符串没有影响。</p>

<ul>
  <li><code class="highlighter-rouge">String(StringBuffer strBufObj) // 由StringBuffer创建字符串</code></li>
  <li><code class="highlighter-rouge">String(StringBuilder strBuildObj) // 由StringBuilder创建字符串</code></li>
</ul>

<p>String Literals 是可以作<code class="highlighter-rouge">String</code> 对象直接调用方法的， 如 <code class="highlighter-rouge">"abc".length();</code></p>

<ul>
  <li>
    <p>关于对象成员占用内存的说法哪个正确？</p>

    <blockquote>
      <p>A. 同一个类的对象共用一段内存</p>

      <p>B. 同一个类的对象是用不同的内存段，但静态成员共享相同的内存空间</p>

      <p>C. 对象的方法不占用内存</p>

      <p>D. 以上都不对</p>
    </blockquote>

    <p>这个题，我还未搞清楚。</p>
  </li>
  <li>
    <p>简答题 有n盏灯，编号为1到N。第1个人把所有灯打开，第2个人按下所有编号为2的倍数的开关（按下开关打开的灯被关闭），第3个人按下所有编号为3的倍数的开关（按下开关开着的灯被关闭，关闭的灯被开启），以此类推。一共有k个人，问最后有哪些灯开着？</p>
  </li>
</ul>

<p>这个题目遇到过两次了，TCL，绿米联创！ 如果当时解决了，那就好办了。</p>

<p>TCL最后一道题，说是简答题，也有点点编程题的意味。考察冒泡排序算法的优化情形。</p>

<ul>
  <li>在数据结构与算法设计中冒泡算法是最简单也是经典算法之一，请你把冒泡算法思想写出来（可以用伪代码，图，例子等你认为最能表达清楚的方式。）下面有一串不重复整数date=[16,10,2,3,4,5,6,7,8,9,11,12,13,14,15,1], 请你针对这一串整数在冒泡算法整体思路不变情况下优化算法并实现。</li>
</ul>
:ET