I"\<blockquote>
  <p>原文由 Trisha Gee 在当地时间2019年11月11日发布在 <a href="https://blog.jetbrains.com/idea/2019/11/tutorial-reactive-spring-boot-a-javafx-spring-boot-application/">INTELLIJ IDEA BLOG</a></p>
</blockquote>

<p>这是第三步，演示如何创建一个 响应式应用程序，使用Spring Boot, Kotlin，Java和JavaFX。</p>

<p>这个第三步演示如何创建一个由Spring Boot启动并管理的JavaFX应用程序，因此我们可以在JavaFX应用程序中使用Spring的特性，例如控制反转。本文也有配套的<a href="https://www.bilibili.com/video/av82672621">视频</a>。</p>

<!--more-->

<h3 id="设置好模块">设置好模块</h3>

<p>在这一节，我重用前面步骤创建的客户端，并为它添加一个新模块。但是如果我们想将这个作为一个独立的工程，我们可以创建一个新的工程而不是新模块，步骤是非常相似的（替换new module为new project)。</p>

<ol>
  <li>打开前面步骤创建的<code class="highlighter-rouge">stock-client</code>工程后，创建一个新的模块。</li>
  <li>这会是一个Spring Boot应用程序，所以在左边选择Spring Initializr。</li>
  <li>在本教程我们使用Java 13作为SDK，虽然我们并没有后使用任何Java 13特有的特性。</li>
  <li>为工程填入groupId，和artifact名为<code class="highlighter-rouge">stock-ui</code>。</li>
  <li>保持Maven工程默认的Java和jar打包选项。</li>
  <li>我们选择Java 11作为Java版本，因为这是最近的长期支持版，但是对于本工程而已，这没有区别。</li>
  <li>为模块输入一个有用的描述，这是我们的第三个模块，这有助于我们清楚每个模块的作用。</li>
  <li>如有需要也可以改变默认的包结构。</li>
  <li>在这个模块，我们不需要选择任何Spring Boot Starter。</li>
  <li>保持默认的模块名和位置。</li>
</ol>

<p>IntelliJ IDEA从Spring Initializr下载工程并将IDE设置好。如果有提示选择 “show run configuration in services” 我们可以选择它。 那个services窗口对于查看正在运行的服务和管理微服务应用比较有用。</p>

<h3 id="spring-boot应用程序类">Spring Boot应用程序类</h3>

<p>跟往常一样，Spring Boot为我们生成默认的应用程序类。我们需要更改一下以便启动一个JavaFX应用程序，但现在我们先留着它这样子。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>

<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StockUiApplication</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">StockUiApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="更新spring-boot设置">更新Spring Boot设置</h3>

<p>因为这是一个JavaFX应用程序，不是一个Web应用程序。所以在这个模块的application.properties里添加：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">spring.main.web-application-type</span><span class="p">=</span><span class="s">none</span>
</code></pre></div></div>

<h3 id="创建一个-javafx-应用程序类">创建一个 JavaFX 应用程序类</h3>

<ol>
  <li>在与Spring应用程序类同一个包里创建一个新的Java类，命名为<code class="highlighter-rouge">ChartApplicaion</code>。</li>
  <li>（提示：在project窗口，Windows/Linux用户可以使用Alt+Insert（macOS用户是⌘N) 创建一个新文件或目录）。</li>
  <li>让它继承于<code class="highlighter-rouge">javafx.application.Application</code>。</li>
</ol>

<p>这个类目前不在类路径上，因为我们还未添加JavaFX到依赖里，所以我们需要将它添加到pom.xml 文件。</p>

<ol>
  <li>（提示：在红色的<code class="highlighter-rouge">Application</code> 文字上按下Alt+Enter 会有”Add Maven Dependency”选项。</li>
  <li>将<code class="highlighter-rouge">org.openjfx:javafx-graphics</code>添加为依赖，版本是 13。</li>
</ol>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
	<span class="nt">&lt;groupId&gt;</span>org.openjfx<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>javafx-graphics<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>13<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<ol>
  <li>现在可以在<code class="highlighter-rouge">ChartApplication</code>导入<code class="highlighter-rouge">javafx.application.Application</code>。</li>
  <li><code class="highlighter-rouge">Application</code>是一个抽象类，所以我们需要重写一个方法。</li>
  <li>（提示：在红色的错误上按下Alt+Enter并选择”Implement methods”，选择要实现的方法，可以让InteliJ IDEA去帮我们实现这些方法。）。</li>
  <li>只有一个start方法是必须实现的。</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">javafx.application.Application</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javafx.stage.Stage</span><span class="o">;</span>
 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChartApplication</span> <span class="kd">extends</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="nc">Stage</span> <span class="n">stage</span><span class="o">)</span> <span class="o">{</span>
        
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="设置好-spring-boot-应用程序类">设置好 Spring Boot 应用程序类</h3>

<p>现在我们有了一个 JavaFX 应用程序，我们需要从Spring Boot应用程序里面启动它。</p>

<p>不使用<code class="highlighter-rouge">SpringApplication</code>启动应用，我们将使用JavaFX的<code class="highlighter-rouge">Application</code>类，并以我们的JavaFX类作为参数调用<code class="highlighter-rouge">launch</code>方法。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">javafx.application.Application</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>
 
<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StockUiApplication</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Application</span><span class="o">.</span><span class="na">launch</span><span class="o">(</span><span class="nc">ChartApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>我们要分离出两个应用程序类的原因跟JavaFX以及Java的模块化机制有关，这些细节已经超出了本教程的讨论范围。如果我们想要整合Spring和JavaFX但不使用Java 9的模块，这是一种做法。</p>

<h3 id="通过应用程序上下文发布事件">通过应用程序上下文发布事件</h3>

<p>让我们回到我们的JavaFX应用程序类，<code class="highlighter-rouge">ChartApplication</code>。</p>

<ol>
  <li>创建一个字段<code class="highlighter-rouge">applicationContext</code>，这会是<code class="highlighter-rouge">ConfigurableApplicationContext</code>类型。</li>
  <li>我们的<code class="highlighter-rouge">start</code>方法是一个标准的JavaFX方法，它以<code class="highlighter-rouge">Stage</code>作为参数，但<code class="highlighter-rouge">stage</code>就绪时调用。我们可以使用Spring的通过应用程序上下文发布事件的模式去告诉何时<code class="highlighter-rouge">Stage</code>就绪。在<code class="highlighter-rouge">start()</code>方法内，以一个新的 <code class="highlighter-rouge">StageReadyEvent</code>作为参数去调用<code class="highlighter-rouge">applicationContext.publishEvent()</code>。</li>
  <li>将stage传入到事件的构造函数。</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChartApplication</span> <span class="kd">extends</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">ConfigurableApplicationContext</span> <span class="n">applicationContext</span><span class="o">;</span>
 
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="nc">Stage</span> <span class="n">stage</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">applicationContext</span><span class="o">.</span><span class="na">publishEvent</span><span class="o">(</span><span class="k">new</span> <span class="nc">StageReadyEvent</span><span class="o">(</span><span class="n">stage</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>现在我们需要创建我们的<code class="highlighter-rouge">StageReadyEvent</code>。</p>

<ol>
  <li>简单起见将它创建为<code class="highlighter-rouge">ChartApplication</code>的一个内部类。以后总能再重构出来的。</li>
  <li>（提示：在红色的<code class="highlighter-rouge">StageReadyEvent</code>按下Alt+Enter会有个选项”Create inner class StageReadyEvent”）。</li>
  <li>在<code class="highlighter-rouge">StageReadyEvent</code>的构造函数，传入<code class="highlighter-rouge">stage</code>参数到<code class="highlighter-rouge">super</code>构造函数。</li>
  <li>将这个内部类改为<code class="highlighter-rouge">static</code>且是包内可见，其它类将会监听这个事件。</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kd">class</span> <span class="nc">StageReadyEvent</span> <span class="kd">extends</span> <span class="nc">ApplicationEvent</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">StageReadyEvent</span><span class="o">(</span><span class="nc">Stage</span> <span class="n">stage</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">stage</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="创建应用程序上下文">创建应用程序上下文</h3>

<p>在<code class="highlighter-rouge">Application</code>类里面有些其它有用的方法我们可以重写利用一下。</p>

<ol>
  <li>重写<code class="highlighter-rouge">init()</code>方法。这是我们需要初始化应用程序上下文的地方。</li>
  <li>（提示：你可以在一个类当中使用Ctrl+O选择要重写的超类方法）。</li>
  <li>创建一个新的<code class="highlighter-rouge">SpringApplicationBuilder</code>，并传入一个我们的Spring Boot应用程序类，也就是 <code class="highlighter-rouge">StockUiApplication</code>。</li>
  <li>运行<code class="highlighter-rouge">run()</code>以获取应用程序上下文，并赋值到<code class="highlighter-rouge">applicationContext</code>字段。</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">applicationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SpringApplicationBuilder</span><span class="o">(</span><span class="nc">StockUiApplication</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">run</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="关闭应用程序上下文">关闭应用程序上下文</h3>

<p>因为我们有一个<code class="highlighter-rouge">init()</code>方法，我们也应该有一些适当的拆卸或清理步骤。</p>

<ol>
  <li>重写<code class="highlighter-rouge">Application</code>类的<code class="highlighter-rouge">stop</code>方法。</li>
  <li>在<code class="highlighter-rouge">stop</code>方法内，调用<code class="highlighter-rouge">applicationContext.close()</code>方法。</li>
  <li>同时也在JavaFX程序结束处调用<code class="highlighter-rouge">Platform.exit()</code>。</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">applicationContext</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="nc">Platform</span><span class="o">.</span><span class="na">exit</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>现在我们有了Spring Boot应用程序类用来启动 JavaFX的<code class="highlighter-rouge">Application</code>类，即<code class="highlighter-rouge">ChartApplication</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">javafx.application.Application</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javafx.application.Platform</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javafx.stage.Stage</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.builder.SpringApplicationBuilder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationEvent</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.ConfigurableApplicationContext</span><span class="o">;</span>
 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChartApplication</span> <span class="kd">extends</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">ConfigurableApplicationContext</span> <span class="n">applicationContext</span><span class="o">;</span>
 
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">applicationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SpringApplicationBuilder</span><span class="o">(</span><span class="nc">StockUiApplication</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">run</span><span class="o">();</span>
    <span class="o">}</span>
 
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="nc">Stage</span> <span class="n">stage</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">applicationContext</span><span class="o">.</span><span class="na">publishEvent</span><span class="o">(</span><span class="k">new</span> <span class="nc">StageReadyEvent</span><span class="o">(</span><span class="n">stage</span><span class="o">));</span>
    <span class="o">}</span>
 
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">applicationContext</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="nc">Platform</span><span class="o">.</span><span class="na">exit</span><span class="o">();</span>
    <span class="o">}</span>
 
    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">StageReadyEvent</span> <span class="kd">extends</span> <span class="nc">ApplicationEvent</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="nf">StageReadyEvent</span><span class="o">(</span><span class="nc">Stage</span> <span class="n">stage</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">stage</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="监听应用程序事件">监听应用程序事件</h3>

<p>我们需要一些东西去监听我们所创建的<code class="highlighter-rouge">StageReadyEvent</code>。</p>

<ol>
  <li>当它就绪时这个会设置好我们的JavaFX Stage。</li>
  <li>这个类应该用Spring的<code class="highlighter-rouge">@Component</code>注解。</li>
  <li>这个类需要实现<code class="highlighter-rouge">ApplicationListener</code>接口，去监听我们的<code class="highlighter-rouge">StageReadyEvent</code>事件。</li>
  <li>我们需要实现这个接口上的方法，即<code class="highlighter-rouge">onApplicationEvent</code>。</li>
  <li><code class="highlighter-rouge">onApplicationEvent</code>方法需要一个<code class="highlighter-rouge">StageReadyEvent</code>。 事件触发<code class="highlighter-rouge">getStage</code>被调用并将结果赋值到一个类型为<code class="highlighter-rouge">Stage</code>的局部变量。</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.mechanitis.demo.stockui.ChartApplication.StageReadyEvent</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javafx.stage.Stage</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationListener</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
 
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StageInitializer</span> <span class="kd">implements</span> <span class="nc">ApplicationListener</span><span class="o">&lt;</span><span class="nc">StageReadyEvent</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onApplicationEvent</span><span class="o">(</span><span class="nc">StageReadyEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Stage</span> <span class="n">stage</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getStage</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>（注意：这些代码当前未能通过编译）</p>

<p>这个方法不存在，所以我们需要创建这个<code class="highlighter-rouge">StageReadyEvent</code>。</p>

<ol>
  <li>（提示：我们可以在<code class="highlighter-rouge">StageInitialize</code>r里面红色的<code class="highlighter-rouge">getStage</code>方法上按下Alt+Enter并选择”Create method getStage” 去让IntelliJ IDEA帮我们生成这个。</li>
  <li>父类里面有个我们想要的方法，<code class="highlighter-rouge">getSource</code>这会返回一个对象，所以调用这个方法并将返回值。</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kd">class</span> <span class="nc">StageReadyEvent</span> <span class="kd">extends</span> <span class="nc">ApplicationEvent</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">StageReadyEvent</span><span class="o">(</span><span class="nc">Stage</span> <span class="n">stage</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">stage</span><span class="o">);</span>
    <span class="o">}</span>
 
    <span class="kd">public</span> <span class="nc">Stage</span> <span class="nf">getStage</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">((</span><span class="nc">Stage</span><span class="o">)</span> <span class="n">getSource</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>我们知道source就是<code class="highlighter-rouge">Stage</code>类型，因为当我们将stage的构造函数参数传入到父类的构造函数时，它就变成了 source。</p>

<h3 id="最后步骤">最后步骤</h3>

<p>这个<code class="highlighter-rouge">Stage</code>已经准备就是可用于我们的用户界面。我们可以运行我们的<code class="highlighter-rouge">StockUiApplication</code>，然后看到它成功地作为一个Spring Boot应用程序启动了。同时它也启动了一个Java进程显示一个UI如果我们有创建的话。目前位置，我们已经成功地创建了一个由Spring管理并启动的JavaFX应用程序，并且允许我们方便地使用Spring应用程序的特性。</p>

<p><a href="https://github.com/zwt-io/rsb/">全部代码在 GitHub</a></p>

:ET