I"e-<blockquote>
  <p>原文由 Trisha Gee 在当地时间2019年12月16日发布在 <a href="https://blog.jetbrains.com/idea/2019/12/tutorial-reactive-spring-boot-kotlin-rsocket-server/">INTELLIJ IDEA BLOG</a></p>
</blockquote>

<p>在这一节，我们使用Spring Profiles让应用程序决定使用哪个客户端（使用服务端发送事件的 WebClient，或 RSocket）连接到Kotlin Spring Boot股票价格服务。</p>

<p>现在我们有了一个RSocket客户端，可以让我们连接到我们的RSocket服务器，我们想在我们的JavaFX应用程序中使用它。</p>

<!--more-->

<h3 id="创建-rsocketstockclient-bean">创建 RSocketStockClient Bean</h3>

<p>我们特意创建两种<code class="highlighter-rouge">StockClient</code>实现，一个通过RSocket连接，然后另一个是用WebClient。我们的<code class="highlighter-rouge">ClientConfiguration</code>仅将其中一个Bean暴露，即<code class="highlighter-rouge">WebClientStockClient</code>，如果我们希望应用程序能够使用RSocket客户端，则也需要添加一个<code class="highlighter-rouge">RSocketClient</code> Bean。</p>

<ol>
  <li>
    <p>在stock-client模块的<code class="highlighter-rouge">ClientConfiguration</code>创建一个新的<code class="highlighter-rouge">@Bean</code>方法，命名为<code class="highlighter-rouge">rSocketStockClient</code>，其返回值类型为<code class="highlighter-rouge">StockClient</code>。</p>
  </li>
  <li>
    <p>这个方法体需要返回一个新的<code class="highlighter-rouge">RSocketStockClient</code>，所以需要一个<code class="highlighter-rouge">rSocketRequester</code>作为构造函数参数。</p>
  </li>
  <li>
    <p>给<code class="highlighter-rouge">rSocketStockClient</code>方法添加一个<code class="highlighter-rouge">RSocketRequester</code>作为参数。</p>
  </li>
  <li>
    <p>（提示：我们可以让IntelliJ IDEA添加适当的方法参数，如果我们传入一个未知变量<code class="highlighter-rouge">rSocketRequester</code>到<code class="highlighter-rouge">RSocketStockClient</code>的构造器，在未知变量按下Alt+Enter并选择“Create parameter”）</p>
  </li>
  <li>
    <p>（提示：IntelliJ IDEA Ultimate会警告你说这个参数不能自动注入，因为没有类型匹配的Beans）</p>
  </li>
  <li>
    <p>创建另一个名为<code class="highlighter-rouge">rSocketRequester</code>的<code class="highlighter-rouge">@Bean</code>方法，返回<code class="highlighter-rouge">RSocketRequester</code>。</p>
  </li>
  <li>
    <p>给方法声明一个类型为<code class="highlighter-rouge">RSocketRequester.Builder</code>的参数<code class="highlighter-rouge">builder</code> 这应该会被Spring自动注入。</p>
  </li>
  <li>
    <p>使用<code class="highlighter-rouge">builder</code>的<code class="highlighter-rouge">connectTcp</code>方法，并给它 “localhost” 和端口 7000(这是Spring Boot的RSocket运行地址)。调用<code class="highlighter-rouge">block()</code>方法完成这次连接。</p>
  </li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClientConfiguration</span> <span class="o">{</span>
    <span class="c1">// WebClientStockClient bean 方法...</span>
 
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">StockClient</span> <span class="nf">rSocketStockClient</span><span class="o">(</span><span class="nc">RSocketRequester</span> <span class="n">rSocketRequester</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">RSocketStockClient</span><span class="o">(</span><span class="n">rSocketRequester</span><span class="o">);</span>
    <span class="o">}</span>
 
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">RSocketRequester</span> <span class="nf">rSocketRequester</span><span class="o">(</span><span class="nc">RSocketRequester</span><span class="o">.</span><span class="na">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">connectTcp</span><span class="o">(</span><span class="s">"localhost"</span><span class="o">,</span> <span class="mi">7000</span><span class="o">).</span><span class="na">block</span><span class="o">();</span>
    <span class="o">}</span>
 
    <span class="c1">// WebClient bean 方法...</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="选择使用哪个-bean">选择使用哪个 Bean</h3>

<p>如果我们回到JavaFX的<code class="highlighter-rouge">ChartController</code>（在stock-ui 模块），这个类就是用了<code class="highlighter-rouge">StockClient</code>去连接到价格服务，并在图表上显示价格的。IntelliJ IDEA 旗舰版在这个类显示警告，说这里边有多于一个Bean符合 StockClient 类型，也就是我们的<code class="highlighter-rouge">rSocketStockClient</code>和<code class="highlighter-rouge">webClientStockClient</code>。我们需要配置一种方式，指定我们实际想要使用哪个客户端。一种做法是使用Spring profiles。</p>

<ol>
  <li>添加一个<code class="highlighter-rouge">@Profile</code>注解到<code class="highlighter-rouge">webClientStockClient</code>方法，传入一个值 <code class="highlighter-rouge">sse</code>（表示 Server-Sent Events)。</li>
  <li>给<code class="highlighter-rouge">rSocketStockClient</code>添加一个<code class="highlighter-rouge">@Profile</code>注解，值为<code class="highlighter-rouge">rsocket</code></li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nd">@Profile</span><span class="o">(</span><span class="s">"sse"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">StockClient</span> <span class="nf">webClientStockClient</span><span class="o">(</span><span class="nc">WebClient</span> <span class="n">webClient</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">WebClientStockClient</span><span class="o">(</span><span class="n">webClient</span><span class="o">);</span>
<span class="o">}</span>
 
<span class="nd">@Bean</span>
<span class="nd">@Profile</span><span class="o">(</span><span class="s">"rsocket"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">StockClient</span> <span class="nf">rSocketStockClient</span><span class="o">(</span><span class="nc">RSocketRequester</span> <span class="n">rSocketRequester</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">RSocketStockClient</span><span class="o">(</span><span class="n">rSocketRequester</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="选择激活的配置">选择激活的配置</h3>

<p>如果我们使用的是IntelliJ IDEA旗舰版，当我们在<code class="highlighter-rouge">ChartController</code>里面，我们可以看到错误已经消失了。但我们还是需要指定想要使用哪个配置(profile)。</p>

<ol>
  <li>去到stock-ui模块的application.properties文件</li>
  <li>设置 spring.profiles.active属性的值为<code class="highlighter-rouge">sse</code>这应该会给我们同样的Bean和之前同样的功能。</li>
</ol>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># web-application and application title properties here...
</span><span class="py">spring.profiles.active</span><span class="p">=</span><span class="s">sse</span>
</code></pre></div></div>

<ol>
  <li>重新运行应用程序，程序应该按预期启动，并像之前那样显示两组价格数据。</li>
  <li>注意到在运行窗口，JavaFX应用程序已经以<em>sse</em>配置启动。</li>
</ol>

<h3 id="调试日志">调试日志</h3>

<p>如果我们想更加确认我们所使用的Bean，我们可以回到客户端并添加一些日志功能。</p>

<ol>
  <li>在<code class="highlighter-rouge">WebClientStockClient</code>里面的<code class="highlighter-rouge">pricesFor</code>方法添加一个info等级的日志信息表示当前使用的是 WebClient stock client。</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">Flux</span><span class="o">&lt;</span><span class="nc">StockPrice</span><span class="o">&gt;</span> <span class="nf">pricesFor</span><span class="o">(</span><span class="nc">String</span> <span class="n">symbol</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"WebClient stock client"</span><span class="o">);</span>
    <span class="k">return</span> <span class="c1">// 在这里创建Flux</span>
<span class="o">}</span>
</code></pre></div></div>

<ol>
  <li>在<code class="highlighter-rouge">RSocketStockClient</code>也做类似的操作</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">Flux</span><span class="o">&lt;</span><span class="nc">StockPrice</span><span class="o">&gt;</span> <span class="nf">pricesFor</span><span class="o">(</span><span class="nc">String</span> <span class="n">symbol</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"RSocket stock client"</span><span class="o">);</span>
    <span class="k">return</span> <span class="c1">// 在这里创建Flux</span>
<span class="o">}</span>
</code></pre></div></div>

<ol>
  <li>重新运行应用程序，我们应该看到两个日志消息，表示我们当前使用的是WebClient stock client。</li>
</ol>

<h3 id="通过-rsocket-获取价格">通过 RSocket 获取价格</h3>

<p>最后让我们使用RSocket去获取股票价格并显示到JavaFX的折线图上吧。</p>

<ol>
  <li>回到stock-ui的application.properties文件，并将活动的配置改为<code class="highlighter-rouge">rsocket</code>。</li>
  <li>重新运行应用程序，所有东西应该按预期运行。这次我们使用的是<em>rsocket</em>配置，并通过<code class="highlighter-rouge">RSocketStockClient</code>连接到RSocket价格服务器。</li>
</ol>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#这里是 web-application 和 application title 的属性...
</span><span class="py">spring.profiles.active</span><span class="p">=</span><span class="s">rsocket</span>
</code></pre></div></div>

<p>所以就是这样子。一个完整的带有JavaFX折线图，并订阅到一个Kotlin Spring Boot应用程序的响应式数据流的价格数据的端到端应用程序。而且我们能够配置通过服务端发送事件或新的RSocket协议获取这些股票价格。</p>

<p><a href="https://github.com/zwt-io/rsb/">全部代码在 GitHub</a>：https://github.com/zwt-io/rsb/</p>
:ET